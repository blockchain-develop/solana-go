// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TwoHopSwapV2 is the `twoHopSwapV2` instruction.
type TwoHopSwapV2 struct {
	Amount                 *uint64
	OtherAmountThreshold   *uint64
	AmountSpecifiedIsInput *bool
	AToBOne                *bool
	AToBTwo                *bool
	SqrtPriceLimitOne      *ag_binary.Uint128
	SqrtPriceLimitTwo      *ag_binary.Uint128
	RemainingAccountsInfo  *RemainingAccountsInfo `bin:"optional"`

	// [0] = [WRITE] whirlpoolOne
	//
	// [1] = [WRITE] whirlpoolTwo
	//
	// [2] = [] tokenMintInput
	//
	// [3] = [] tokenMintIntermediate
	//
	// [4] = [] tokenMintOutput
	//
	// [5] = [] tokenProgramInput
	//
	// [6] = [] tokenProgramIntermediate
	//
	// [7] = [] tokenProgramOutput
	//
	// [8] = [WRITE] tokenOwnerAccountInput
	//
	// [9] = [WRITE] tokenVaultOneInput
	//
	// [10] = [WRITE] tokenVaultOneIntermediate
	//
	// [11] = [WRITE] tokenVaultTwoIntermediate
	//
	// [12] = [WRITE] tokenVaultTwoOutput
	//
	// [13] = [WRITE] tokenOwnerAccountOutput
	//
	// [14] = [SIGNER] tokenAuthority
	//
	// [15] = [WRITE] tickArrayOne0
	//
	// [16] = [WRITE] tickArrayOne1
	//
	// [17] = [WRITE] tickArrayOne2
	//
	// [18] = [WRITE] tickArrayTwo0
	//
	// [19] = [WRITE] tickArrayTwo1
	//
	// [20] = [WRITE] tickArrayTwo2
	//
	// [21] = [WRITE] oracleOne
	//
	// [22] = [WRITE] oracleTwo
	//
	// [23] = [] memoProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTwoHopSwapV2InstructionBuilder creates a new `TwoHopSwapV2` instruction builder.
func NewTwoHopSwapV2InstructionBuilder() *TwoHopSwapV2 {
	nd := &TwoHopSwapV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 24),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *TwoHopSwapV2) SetAmount(amount uint64) *TwoHopSwapV2 {
	inst.Amount = &amount
	return inst
}

// SetOtherAmountThreshold sets the "otherAmountThreshold" parameter.
func (inst *TwoHopSwapV2) SetOtherAmountThreshold(otherAmountThreshold uint64) *TwoHopSwapV2 {
	inst.OtherAmountThreshold = &otherAmountThreshold
	return inst
}

// SetAmountSpecifiedIsInput sets the "amountSpecifiedIsInput" parameter.
func (inst *TwoHopSwapV2) SetAmountSpecifiedIsInput(amountSpecifiedIsInput bool) *TwoHopSwapV2 {
	inst.AmountSpecifiedIsInput = &amountSpecifiedIsInput
	return inst
}

// SetAToBOne sets the "aToBOne" parameter.
func (inst *TwoHopSwapV2) SetAToBOne(aToBOne bool) *TwoHopSwapV2 {
	inst.AToBOne = &aToBOne
	return inst
}

// SetAToBTwo sets the "aToBTwo" parameter.
func (inst *TwoHopSwapV2) SetAToBTwo(aToBTwo bool) *TwoHopSwapV2 {
	inst.AToBTwo = &aToBTwo
	return inst
}

// SetSqrtPriceLimitOne sets the "sqrtPriceLimitOne" parameter.
func (inst *TwoHopSwapV2) SetSqrtPriceLimitOne(sqrtPriceLimitOne ag_binary.Uint128) *TwoHopSwapV2 {
	inst.SqrtPriceLimitOne = &sqrtPriceLimitOne
	return inst
}

// SetSqrtPriceLimitTwo sets the "sqrtPriceLimitTwo" parameter.
func (inst *TwoHopSwapV2) SetSqrtPriceLimitTwo(sqrtPriceLimitTwo ag_binary.Uint128) *TwoHopSwapV2 {
	inst.SqrtPriceLimitTwo = &sqrtPriceLimitTwo
	return inst
}

// SetRemainingAccountsInfo sets the "remainingAccountsInfo" parameter.
func (inst *TwoHopSwapV2) SetRemainingAccountsInfo(remainingAccountsInfo RemainingAccountsInfo) *TwoHopSwapV2 {
	inst.RemainingAccountsInfo = &remainingAccountsInfo
	return inst
}

// SetWhirlpoolOneAccount sets the "whirlpoolOne" account.
func (inst *TwoHopSwapV2) SetWhirlpoolOneAccount(whirlpoolOne ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolOne).WRITE()
	return inst
}

// GetWhirlpoolOneAccount gets the "whirlpoolOne" account.
func (inst *TwoHopSwapV2) GetWhirlpoolOneAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWhirlpoolTwoAccount sets the "whirlpoolTwo" account.
func (inst *TwoHopSwapV2) SetWhirlpoolTwoAccount(whirlpoolTwo ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(whirlpoolTwo).WRITE()
	return inst
}

// GetWhirlpoolTwoAccount gets the "whirlpoolTwo" account.
func (inst *TwoHopSwapV2) GetWhirlpoolTwoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintInputAccount sets the "tokenMintInput" account.
func (inst *TwoHopSwapV2) SetTokenMintInputAccount(tokenMintInput ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMintInput)
	return inst
}

// GetTokenMintInputAccount gets the "tokenMintInput" account.
func (inst *TwoHopSwapV2) GetTokenMintInputAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenMintIntermediateAccount sets the "tokenMintIntermediate" account.
func (inst *TwoHopSwapV2) SetTokenMintIntermediateAccount(tokenMintIntermediate ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenMintIntermediate)
	return inst
}

// GetTokenMintIntermediateAccount gets the "tokenMintIntermediate" account.
func (inst *TwoHopSwapV2) GetTokenMintIntermediateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenMintOutputAccount sets the "tokenMintOutput" account.
func (inst *TwoHopSwapV2) SetTokenMintOutputAccount(tokenMintOutput ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenMintOutput)
	return inst
}

// GetTokenMintOutputAccount gets the "tokenMintOutput" account.
func (inst *TwoHopSwapV2) GetTokenMintOutputAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramInputAccount sets the "tokenProgramInput" account.
func (inst *TwoHopSwapV2) SetTokenProgramInputAccount(tokenProgramInput ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgramInput)
	return inst
}

// GetTokenProgramInputAccount gets the "tokenProgramInput" account.
func (inst *TwoHopSwapV2) GetTokenProgramInputAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramIntermediateAccount sets the "tokenProgramIntermediate" account.
func (inst *TwoHopSwapV2) SetTokenProgramIntermediateAccount(tokenProgramIntermediate ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgramIntermediate)
	return inst
}

// GetTokenProgramIntermediateAccount gets the "tokenProgramIntermediate" account.
func (inst *TwoHopSwapV2) GetTokenProgramIntermediateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramOutputAccount sets the "tokenProgramOutput" account.
func (inst *TwoHopSwapV2) SetTokenProgramOutputAccount(tokenProgramOutput ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgramOutput)
	return inst
}

// GetTokenProgramOutputAccount gets the "tokenProgramOutput" account.
func (inst *TwoHopSwapV2) GetTokenProgramOutputAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenOwnerAccountInputAccount sets the "tokenOwnerAccountInput" account.
func (inst *TwoHopSwapV2) SetTokenOwnerAccountInputAccount(tokenOwnerAccountInput ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenOwnerAccountInput).WRITE()
	return inst
}

// GetTokenOwnerAccountInputAccount gets the "tokenOwnerAccountInput" account.
func (inst *TwoHopSwapV2) GetTokenOwnerAccountInputAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenVaultOneInputAccount sets the "tokenVaultOneInput" account.
func (inst *TwoHopSwapV2) SetTokenVaultOneInputAccount(tokenVaultOneInput ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenVaultOneInput).WRITE()
	return inst
}

// GetTokenVaultOneInputAccount gets the "tokenVaultOneInput" account.
func (inst *TwoHopSwapV2) GetTokenVaultOneInputAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenVaultOneIntermediateAccount sets the "tokenVaultOneIntermediate" account.
func (inst *TwoHopSwapV2) SetTokenVaultOneIntermediateAccount(tokenVaultOneIntermediate ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenVaultOneIntermediate).WRITE()
	return inst
}

// GetTokenVaultOneIntermediateAccount gets the "tokenVaultOneIntermediate" account.
func (inst *TwoHopSwapV2) GetTokenVaultOneIntermediateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenVaultTwoIntermediateAccount sets the "tokenVaultTwoIntermediate" account.
func (inst *TwoHopSwapV2) SetTokenVaultTwoIntermediateAccount(tokenVaultTwoIntermediate ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenVaultTwoIntermediate).WRITE()
	return inst
}

// GetTokenVaultTwoIntermediateAccount gets the "tokenVaultTwoIntermediate" account.
func (inst *TwoHopSwapV2) GetTokenVaultTwoIntermediateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenVaultTwoOutputAccount sets the "tokenVaultTwoOutput" account.
func (inst *TwoHopSwapV2) SetTokenVaultTwoOutputAccount(tokenVaultTwoOutput ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenVaultTwoOutput).WRITE()
	return inst
}

// GetTokenVaultTwoOutputAccount gets the "tokenVaultTwoOutput" account.
func (inst *TwoHopSwapV2) GetTokenVaultTwoOutputAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenOwnerAccountOutputAccount sets the "tokenOwnerAccountOutput" account.
func (inst *TwoHopSwapV2) SetTokenOwnerAccountOutputAccount(tokenOwnerAccountOutput ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenOwnerAccountOutput).WRITE()
	return inst
}

// GetTokenOwnerAccountOutputAccount gets the "tokenOwnerAccountOutput" account.
func (inst *TwoHopSwapV2) GetTokenOwnerAccountOutputAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetTokenAuthorityAccount sets the "tokenAuthority" account.
func (inst *TwoHopSwapV2) SetTokenAuthorityAccount(tokenAuthority ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tokenAuthority).SIGNER()
	return inst
}

// GetTokenAuthorityAccount gets the "tokenAuthority" account.
func (inst *TwoHopSwapV2) GetTokenAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetTickArrayOne0Account sets the "tickArrayOne0" account.
func (inst *TwoHopSwapV2) SetTickArrayOne0Account(tickArrayOne0 ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(tickArrayOne0).WRITE()
	return inst
}

// GetTickArrayOne0Account gets the "tickArrayOne0" account.
func (inst *TwoHopSwapV2) GetTickArrayOne0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetTickArrayOne1Account sets the "tickArrayOne1" account.
func (inst *TwoHopSwapV2) SetTickArrayOne1Account(tickArrayOne1 ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(tickArrayOne1).WRITE()
	return inst
}

// GetTickArrayOne1Account gets the "tickArrayOne1" account.
func (inst *TwoHopSwapV2) GetTickArrayOne1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetTickArrayOne2Account sets the "tickArrayOne2" account.
func (inst *TwoHopSwapV2) SetTickArrayOne2Account(tickArrayOne2 ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(tickArrayOne2).WRITE()
	return inst
}

// GetTickArrayOne2Account gets the "tickArrayOne2" account.
func (inst *TwoHopSwapV2) GetTickArrayOne2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetTickArrayTwo0Account sets the "tickArrayTwo0" account.
func (inst *TwoHopSwapV2) SetTickArrayTwo0Account(tickArrayTwo0 ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(tickArrayTwo0).WRITE()
	return inst
}

// GetTickArrayTwo0Account gets the "tickArrayTwo0" account.
func (inst *TwoHopSwapV2) GetTickArrayTwo0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetTickArrayTwo1Account sets the "tickArrayTwo1" account.
func (inst *TwoHopSwapV2) SetTickArrayTwo1Account(tickArrayTwo1 ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(tickArrayTwo1).WRITE()
	return inst
}

// GetTickArrayTwo1Account gets the "tickArrayTwo1" account.
func (inst *TwoHopSwapV2) GetTickArrayTwo1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetTickArrayTwo2Account sets the "tickArrayTwo2" account.
func (inst *TwoHopSwapV2) SetTickArrayTwo2Account(tickArrayTwo2 ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(tickArrayTwo2).WRITE()
	return inst
}

// GetTickArrayTwo2Account gets the "tickArrayTwo2" account.
func (inst *TwoHopSwapV2) GetTickArrayTwo2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetOracleOneAccount sets the "oracleOne" account.
func (inst *TwoHopSwapV2) SetOracleOneAccount(oracleOne ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(oracleOne).WRITE()
	return inst
}

// GetOracleOneAccount gets the "oracleOne" account.
func (inst *TwoHopSwapV2) GetOracleOneAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetOracleTwoAccount sets the "oracleTwo" account.
func (inst *TwoHopSwapV2) SetOracleTwoAccount(oracleTwo ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(oracleTwo).WRITE()
	return inst
}

// GetOracleTwoAccount gets the "oracleTwo" account.
func (inst *TwoHopSwapV2) GetOracleTwoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetMemoProgramAccount sets the "memoProgram" account.
func (inst *TwoHopSwapV2) SetMemoProgramAccount(memoProgram ag_solanago.PublicKey) *TwoHopSwapV2 {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(memoProgram)
	return inst
}

// GetMemoProgramAccount gets the "memoProgram" account.
func (inst *TwoHopSwapV2) GetMemoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

func (inst TwoHopSwapV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TwoHopSwapV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TwoHopSwapV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TwoHopSwapV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.OtherAmountThreshold == nil {
			return errors.New("OtherAmountThreshold parameter is not set")
		}
		if inst.AmountSpecifiedIsInput == nil {
			return errors.New("AmountSpecifiedIsInput parameter is not set")
		}
		if inst.AToBOne == nil {
			return errors.New("AToBOne parameter is not set")
		}
		if inst.AToBTwo == nil {
			return errors.New("AToBTwo parameter is not set")
		}
		if inst.SqrtPriceLimitOne == nil {
			return errors.New("SqrtPriceLimitOne parameter is not set")
		}
		if inst.SqrtPriceLimitTwo == nil {
			return errors.New("SqrtPriceLimitTwo parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolOne is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.WhirlpoolTwo is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMintInput is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenMintIntermediate is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenMintOutput is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgramInput is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgramIntermediate is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgramOutput is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenOwnerAccountInput is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenVaultOneInput is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenVaultOneIntermediate is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenVaultTwoIntermediate is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenVaultTwoOutput is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenOwnerAccountOutput is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TokenAuthority is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.TickArrayOne0 is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.TickArrayOne1 is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.TickArrayOne2 is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.TickArrayTwo0 is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.TickArrayTwo1 is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.TickArrayTwo2 is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.OracleOne is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.OracleTwo is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.MemoProgram is not set")
		}
	}
	return nil
}

func (inst *TwoHopSwapV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TwoHopSwapV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=8]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("  OtherAmountThreshold", *inst.OtherAmountThreshold))
						paramsBranch.Child(ag_format.Param("AmountSpecifiedIsInput", *inst.AmountSpecifiedIsInput))
						paramsBranch.Child(ag_format.Param("               AToBOne", *inst.AToBOne))
						paramsBranch.Child(ag_format.Param("               AToBTwo", *inst.AToBTwo))
						paramsBranch.Child(ag_format.Param("     SqrtPriceLimitOne", *inst.SqrtPriceLimitOne))
						paramsBranch.Child(ag_format.Param("     SqrtPriceLimitTwo", *inst.SqrtPriceLimitTwo))
						paramsBranch.Child(ag_format.Param(" RemainingAccountsInfo (OPT)", inst.RemainingAccountsInfo))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=24]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             whirlpoolOne", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             whirlpoolTwo", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           tokenMintInput", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    tokenMintIntermediate", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          tokenMintOutput", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        tokenProgramInput", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" tokenProgramIntermediate", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       tokenProgramOutput", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("   tokenOwnerAccountInput", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       tokenVaultOneInput", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("tokenVaultOneIntermediate", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("tokenVaultTwoIntermediate", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("      tokenVaultTwoOutput", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("  tokenOwnerAccountOutput", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("           tokenAuthority", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("            tickArrayOne0", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("            tickArrayOne1", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("            tickArrayOne2", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("            tickArrayTwo0", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("            tickArrayTwo1", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("            tickArrayTwo2", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("                oracleOne", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("                oracleTwo", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("              memoProgram", inst.AccountMetaSlice.Get(23)))
					})
				})
		})
}

func (obj TwoHopSwapV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `OtherAmountThreshold` param:
	err = encoder.Encode(obj.OtherAmountThreshold)
	if err != nil {
		return err
	}
	// Serialize `AmountSpecifiedIsInput` param:
	err = encoder.Encode(obj.AmountSpecifiedIsInput)
	if err != nil {
		return err
	}
	// Serialize `AToBOne` param:
	err = encoder.Encode(obj.AToBOne)
	if err != nil {
		return err
	}
	// Serialize `AToBTwo` param:
	err = encoder.Encode(obj.AToBTwo)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceLimitOne` param:
	err = encoder.Encode(obj.SqrtPriceLimitOne)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceLimitTwo` param:
	err = encoder.Encode(obj.SqrtPriceLimitTwo)
	if err != nil {
		return err
	}
	// Serialize `RemainingAccountsInfo` param (optional):
	{
		if obj.RemainingAccountsInfo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RemainingAccountsInfo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *TwoHopSwapV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `OtherAmountThreshold`:
	err = decoder.Decode(&obj.OtherAmountThreshold)
	if err != nil {
		return err
	}
	// Deserialize `AmountSpecifiedIsInput`:
	err = decoder.Decode(&obj.AmountSpecifiedIsInput)
	if err != nil {
		return err
	}
	// Deserialize `AToBOne`:
	err = decoder.Decode(&obj.AToBOne)
	if err != nil {
		return err
	}
	// Deserialize `AToBTwo`:
	err = decoder.Decode(&obj.AToBTwo)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceLimitOne`:
	err = decoder.Decode(&obj.SqrtPriceLimitOne)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceLimitTwo`:
	err = decoder.Decode(&obj.SqrtPriceLimitTwo)
	if err != nil {
		return err
	}
	// Deserialize `RemainingAccountsInfo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RemainingAccountsInfo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewTwoHopSwapV2Instruction declares a new TwoHopSwapV2 instruction with the provided parameters and accounts.
func NewTwoHopSwapV2Instruction(
	// Parameters:
	amount uint64,
	otherAmountThreshold uint64,
	amountSpecifiedIsInput bool,
	aToBOne bool,
	aToBTwo bool,
	sqrtPriceLimitOne ag_binary.Uint128,
	sqrtPriceLimitTwo ag_binary.Uint128,
	remainingAccountsInfo RemainingAccountsInfo,
	// Accounts:
	whirlpoolOne ag_solanago.PublicKey,
	whirlpoolTwo ag_solanago.PublicKey,
	tokenMintInput ag_solanago.PublicKey,
	tokenMintIntermediate ag_solanago.PublicKey,
	tokenMintOutput ag_solanago.PublicKey,
	tokenProgramInput ag_solanago.PublicKey,
	tokenProgramIntermediate ag_solanago.PublicKey,
	tokenProgramOutput ag_solanago.PublicKey,
	tokenOwnerAccountInput ag_solanago.PublicKey,
	tokenVaultOneInput ag_solanago.PublicKey,
	tokenVaultOneIntermediate ag_solanago.PublicKey,
	tokenVaultTwoIntermediate ag_solanago.PublicKey,
	tokenVaultTwoOutput ag_solanago.PublicKey,
	tokenOwnerAccountOutput ag_solanago.PublicKey,
	tokenAuthority ag_solanago.PublicKey,
	tickArrayOne0 ag_solanago.PublicKey,
	tickArrayOne1 ag_solanago.PublicKey,
	tickArrayOne2 ag_solanago.PublicKey,
	tickArrayTwo0 ag_solanago.PublicKey,
	tickArrayTwo1 ag_solanago.PublicKey,
	tickArrayTwo2 ag_solanago.PublicKey,
	oracleOne ag_solanago.PublicKey,
	oracleTwo ag_solanago.PublicKey,
	memoProgram ag_solanago.PublicKey) *TwoHopSwapV2 {
	return NewTwoHopSwapV2InstructionBuilder().
		SetAmount(amount).
		SetOtherAmountThreshold(otherAmountThreshold).
		SetAmountSpecifiedIsInput(amountSpecifiedIsInput).
		SetAToBOne(aToBOne).
		SetAToBTwo(aToBTwo).
		SetSqrtPriceLimitOne(sqrtPriceLimitOne).
		SetSqrtPriceLimitTwo(sqrtPriceLimitTwo).
		SetRemainingAccountsInfo(remainingAccountsInfo).
		SetWhirlpoolOneAccount(whirlpoolOne).
		SetWhirlpoolTwoAccount(whirlpoolTwo).
		SetTokenMintInputAccount(tokenMintInput).
		SetTokenMintIntermediateAccount(tokenMintIntermediate).
		SetTokenMintOutputAccount(tokenMintOutput).
		SetTokenProgramInputAccount(tokenProgramInput).
		SetTokenProgramIntermediateAccount(tokenProgramIntermediate).
		SetTokenProgramOutputAccount(tokenProgramOutput).
		SetTokenOwnerAccountInputAccount(tokenOwnerAccountInput).
		SetTokenVaultOneInputAccount(tokenVaultOneInput).
		SetTokenVaultOneIntermediateAccount(tokenVaultOneIntermediate).
		SetTokenVaultTwoIntermediateAccount(tokenVaultTwoIntermediate).
		SetTokenVaultTwoOutputAccount(tokenVaultTwoOutput).
		SetTokenOwnerAccountOutputAccount(tokenOwnerAccountOutput).
		SetTokenAuthorityAccount(tokenAuthority).
		SetTickArrayOne0Account(tickArrayOne0).
		SetTickArrayOne1Account(tickArrayOne1).
		SetTickArrayOne2Account(tickArrayOne2).
		SetTickArrayTwo0Account(tickArrayTwo0).
		SetTickArrayTwo1Account(tickArrayTwo1).
		SetTickArrayTwo2Account(tickArrayTwo2).
		SetOracleOneAccount(oracleOne).
		SetOracleTwoAccount(oracleTwo).
		SetMemoProgramAccount(memoProgram)
}
