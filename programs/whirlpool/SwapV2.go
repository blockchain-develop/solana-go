// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SwapV2 is the `swapV2` instruction.
type SwapV2 struct {
	Amount                 *uint64
	OtherAmountThreshold   *uint64
	SqrtPriceLimit         *ag_binary.Uint128
	AmountSpecifiedIsInput *bool
	AToB                   *bool
	RemainingAccountsInfo  *RemainingAccountsInfo `bin:"optional"`

	// [0] = [] tokenProgramA
	//
	// [1] = [] tokenProgramB
	//
	// [2] = [] memoProgram
	//
	// [3] = [SIGNER] tokenAuthority
	//
	// [4] = [WRITE] whirlpool
	//
	// [5] = [] tokenMintA
	//
	// [6] = [] tokenMintB
	//
	// [7] = [WRITE] tokenOwnerAccountA
	//
	// [8] = [WRITE] tokenVaultA
	//
	// [9] = [WRITE] tokenOwnerAccountB
	//
	// [10] = [WRITE] tokenVaultB
	//
	// [11] = [WRITE] tickArray0
	//
	// [12] = [WRITE] tickArray1
	//
	// [13] = [WRITE] tickArray2
	//
	// [14] = [WRITE] oracle
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapV2InstructionBuilder creates a new `SwapV2` instruction builder.
func NewSwapV2InstructionBuilder() *SwapV2 {
	nd := &SwapV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *SwapV2) SetAmount(amount uint64) *SwapV2 {
	inst.Amount = &amount
	return inst
}

// SetOtherAmountThreshold sets the "otherAmountThreshold" parameter.
func (inst *SwapV2) SetOtherAmountThreshold(otherAmountThreshold uint64) *SwapV2 {
	inst.OtherAmountThreshold = &otherAmountThreshold
	return inst
}

// SetSqrtPriceLimit sets the "sqrtPriceLimit" parameter.
func (inst *SwapV2) SetSqrtPriceLimit(sqrtPriceLimit ag_binary.Uint128) *SwapV2 {
	inst.SqrtPriceLimit = &sqrtPriceLimit
	return inst
}

// SetAmountSpecifiedIsInput sets the "amountSpecifiedIsInput" parameter.
func (inst *SwapV2) SetAmountSpecifiedIsInput(amountSpecifiedIsInput bool) *SwapV2 {
	inst.AmountSpecifiedIsInput = &amountSpecifiedIsInput
	return inst
}

// SetAToB sets the "aToB" parameter.
func (inst *SwapV2) SetAToB(aToB bool) *SwapV2 {
	inst.AToB = &aToB
	return inst
}

// SetRemainingAccountsInfo sets the "remainingAccountsInfo" parameter.
func (inst *SwapV2) SetRemainingAccountsInfo(remainingAccountsInfo RemainingAccountsInfo) *SwapV2 {
	inst.RemainingAccountsInfo = &remainingAccountsInfo
	return inst
}

// SetTokenProgramAAccount sets the "tokenProgramA" account.
func (inst *SwapV2) SetTokenProgramAAccount(tokenProgramA ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgramA)
	return inst
}

// GetTokenProgramAAccount gets the "tokenProgramA" account.
func (inst *SwapV2) GetTokenProgramAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenProgramBAccount sets the "tokenProgramB" account.
func (inst *SwapV2) SetTokenProgramBAccount(tokenProgramB ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenProgramB)
	return inst
}

// GetTokenProgramBAccount gets the "tokenProgramB" account.
func (inst *SwapV2) GetTokenProgramBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMemoProgramAccount sets the "memoProgram" account.
func (inst *SwapV2) SetMemoProgramAccount(memoProgram ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(memoProgram)
	return inst
}

// GetMemoProgramAccount gets the "memoProgram" account.
func (inst *SwapV2) GetMemoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenAuthorityAccount sets the "tokenAuthority" account.
func (inst *SwapV2) SetTokenAuthorityAccount(tokenAuthority ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenAuthority).SIGNER()
	return inst
}

// GetTokenAuthorityAccount gets the "tokenAuthority" account.
func (inst *SwapV2) GetTokenAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *SwapV2) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *SwapV2) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenMintAAccount sets the "tokenMintA" account.
func (inst *SwapV2) SetTokenMintAAccount(tokenMintA ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenMintA)
	return inst
}

// GetTokenMintAAccount gets the "tokenMintA" account.
func (inst *SwapV2) GetTokenMintAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenMintBAccount sets the "tokenMintB" account.
func (inst *SwapV2) SetTokenMintBAccount(tokenMintB ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenMintB)
	return inst
}

// GetTokenMintBAccount gets the "tokenMintB" account.
func (inst *SwapV2) GetTokenMintBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenOwnerAccountAAccount sets the "tokenOwnerAccountA" account.
func (inst *SwapV2) SetTokenOwnerAccountAAccount(tokenOwnerAccountA ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenOwnerAccountA).WRITE()
	return inst
}

// GetTokenOwnerAccountAAccount gets the "tokenOwnerAccountA" account.
func (inst *SwapV2) GetTokenOwnerAccountAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenVaultAAccount sets the "tokenVaultA" account.
func (inst *SwapV2) SetTokenVaultAAccount(tokenVaultA ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenVaultA).WRITE()
	return inst
}

// GetTokenVaultAAccount gets the "tokenVaultA" account.
func (inst *SwapV2) GetTokenVaultAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenOwnerAccountBAccount sets the "tokenOwnerAccountB" account.
func (inst *SwapV2) SetTokenOwnerAccountBAccount(tokenOwnerAccountB ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenOwnerAccountB).WRITE()
	return inst
}

// GetTokenOwnerAccountBAccount gets the "tokenOwnerAccountB" account.
func (inst *SwapV2) GetTokenOwnerAccountBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenVaultBAccount sets the "tokenVaultB" account.
func (inst *SwapV2) SetTokenVaultBAccount(tokenVaultB ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenVaultB).WRITE()
	return inst
}

// GetTokenVaultBAccount gets the "tokenVaultB" account.
func (inst *SwapV2) GetTokenVaultBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTickArray0Account sets the "tickArray0" account.
func (inst *SwapV2) SetTickArray0Account(tickArray0 ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tickArray0).WRITE()
	return inst
}

// GetTickArray0Account gets the "tickArray0" account.
func (inst *SwapV2) GetTickArray0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTickArray1Account sets the "tickArray1" account.
func (inst *SwapV2) SetTickArray1Account(tickArray1 ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tickArray1).WRITE()
	return inst
}

// GetTickArray1Account gets the "tickArray1" account.
func (inst *SwapV2) GetTickArray1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTickArray2Account sets the "tickArray2" account.
func (inst *SwapV2) SetTickArray2Account(tickArray2 ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tickArray2).WRITE()
	return inst
}

// GetTickArray2Account gets the "tickArray2" account.
func (inst *SwapV2) GetTickArray2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetOracleAccount sets the "oracle" account.
func (inst *SwapV2) SetOracleAccount(oracle ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(oracle).WRITE()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *SwapV2) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst SwapV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SwapV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SwapV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SwapV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.OtherAmountThreshold == nil {
			return errors.New("OtherAmountThreshold parameter is not set")
		}
		if inst.SqrtPriceLimit == nil {
			return errors.New("SqrtPriceLimit parameter is not set")
		}
		if inst.AmountSpecifiedIsInput == nil {
			return errors.New("AmountSpecifiedIsInput parameter is not set")
		}
		if inst.AToB == nil {
			return errors.New("AToB parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgramA is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenProgramB is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MemoProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenMintA is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenMintB is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenOwnerAccountA is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenVaultA is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenOwnerAccountB is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenVaultB is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TickArray0 is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TickArray1 is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TickArray2 is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Oracle is not set")
		}
	}
	return nil
}

func (inst *SwapV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SwapV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=6]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("  OtherAmountThreshold", *inst.OtherAmountThreshold))
						paramsBranch.Child(ag_format.Param("        SqrtPriceLimit", *inst.SqrtPriceLimit))
						paramsBranch.Child(ag_format.Param("AmountSpecifiedIsInput", *inst.AmountSpecifiedIsInput))
						paramsBranch.Child(ag_format.Param("                  AToB", *inst.AToB))
						paramsBranch.Child(ag_format.Param(" RemainingAccountsInfo (OPT)", inst.RemainingAccountsInfo))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     tokenProgramA", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     tokenProgramB", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       memoProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    tokenAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         whirlpool", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        tokenMintA", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        tokenMintB", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("tokenOwnerAccountA", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("       tokenVaultA", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("tokenOwnerAccountB", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       tokenVaultB", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("        tickArray0", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("        tickArray1", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("        tickArray2", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("            oracle", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj SwapV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `OtherAmountThreshold` param:
	err = encoder.Encode(obj.OtherAmountThreshold)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceLimit` param:
	err = encoder.Encode(obj.SqrtPriceLimit)
	if err != nil {
		return err
	}
	// Serialize `AmountSpecifiedIsInput` param:
	err = encoder.Encode(obj.AmountSpecifiedIsInput)
	if err != nil {
		return err
	}
	// Serialize `AToB` param:
	err = encoder.Encode(obj.AToB)
	if err != nil {
		return err
	}
	// Serialize `RemainingAccountsInfo` param (optional):
	{
		if obj.RemainingAccountsInfo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RemainingAccountsInfo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *SwapV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `OtherAmountThreshold`:
	err = decoder.Decode(&obj.OtherAmountThreshold)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceLimit`:
	err = decoder.Decode(&obj.SqrtPriceLimit)
	if err != nil {
		return err
	}
	// Deserialize `AmountSpecifiedIsInput`:
	err = decoder.Decode(&obj.AmountSpecifiedIsInput)
	if err != nil {
		return err
	}
	// Deserialize `AToB`:
	err = decoder.Decode(&obj.AToB)
	if err != nil {
		return err
	}
	// Deserialize `RemainingAccountsInfo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RemainingAccountsInfo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewSwapV2Instruction declares a new SwapV2 instruction with the provided parameters and accounts.
func NewSwapV2Instruction(
	// Parameters:
	amount uint64,
	otherAmountThreshold uint64,
	sqrtPriceLimit ag_binary.Uint128,
	amountSpecifiedIsInput bool,
	aToB bool,
	remainingAccountsInfo RemainingAccountsInfo,
	// Accounts:
	tokenProgramA ag_solanago.PublicKey,
	tokenProgramB ag_solanago.PublicKey,
	memoProgram ag_solanago.PublicKey,
	tokenAuthority ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	tokenMintA ag_solanago.PublicKey,
	tokenMintB ag_solanago.PublicKey,
	tokenOwnerAccountA ag_solanago.PublicKey,
	tokenVaultA ag_solanago.PublicKey,
	tokenOwnerAccountB ag_solanago.PublicKey,
	tokenVaultB ag_solanago.PublicKey,
	tickArray0 ag_solanago.PublicKey,
	tickArray1 ag_solanago.PublicKey,
	tickArray2 ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey) *SwapV2 {
	return NewSwapV2InstructionBuilder().
		SetAmount(amount).
		SetOtherAmountThreshold(otherAmountThreshold).
		SetSqrtPriceLimit(sqrtPriceLimit).
		SetAmountSpecifiedIsInput(amountSpecifiedIsInput).
		SetAToB(aToB).
		SetRemainingAccountsInfo(remainingAccountsInfo).
		SetTokenProgramAAccount(tokenProgramA).
		SetTokenProgramBAccount(tokenProgramB).
		SetMemoProgramAccount(memoProgram).
		SetTokenAuthorityAccount(tokenAuthority).
		SetWhirlpoolAccount(whirlpool).
		SetTokenMintAAccount(tokenMintA).
		SetTokenMintBAccount(tokenMintB).
		SetTokenOwnerAccountAAccount(tokenOwnerAccountA).
		SetTokenVaultAAccount(tokenVaultA).
		SetTokenOwnerAccountBAccount(tokenOwnerAccountB).
		SetTokenVaultBAccount(tokenVaultB).
		SetTickArray0Account(tickArray0).
		SetTickArray1Account(tickArray1).
		SetTickArray2Account(tickArray2).
		SetOracleAccount(oracle)
}
