// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DeleteTokenBadge is the `deleteTokenBadge` instruction.
type DeleteTokenBadge struct {

	// [0] = [] whirlpoolsConfig
	//
	// [1] = [] whirlpoolsConfigExtension
	//
	// [2] = [SIGNER] tokenBadgeAuthority
	//
	// [3] = [] tokenMint
	//
	// [4] = [WRITE] tokenBadge
	//
	// [5] = [WRITE] receiver
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDeleteTokenBadgeInstructionBuilder creates a new `DeleteTokenBadge` instruction builder.
func NewDeleteTokenBadgeInstructionBuilder() *DeleteTokenBadge {
	nd := &DeleteTokenBadge{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetWhirlpoolsConfigAccount sets the "whirlpoolsConfig" account.
func (inst *DeleteTokenBadge) SetWhirlpoolsConfigAccount(whirlpoolsConfig ag_solanago.PublicKey) *DeleteTokenBadge {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolsConfig)
	return inst
}

// GetWhirlpoolsConfigAccount gets the "whirlpoolsConfig" account.
func (inst *DeleteTokenBadge) GetWhirlpoolsConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWhirlpoolsConfigExtensionAccount sets the "whirlpoolsConfigExtension" account.
func (inst *DeleteTokenBadge) SetWhirlpoolsConfigExtensionAccount(whirlpoolsConfigExtension ag_solanago.PublicKey) *DeleteTokenBadge {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(whirlpoolsConfigExtension)
	return inst
}

// GetWhirlpoolsConfigExtensionAccount gets the "whirlpoolsConfigExtension" account.
func (inst *DeleteTokenBadge) GetWhirlpoolsConfigExtensionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenBadgeAuthorityAccount sets the "tokenBadgeAuthority" account.
func (inst *DeleteTokenBadge) SetTokenBadgeAuthorityAccount(tokenBadgeAuthority ag_solanago.PublicKey) *DeleteTokenBadge {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenBadgeAuthority).SIGNER()
	return inst
}

// GetTokenBadgeAuthorityAccount gets the "tokenBadgeAuthority" account.
func (inst *DeleteTokenBadge) GetTokenBadgeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenMintAccount sets the "tokenMint" account.
func (inst *DeleteTokenBadge) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *DeleteTokenBadge {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenMint)
	return inst
}

// GetTokenMintAccount gets the "tokenMint" account.
func (inst *DeleteTokenBadge) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenBadgeAccount sets the "tokenBadge" account.
func (inst *DeleteTokenBadge) SetTokenBadgeAccount(tokenBadge ag_solanago.PublicKey) *DeleteTokenBadge {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenBadge).WRITE()
	return inst
}

// GetTokenBadgeAccount gets the "tokenBadge" account.
func (inst *DeleteTokenBadge) GetTokenBadgeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReceiverAccount sets the "receiver" account.
func (inst *DeleteTokenBadge) SetReceiverAccount(receiver ag_solanago.PublicKey) *DeleteTokenBadge {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(receiver).WRITE()
	return inst
}

// GetReceiverAccount gets the "receiver" account.
func (inst *DeleteTokenBadge) GetReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst DeleteTokenBadge) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DeleteTokenBadge,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeleteTokenBadge) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeleteTokenBadge) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolsConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.WhirlpoolsConfigExtension is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenBadgeAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenBadge is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Receiver is not set")
		}
	}
	return nil
}

func (inst *DeleteTokenBadge) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeleteTokenBadge")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         whirlpoolsConfig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("whirlpoolsConfigExtension", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      tokenBadgeAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                tokenMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("               tokenBadge", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                 receiver", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj DeleteTokenBadge) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *DeleteTokenBadge) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewDeleteTokenBadgeInstruction declares a new DeleteTokenBadge instruction with the provided parameters and accounts.
func NewDeleteTokenBadgeInstruction(
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	whirlpoolsConfigExtension ag_solanago.PublicKey,
	tokenBadgeAuthority ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	tokenBadge ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey) *DeleteTokenBadge {
	return NewDeleteTokenBadgeInstructionBuilder().
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetWhirlpoolsConfigExtensionAccount(whirlpoolsConfigExtension).
		SetTokenBadgeAuthorityAccount(tokenBadgeAuthority).
		SetTokenMintAccount(tokenMint).
		SetTokenBadgeAccount(tokenBadge).
		SetReceiverAccount(receiver)
}
