// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CollectRewardV2 is the `collectRewardV2` instruction.
type CollectRewardV2 struct {
	RewardIndex           *uint8
	RemainingAccountsInfo *RemainingAccountsInfo `bin:"optional"`

	// [0] = [] whirlpool
	//
	// [1] = [SIGNER] positionAuthority
	//
	// [2] = [WRITE] position
	//
	// [3] = [] positionTokenAccount
	//
	// [4] = [WRITE] rewardOwnerAccount
	//
	// [5] = [] rewardMint
	//
	// [6] = [WRITE] rewardVault
	//
	// [7] = [] rewardTokenProgram
	//
	// [8] = [] memoProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectRewardV2InstructionBuilder creates a new `CollectRewardV2` instruction builder.
func NewCollectRewardV2InstructionBuilder() *CollectRewardV2 {
	nd := &CollectRewardV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetRewardIndex sets the "rewardIndex" parameter.
func (inst *CollectRewardV2) SetRewardIndex(rewardIndex uint8) *CollectRewardV2 {
	inst.RewardIndex = &rewardIndex
	return inst
}

// SetRemainingAccountsInfo sets the "remainingAccountsInfo" parameter.
func (inst *CollectRewardV2) SetRemainingAccountsInfo(remainingAccountsInfo RemainingAccountsInfo) *CollectRewardV2 {
	inst.RemainingAccountsInfo = &remainingAccountsInfo
	return inst
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *CollectRewardV2) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *CollectRewardV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpool)
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *CollectRewardV2) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAuthorityAccount sets the "positionAuthority" account.
func (inst *CollectRewardV2) SetPositionAuthorityAccount(positionAuthority ag_solanago.PublicKey) *CollectRewardV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(positionAuthority).SIGNER()
	return inst
}

// GetPositionAuthorityAccount gets the "positionAuthority" account.
func (inst *CollectRewardV2) GetPositionAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionAccount sets the "position" account.
func (inst *CollectRewardV2) SetPositionAccount(position ag_solanago.PublicKey) *CollectRewardV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *CollectRewardV2) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPositionTokenAccountAccount sets the "positionTokenAccount" account.
func (inst *CollectRewardV2) SetPositionTokenAccountAccount(positionTokenAccount ag_solanago.PublicKey) *CollectRewardV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(positionTokenAccount)
	return inst
}

// GetPositionTokenAccountAccount gets the "positionTokenAccount" account.
func (inst *CollectRewardV2) GetPositionTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetRewardOwnerAccountAccount sets the "rewardOwnerAccount" account.
func (inst *CollectRewardV2) SetRewardOwnerAccountAccount(rewardOwnerAccount ag_solanago.PublicKey) *CollectRewardV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(rewardOwnerAccount).WRITE()
	return inst
}

// GetRewardOwnerAccountAccount gets the "rewardOwnerAccount" account.
func (inst *CollectRewardV2) GetRewardOwnerAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRewardMintAccount sets the "rewardMint" account.
func (inst *CollectRewardV2) SetRewardMintAccount(rewardMint ag_solanago.PublicKey) *CollectRewardV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rewardMint)
	return inst
}

// GetRewardMintAccount gets the "rewardMint" account.
func (inst *CollectRewardV2) GetRewardMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRewardVaultAccount sets the "rewardVault" account.
func (inst *CollectRewardV2) SetRewardVaultAccount(rewardVault ag_solanago.PublicKey) *CollectRewardV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(rewardVault).WRITE()
	return inst
}

// GetRewardVaultAccount gets the "rewardVault" account.
func (inst *CollectRewardV2) GetRewardVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRewardTokenProgramAccount sets the "rewardTokenProgram" account.
func (inst *CollectRewardV2) SetRewardTokenProgramAccount(rewardTokenProgram ag_solanago.PublicKey) *CollectRewardV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rewardTokenProgram)
	return inst
}

// GetRewardTokenProgramAccount gets the "rewardTokenProgram" account.
func (inst *CollectRewardV2) GetRewardTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetMemoProgramAccount sets the "memoProgram" account.
func (inst *CollectRewardV2) SetMemoProgramAccount(memoProgram ag_solanago.PublicKey) *CollectRewardV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(memoProgram)
	return inst
}

// GetMemoProgramAccount gets the "memoProgram" account.
func (inst *CollectRewardV2) GetMemoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst CollectRewardV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectRewardV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectRewardV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectRewardV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardIndex == nil {
			return errors.New("RewardIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PositionAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PositionTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.RewardOwnerAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.RewardMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.RewardVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.RewardTokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.MemoProgram is not set")
		}
	}
	return nil
}

func (inst *CollectRewardV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectRewardV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          RewardIndex", *inst.RewardIndex))
						paramsBranch.Child(ag_format.Param("RemainingAccountsInfo (OPT)", inst.RemainingAccountsInfo))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         whirlpool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" positionAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          position", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     positionToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       rewardOwner", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        rewardMint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       rewardVault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("rewardTokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("       memoProgram", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj CollectRewardV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `RemainingAccountsInfo` param (optional):
	{
		if obj.RemainingAccountsInfo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RemainingAccountsInfo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *CollectRewardV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `RemainingAccountsInfo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RemainingAccountsInfo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewCollectRewardV2Instruction declares a new CollectRewardV2 instruction with the provided parameters and accounts.
func NewCollectRewardV2Instruction(
	// Parameters:
	rewardIndex uint8,
	remainingAccountsInfo RemainingAccountsInfo,
	// Accounts:
	whirlpool ag_solanago.PublicKey,
	positionAuthority ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionTokenAccount ag_solanago.PublicKey,
	rewardOwnerAccount ag_solanago.PublicKey,
	rewardMint ag_solanago.PublicKey,
	rewardVault ag_solanago.PublicKey,
	rewardTokenProgram ag_solanago.PublicKey,
	memoProgram ag_solanago.PublicKey) *CollectRewardV2 {
	return NewCollectRewardV2InstructionBuilder().
		SetRewardIndex(rewardIndex).
		SetRemainingAccountsInfo(remainingAccountsInfo).
		SetWhirlpoolAccount(whirlpool).
		SetPositionAuthorityAccount(positionAuthority).
		SetPositionAccount(position).
		SetPositionTokenAccountAccount(positionTokenAccount).
		SetRewardOwnerAccountAccount(rewardOwnerAccount).
		SetRewardMintAccount(rewardMint).
		SetRewardVaultAccount(rewardVault).
		SetRewardTokenProgramAccount(rewardTokenProgram).
		SetMemoProgramAccount(memoProgram)
}
