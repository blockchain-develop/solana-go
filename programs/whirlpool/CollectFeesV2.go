// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CollectFeesV2 is the `collectFeesV2` instruction.
type CollectFeesV2 struct {
	RemainingAccountsInfo *RemainingAccountsInfo `bin:"optional"`

	// [0] = [] whirlpool
	//
	// [1] = [SIGNER] positionAuthority
	//
	// [2] = [WRITE] position
	//
	// [3] = [] positionTokenAccount
	//
	// [4] = [] tokenMintA
	//
	// [5] = [] tokenMintB
	//
	// [6] = [WRITE] tokenOwnerAccountA
	//
	// [7] = [WRITE] tokenVaultA
	//
	// [8] = [WRITE] tokenOwnerAccountB
	//
	// [9] = [WRITE] tokenVaultB
	//
	// [10] = [] tokenProgramA
	//
	// [11] = [] tokenProgramB
	//
	// [12] = [] memoProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectFeesV2InstructionBuilder creates a new `CollectFeesV2` instruction builder.
func NewCollectFeesV2InstructionBuilder() *CollectFeesV2 {
	nd := &CollectFeesV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetRemainingAccountsInfo sets the "remainingAccountsInfo" parameter.
func (inst *CollectFeesV2) SetRemainingAccountsInfo(remainingAccountsInfo RemainingAccountsInfo) *CollectFeesV2 {
	inst.RemainingAccountsInfo = &remainingAccountsInfo
	return inst
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *CollectFeesV2) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpool)
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *CollectFeesV2) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAuthorityAccount sets the "positionAuthority" account.
func (inst *CollectFeesV2) SetPositionAuthorityAccount(positionAuthority ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(positionAuthority).SIGNER()
	return inst
}

// GetPositionAuthorityAccount gets the "positionAuthority" account.
func (inst *CollectFeesV2) GetPositionAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionAccount sets the "position" account.
func (inst *CollectFeesV2) SetPositionAccount(position ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *CollectFeesV2) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPositionTokenAccountAccount sets the "positionTokenAccount" account.
func (inst *CollectFeesV2) SetPositionTokenAccountAccount(positionTokenAccount ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(positionTokenAccount)
	return inst
}

// GetPositionTokenAccountAccount gets the "positionTokenAccount" account.
func (inst *CollectFeesV2) GetPositionTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenMintAAccount sets the "tokenMintA" account.
func (inst *CollectFeesV2) SetTokenMintAAccount(tokenMintA ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenMintA)
	return inst
}

// GetTokenMintAAccount gets the "tokenMintA" account.
func (inst *CollectFeesV2) GetTokenMintAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenMintBAccount sets the "tokenMintB" account.
func (inst *CollectFeesV2) SetTokenMintBAccount(tokenMintB ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenMintB)
	return inst
}

// GetTokenMintBAccount gets the "tokenMintB" account.
func (inst *CollectFeesV2) GetTokenMintBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenOwnerAccountAAccount sets the "tokenOwnerAccountA" account.
func (inst *CollectFeesV2) SetTokenOwnerAccountAAccount(tokenOwnerAccountA ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenOwnerAccountA).WRITE()
	return inst
}

// GetTokenOwnerAccountAAccount gets the "tokenOwnerAccountA" account.
func (inst *CollectFeesV2) GetTokenOwnerAccountAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenVaultAAccount sets the "tokenVaultA" account.
func (inst *CollectFeesV2) SetTokenVaultAAccount(tokenVaultA ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenVaultA).WRITE()
	return inst
}

// GetTokenVaultAAccount gets the "tokenVaultA" account.
func (inst *CollectFeesV2) GetTokenVaultAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenOwnerAccountBAccount sets the "tokenOwnerAccountB" account.
func (inst *CollectFeesV2) SetTokenOwnerAccountBAccount(tokenOwnerAccountB ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenOwnerAccountB).WRITE()
	return inst
}

// GetTokenOwnerAccountBAccount gets the "tokenOwnerAccountB" account.
func (inst *CollectFeesV2) GetTokenOwnerAccountBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenVaultBAccount sets the "tokenVaultB" account.
func (inst *CollectFeesV2) SetTokenVaultBAccount(tokenVaultB ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenVaultB).WRITE()
	return inst
}

// GetTokenVaultBAccount gets the "tokenVaultB" account.
func (inst *CollectFeesV2) GetTokenVaultBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAAccount sets the "tokenProgramA" account.
func (inst *CollectFeesV2) SetTokenProgramAAccount(tokenProgramA ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgramA)
	return inst
}

// GetTokenProgramAAccount gets the "tokenProgramA" account.
func (inst *CollectFeesV2) GetTokenProgramAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramBAccount sets the "tokenProgramB" account.
func (inst *CollectFeesV2) SetTokenProgramBAccount(tokenProgramB ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgramB)
	return inst
}

// GetTokenProgramBAccount gets the "tokenProgramB" account.
func (inst *CollectFeesV2) GetTokenProgramBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetMemoProgramAccount sets the "memoProgram" account.
func (inst *CollectFeesV2) SetMemoProgramAccount(memoProgram ag_solanago.PublicKey) *CollectFeesV2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(memoProgram)
	return inst
}

// GetMemoProgramAccount gets the "memoProgram" account.
func (inst *CollectFeesV2) GetMemoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst CollectFeesV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectFeesV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectFeesV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectFeesV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PositionAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PositionTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenMintA is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenMintB is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenOwnerAccountA is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenVaultA is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenOwnerAccountB is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenVaultB is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgramA is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgramB is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.MemoProgram is not set")
		}
	}
	return nil
}

func (inst *CollectFeesV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectFeesV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("RemainingAccountsInfo (OPT)", inst.RemainingAccountsInfo))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         whirlpool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" positionAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          position", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     positionToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        tokenMintA", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        tokenMintB", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("tokenOwnerAccountA", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       tokenVaultA", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("tokenOwnerAccountB", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       tokenVaultB", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("     tokenProgramA", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("     tokenProgramB", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("       memoProgram", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj CollectFeesV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RemainingAccountsInfo` param (optional):
	{
		if obj.RemainingAccountsInfo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RemainingAccountsInfo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *CollectFeesV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RemainingAccountsInfo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RemainingAccountsInfo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewCollectFeesV2Instruction declares a new CollectFeesV2 instruction with the provided parameters and accounts.
func NewCollectFeesV2Instruction(
	// Parameters:
	remainingAccountsInfo RemainingAccountsInfo,
	// Accounts:
	whirlpool ag_solanago.PublicKey,
	positionAuthority ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionTokenAccount ag_solanago.PublicKey,
	tokenMintA ag_solanago.PublicKey,
	tokenMintB ag_solanago.PublicKey,
	tokenOwnerAccountA ag_solanago.PublicKey,
	tokenVaultA ag_solanago.PublicKey,
	tokenOwnerAccountB ag_solanago.PublicKey,
	tokenVaultB ag_solanago.PublicKey,
	tokenProgramA ag_solanago.PublicKey,
	tokenProgramB ag_solanago.PublicKey,
	memoProgram ag_solanago.PublicKey) *CollectFeesV2 {
	return NewCollectFeesV2InstructionBuilder().
		SetRemainingAccountsInfo(remainingAccountsInfo).
		SetWhirlpoolAccount(whirlpool).
		SetPositionAuthorityAccount(positionAuthority).
		SetPositionAccount(position).
		SetPositionTokenAccountAccount(positionTokenAccount).
		SetTokenMintAAccount(tokenMintA).
		SetTokenMintBAccount(tokenMintB).
		SetTokenOwnerAccountAAccount(tokenOwnerAccountA).
		SetTokenVaultAAccount(tokenVaultA).
		SetTokenOwnerAccountBAccount(tokenOwnerAccountB).
		SetTokenVaultBAccount(tokenVaultB).
		SetTokenProgramAAccount(tokenProgramA).
		SetTokenProgramBAccount(tokenProgramB).
		SetMemoProgramAccount(memoProgram)
}
