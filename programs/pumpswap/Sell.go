// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pumpswap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Sell is the `sell` instruction.
type Sell struct {
	BaseAmountIn      *uint64
	MinQuoteAmountOut *uint64

	// [0] = [WRITE, SIGNER] user
	//
	// [1] = [WRITE] user_base_token_account
	//
	// [2] = [WRITE] user_quote_token_account
	//
	// [3] = [WRITE] pool_base_token_account
	//
	// [4] = [WRITE] pool_quote_token_account
	//
	// [5] = [WRITE] protocol_fee_recipient_token_account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSellInstructionBuilder creates a new `Sell` instruction builder.
func NewSellInstructionBuilder() *Sell {
	nd := &Sell{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetBaseAmountIn sets the "base_amount_in" parameter.
func (inst *Sell) SetBaseAmountIn(base_amount_in uint64) *Sell {
	inst.BaseAmountIn = &base_amount_in
	return inst
}

// SetMinQuoteAmountOut sets the "min_quote_amount_out" parameter.
func (inst *Sell) SetMinQuoteAmountOut(min_quote_amount_out uint64) *Sell {
	inst.MinQuoteAmountOut = &min_quote_amount_out
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *Sell) SetUserAccount(user ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *Sell) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserBaseTokenAccountAccount sets the "user_base_token_account" account.
func (inst *Sell) SetUserBaseTokenAccountAccount(userBaseTokenAccount ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(userBaseTokenAccount).WRITE()
	return inst
}

// GetUserBaseTokenAccountAccount gets the "user_base_token_account" account.
func (inst *Sell) GetUserBaseTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserQuoteTokenAccountAccount sets the "user_quote_token_account" account.
func (inst *Sell) SetUserQuoteTokenAccountAccount(userQuoteTokenAccount ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userQuoteTokenAccount).WRITE()
	return inst
}

// GetUserQuoteTokenAccountAccount gets the "user_quote_token_account" account.
func (inst *Sell) GetUserQuoteTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolBaseTokenAccountAccount sets the "pool_base_token_account" account.
func (inst *Sell) SetPoolBaseTokenAccountAccount(poolBaseTokenAccount ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolBaseTokenAccount).WRITE()
	return inst
}

// GetPoolBaseTokenAccountAccount gets the "pool_base_token_account" account.
func (inst *Sell) GetPoolBaseTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPoolQuoteTokenAccountAccount sets the "pool_quote_token_account" account.
func (inst *Sell) SetPoolQuoteTokenAccountAccount(poolQuoteTokenAccount ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(poolQuoteTokenAccount).WRITE()
	return inst
}

// GetPoolQuoteTokenAccountAccount gets the "pool_quote_token_account" account.
func (inst *Sell) GetPoolQuoteTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProtocolFeeRecipientTokenAccountAccount sets the "protocol_fee_recipient_token_account" account.
func (inst *Sell) SetProtocolFeeRecipientTokenAccountAccount(protocolFeeRecipientTokenAccount ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(protocolFeeRecipientTokenAccount).WRITE()
	return inst
}

// GetProtocolFeeRecipientTokenAccountAccount gets the "protocol_fee_recipient_token_account" account.
func (inst *Sell) GetProtocolFeeRecipientTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst Sell) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Sell,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Sell) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Sell) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BaseAmountIn == nil {
			return errors.New("BaseAmountIn parameter is not set")
		}
		if inst.MinQuoteAmountOut == nil {
			return errors.New("MinQuoteAmountOut parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UserBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserQuoteTokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PoolQuoteTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ProtocolFeeRecipientTokenAccount is not set")
		}
	}
	return nil
}

func (inst *Sell) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Sell")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        BaseAmountIn", *inst.BaseAmountIn))
						paramsBranch.Child(ag_format.Param("   MinQuoteAmountOut", *inst.MinQuoteAmountOut))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                         user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             user_base_token_", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            user_quote_token_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             pool_base_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            pool_quote_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("protocol_fee_recipient_token_", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj Sell) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseAmountIn` param:
	err = encoder.Encode(obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinQuoteAmountOut` param:
	err = encoder.Encode(obj.MinQuoteAmountOut)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Sell) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseAmountIn`:
	err = decoder.Decode(&obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinQuoteAmountOut`:
	err = decoder.Decode(&obj.MinQuoteAmountOut)
	if err != nil {
		return err
	}
	return nil
}

// NewSellInstruction declares a new Sell instruction with the provided parameters and accounts.
func NewSellInstruction(
	// Parameters:
	base_amount_in uint64,
	min_quote_amount_out uint64,
	// Accounts:
	user ag_solanago.PublicKey,
	userBaseTokenAccount ag_solanago.PublicKey,
	userQuoteTokenAccount ag_solanago.PublicKey,
	poolBaseTokenAccount ag_solanago.PublicKey,
	poolQuoteTokenAccount ag_solanago.PublicKey,
	protocolFeeRecipientTokenAccount ag_solanago.PublicKey) *Sell {
	return NewSellInstructionBuilder().
		SetBaseAmountIn(base_amount_in).
		SetMinQuoteAmountOut(min_quote_amount_out).
		SetUserAccount(user).
		SetUserBaseTokenAccountAccount(userBaseTokenAccount).
		SetUserQuoteTokenAccountAccount(userQuoteTokenAccount).
		SetPoolBaseTokenAccountAccount(poolBaseTokenAccount).
		SetPoolQuoteTokenAccountAccount(poolQuoteTokenAccount).
		SetProtocolFeeRecipientTokenAccountAccount(protocolFeeRecipientTokenAccount)
}
