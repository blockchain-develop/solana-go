// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pumpswap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Disable is the `disable` instruction.
type Disable struct {
	DisableCreatePool *bool
	DisableDeposit    *bool
	DisableWithdraw   *bool
	DisableBuy        *bool
	DisableSell       *bool

	// [0] = [WRITE] global_config
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDisableInstructionBuilder creates a new `Disable` instruction builder.
func NewDisableInstructionBuilder() *Disable {
	nd := &Disable{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetDisableCreatePool sets the "disable_create_pool" parameter.
func (inst *Disable) SetDisableCreatePool(disable_create_pool bool) *Disable {
	inst.DisableCreatePool = &disable_create_pool
	return inst
}

// SetDisableDeposit sets the "disable_deposit" parameter.
func (inst *Disable) SetDisableDeposit(disable_deposit bool) *Disable {
	inst.DisableDeposit = &disable_deposit
	return inst
}

// SetDisableWithdraw sets the "disable_withdraw" parameter.
func (inst *Disable) SetDisableWithdraw(disable_withdraw bool) *Disable {
	inst.DisableWithdraw = &disable_withdraw
	return inst
}

// SetDisableBuy sets the "disable_buy" parameter.
func (inst *Disable) SetDisableBuy(disable_buy bool) *Disable {
	inst.DisableBuy = &disable_buy
	return inst
}

// SetDisableSell sets the "disable_sell" parameter.
func (inst *Disable) SetDisableSell(disable_sell bool) *Disable {
	inst.DisableSell = &disable_sell
	return inst
}

// SetGlobalConfigAccount sets the "global_config" account.
func (inst *Disable) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *Disable {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(globalConfig).WRITE()
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
func (inst *Disable) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst Disable) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Disable,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Disable) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Disable) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DisableCreatePool == nil {
			return errors.New("DisableCreatePool parameter is not set")
		}
		if inst.DisableDeposit == nil {
			return errors.New("DisableDeposit parameter is not set")
		}
		if inst.DisableWithdraw == nil {
			return errors.New("DisableWithdraw parameter is not set")
		}
		if inst.DisableBuy == nil {
			return errors.New("DisableBuy parameter is not set")
		}
		if inst.DisableSell == nil {
			return errors.New("DisableSell parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
	}
	return nil
}

func (inst *Disable) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Disable")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  DisableCreatePool", *inst.DisableCreatePool))
						paramsBranch.Child(ag_format.Param("     DisableDeposit", *inst.DisableDeposit))
						paramsBranch.Child(ag_format.Param("    DisableWithdraw", *inst.DisableWithdraw))
						paramsBranch.Child(ag_format.Param("         DisableBuy", *inst.DisableBuy))
						paramsBranch.Child(ag_format.Param("        DisableSell", *inst.DisableSell))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("global_config", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj Disable) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DisableCreatePool` param:
	err = encoder.Encode(obj.DisableCreatePool)
	if err != nil {
		return err
	}
	// Serialize `DisableDeposit` param:
	err = encoder.Encode(obj.DisableDeposit)
	if err != nil {
		return err
	}
	// Serialize `DisableWithdraw` param:
	err = encoder.Encode(obj.DisableWithdraw)
	if err != nil {
		return err
	}
	// Serialize `DisableBuy` param:
	err = encoder.Encode(obj.DisableBuy)
	if err != nil {
		return err
	}
	// Serialize `DisableSell` param:
	err = encoder.Encode(obj.DisableSell)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Disable) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DisableCreatePool`:
	err = decoder.Decode(&obj.DisableCreatePool)
	if err != nil {
		return err
	}
	// Deserialize `DisableDeposit`:
	err = decoder.Decode(&obj.DisableDeposit)
	if err != nil {
		return err
	}
	// Deserialize `DisableWithdraw`:
	err = decoder.Decode(&obj.DisableWithdraw)
	if err != nil {
		return err
	}
	// Deserialize `DisableBuy`:
	err = decoder.Decode(&obj.DisableBuy)
	if err != nil {
		return err
	}
	// Deserialize `DisableSell`:
	err = decoder.Decode(&obj.DisableSell)
	if err != nil {
		return err
	}
	return nil
}

// NewDisableInstruction declares a new Disable instruction with the provided parameters and accounts.
func NewDisableInstruction(
	// Parameters:
	disable_create_pool bool,
	disable_deposit bool,
	disable_withdraw bool,
	disable_buy bool,
	disable_sell bool,
	// Accounts:
	globalConfig ag_solanago.PublicKey) *Disable {
	return NewDisableInstructionBuilder().
		SetDisableCreatePool(disable_create_pool).
		SetDisableDeposit(disable_deposit).
		SetDisableWithdraw(disable_withdraw).
		SetDisableBuy(disable_buy).
		SetDisableSell(disable_sell).
		SetGlobalConfigAccount(globalConfig)
}
