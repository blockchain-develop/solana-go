// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pumpswap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ExtendAccount is the `extend_account` instruction.
type ExtendAccount struct {

	// [0] = [WRITE] account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewExtendAccountInstructionBuilder creates a new `ExtendAccount` instruction builder.
func NewExtendAccountInstructionBuilder() *ExtendAccount {
	nd := &ExtendAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetAccountAccount sets the "account" account.
func (inst *ExtendAccount) SetAccountAccount(account ag_solanago.PublicKey) *ExtendAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(account).WRITE()
	return inst
}

// GetAccountAccount gets the "account" account.
func (inst *ExtendAccount) GetAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst ExtendAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ExtendAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ExtendAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ExtendAccount) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Account is not set")
		}
	}
	return nil
}

func (inst *ExtendAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ExtendAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("account", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj ExtendAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ExtendAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewExtendAccountInstruction declares a new ExtendAccount instruction with the provided parameters and accounts.
func NewExtendAccountInstruction(
	// Accounts:
	account ag_solanago.PublicKey) *ExtendAccount {
	return NewExtendAccountInstructionBuilder().
		SetAccountAccount(account)
}
