// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pumpswap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreatePool is the `create_pool` instruction.
type CreatePool struct {
	Index         *uint16
	BaseAmountIn  *uint64
	QuoteAmountIn *uint64

	// [0] = [WRITE] pool
	//
	// [1] = [WRITE, SIGNER] creator
	//
	// [2] = [WRITE] lp_mint
	//
	// [3] = [WRITE] user_base_token_account
	//
	// [4] = [WRITE] user_quote_token_account
	//
	// [5] = [WRITE] user_pool_token_account
	//
	// [6] = [WRITE] pool_base_token_account
	//
	// [7] = [WRITE] pool_quote_token_account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreatePoolInstructionBuilder creates a new `CreatePool` instruction builder.
func NewCreatePoolInstructionBuilder() *CreatePool {
	nd := &CreatePool{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetIndex sets the "index" parameter.
func (inst *CreatePool) SetIndex(index uint16) *CreatePool {
	inst.Index = &index
	return inst
}

// SetBaseAmountIn sets the "base_amount_in" parameter.
func (inst *CreatePool) SetBaseAmountIn(base_amount_in uint64) *CreatePool {
	inst.BaseAmountIn = &base_amount_in
	return inst
}

// SetQuoteAmountIn sets the "quote_amount_in" parameter.
func (inst *CreatePool) SetQuoteAmountIn(quote_amount_in uint64) *CreatePool {
	inst.QuoteAmountIn = &quote_amount_in
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *CreatePool) SetPoolAccount(pool ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *CreatePool) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCreatorAccount sets the "creator" account.
func (inst *CreatePool) SetCreatorAccount(creator ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *CreatePool) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetLpMintAccount sets the "lp_mint" account.
func (inst *CreatePool) SetLpMintAccount(lpMint ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
func (inst *CreatePool) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserBaseTokenAccountAccount sets the "user_base_token_account" account.
func (inst *CreatePool) SetUserBaseTokenAccountAccount(userBaseTokenAccount ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userBaseTokenAccount).WRITE()
	return inst
}

// GetUserBaseTokenAccountAccount gets the "user_base_token_account" account.
func (inst *CreatePool) GetUserBaseTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserQuoteTokenAccountAccount sets the "user_quote_token_account" account.
func (inst *CreatePool) SetUserQuoteTokenAccountAccount(userQuoteTokenAccount ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userQuoteTokenAccount).WRITE()
	return inst
}

// GetUserQuoteTokenAccountAccount gets the "user_quote_token_account" account.
func (inst *CreatePool) GetUserQuoteTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserPoolTokenAccountAccount sets the "user_pool_token_account" account.
func (inst *CreatePool) SetUserPoolTokenAccountAccount(userPoolTokenAccount ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userPoolTokenAccount).WRITE()
	return inst
}

// GetUserPoolTokenAccountAccount gets the "user_pool_token_account" account.
func (inst *CreatePool) GetUserPoolTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolBaseTokenAccountAccount sets the "pool_base_token_account" account.
func (inst *CreatePool) SetPoolBaseTokenAccountAccount(poolBaseTokenAccount ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolBaseTokenAccount).WRITE()
	return inst
}

// GetPoolBaseTokenAccountAccount gets the "pool_base_token_account" account.
func (inst *CreatePool) GetPoolBaseTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPoolQuoteTokenAccountAccount sets the "pool_quote_token_account" account.
func (inst *CreatePool) SetPoolQuoteTokenAccountAccount(poolQuoteTokenAccount ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(poolQuoteTokenAccount).WRITE()
	return inst
}

// GetPoolQuoteTokenAccountAccount gets the "pool_quote_token_account" account.
func (inst *CreatePool) GetPoolQuoteTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst CreatePool) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreatePool,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreatePool) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreatePool) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Index == nil {
			return errors.New("Index parameter is not set")
		}
		if inst.BaseAmountIn == nil {
			return errors.New("BaseAmountIn parameter is not set")
		}
		if inst.QuoteAmountIn == nil {
			return errors.New("QuoteAmountIn parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserQuoteTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UserPoolTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PoolQuoteTokenAccount is not set")
		}
	}
	return nil
}

func (inst *CreatePool) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreatePool")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          Index", *inst.Index))
						paramsBranch.Child(ag_format.Param("   BaseAmountIn", *inst.BaseAmountIn))
						paramsBranch.Child(ag_format.Param("  QuoteAmountIn", *inst.QuoteAmountIn))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          creator", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          lp_mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" user_base_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("user_quote_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" user_pool_token_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" pool_base_token_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("pool_quote_token_", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj CreatePool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `BaseAmountIn` param:
	err = encoder.Encode(obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmountIn` param:
	err = encoder.Encode(obj.QuoteAmountIn)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreatePool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `BaseAmountIn`:
	err = decoder.Decode(&obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmountIn`:
	err = decoder.Decode(&obj.QuoteAmountIn)
	if err != nil {
		return err
	}
	return nil
}

// NewCreatePoolInstruction declares a new CreatePool instruction with the provided parameters and accounts.
func NewCreatePoolInstruction(
	// Parameters:
	index uint16,
	base_amount_in uint64,
	quote_amount_in uint64,
	// Accounts:
	pool ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	userBaseTokenAccount ag_solanago.PublicKey,
	userQuoteTokenAccount ag_solanago.PublicKey,
	userPoolTokenAccount ag_solanago.PublicKey,
	poolBaseTokenAccount ag_solanago.PublicKey,
	poolQuoteTokenAccount ag_solanago.PublicKey) *CreatePool {
	return NewCreatePoolInstructionBuilder().
		SetIndex(index).
		SetBaseAmountIn(base_amount_in).
		SetQuoteAmountIn(quote_amount_in).
		SetPoolAccount(pool).
		SetCreatorAccount(creator).
		SetLpMintAccount(lpMint).
		SetUserBaseTokenAccountAccount(userBaseTokenAccount).
		SetUserQuoteTokenAccountAccount(userQuoteTokenAccount).
		SetUserPoolTokenAccountAccount(userPoolTokenAccount).
		SetPoolBaseTokenAccountAccount(poolBaseTokenAccount).
		SetPoolQuoteTokenAccountAccount(poolQuoteTokenAccount)
}
