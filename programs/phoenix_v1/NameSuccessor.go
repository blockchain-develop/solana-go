// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package phoenix_v1

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// NameSuccessor is the `NameSuccessor` instruction.
type NameSuccessor struct {
	Successor *ag_solanago.PublicKey

	// [0] = [] phoenixProgram
	//
	// [1] = [] logAuthority
	//
	// [2] = [WRITE] market
	//
	// [3] = [SIGNER] marketAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewNameSuccessorInstructionBuilder creates a new `NameSuccessor` instruction builder.
func NewNameSuccessorInstructionBuilder() *NameSuccessor {
	nd := &NameSuccessor{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetSuccessor sets the "successor" parameter.
func (inst *NameSuccessor) SetSuccessor(successor ag_solanago.PublicKey) *NameSuccessor {
	inst.Successor = &successor
	return inst
}

// SetPhoenixProgramAccount sets the "phoenixProgram" account.
func (inst *NameSuccessor) SetPhoenixProgramAccount(phoenixProgram ag_solanago.PublicKey) *NameSuccessor {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(phoenixProgram)
	return inst
}

// GetPhoenixProgramAccount gets the "phoenixProgram" account.
func (inst *NameSuccessor) GetPhoenixProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLogAuthorityAccount sets the "logAuthority" account.
func (inst *NameSuccessor) SetLogAuthorityAccount(logAuthority ag_solanago.PublicKey) *NameSuccessor {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(logAuthority)
	return inst
}

// GetLogAuthorityAccount gets the "logAuthority" account.
func (inst *NameSuccessor) GetLogAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMarketAccount sets the "market" account.
func (inst *NameSuccessor) SetMarketAccount(market ag_solanago.PublicKey) *NameSuccessor {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *NameSuccessor) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMarketAuthorityAccount sets the "marketAuthority" account.
func (inst *NameSuccessor) SetMarketAuthorityAccount(marketAuthority ag_solanago.PublicKey) *NameSuccessor {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(marketAuthority).SIGNER()
	return inst
}

// GetMarketAuthorityAccount gets the "marketAuthority" account.
func (inst *NameSuccessor) GetMarketAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst NameSuccessor) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_NameSuccessor),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst NameSuccessor) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *NameSuccessor) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Successor == nil {
			return errors.New("Successor parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PhoenixProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LogAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MarketAuthority is not set")
		}
	}
	return nil
}

func (inst *NameSuccessor) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("NameSuccessor")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Successor", *inst.Successor))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" phoenixProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   logAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         market", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("marketAuthority", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj NameSuccessor) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Successor` param:
	err = encoder.Encode(obj.Successor)
	if err != nil {
		return err
	}
	return nil
}
func (obj *NameSuccessor) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Successor`:
	err = decoder.Decode(&obj.Successor)
	if err != nil {
		return err
	}
	return nil
}

// NewNameSuccessorInstruction declares a new NameSuccessor instruction with the provided parameters and accounts.
func NewNameSuccessorInstruction(
	// Parameters:
	successor ag_solanago.PublicKey,
	// Accounts:
	phoenixProgram ag_solanago.PublicKey,
	logAuthority ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	marketAuthority ag_solanago.PublicKey) *NameSuccessor {
	return NewNameSuccessorInstructionBuilder().
		SetSuccessor(successor).
		SetPhoenixProgramAccount(phoenixProgram).
		SetLogAuthorityAccount(logAuthority).
		SetMarketAccount(market).
		SetMarketAuthorityAccount(marketAuthority)
}
