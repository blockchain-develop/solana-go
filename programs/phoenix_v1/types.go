// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package phoenix_v1

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type MarketSizeParams struct {
	BidsSize uint64
	AsksSize uint64
	NumSeats uint64
}

func (obj MarketSizeParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BidsSize` param:
	err = encoder.Encode(obj.BidsSize)
	if err != nil {
		return err
	}
	// Serialize `AsksSize` param:
	err = encoder.Encode(obj.AsksSize)
	if err != nil {
		return err
	}
	// Serialize `NumSeats` param:
	err = encoder.Encode(obj.NumSeats)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarketSizeParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BidsSize`:
	err = decoder.Decode(&obj.BidsSize)
	if err != nil {
		return err
	}
	// Deserialize `AsksSize`:
	err = decoder.Decode(&obj.AsksSize)
	if err != nil {
		return err
	}
	// Deserialize `NumSeats`:
	err = decoder.Decode(&obj.NumSeats)
	if err != nil {
		return err
	}
	return nil
}

type TokenParams struct {
	Decimals  uint32
	VaultBump uint32
	MintKey   ag_solanago.PublicKey
	VaultKey  ag_solanago.PublicKey
}

func (obj TokenParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `VaultBump` param:
	err = encoder.Encode(obj.VaultBump)
	if err != nil {
		return err
	}
	// Serialize `MintKey` param:
	err = encoder.Encode(obj.MintKey)
	if err != nil {
		return err
	}
	// Serialize `VaultKey` param:
	err = encoder.Encode(obj.VaultKey)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `VaultBump`:
	err = decoder.Decode(&obj.VaultBump)
	if err != nil {
		return err
	}
	// Deserialize `MintKey`:
	err = decoder.Decode(&obj.MintKey)
	if err != nil {
		return err
	}
	// Deserialize `VaultKey`:
	err = decoder.Decode(&obj.VaultKey)
	if err != nil {
		return err
	}
	return nil
}

type Seat struct {
	Discriminant   uint64
	Market         ag_solanago.PublicKey
	Trader         ag_solanago.PublicKey
	ApprovalStatus uint64
	Padding        [6]uint64
}

func (obj Seat) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Discriminant` param:
	err = encoder.Encode(obj.Discriminant)
	if err != nil {
		return err
	}
	// Serialize `Market` param:
	err = encoder.Encode(obj.Market)
	if err != nil {
		return err
	}
	// Serialize `Trader` param:
	err = encoder.Encode(obj.Trader)
	if err != nil {
		return err
	}
	// Serialize `ApprovalStatus` param:
	err = encoder.Encode(obj.ApprovalStatus)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Seat) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Discriminant`:
	err = decoder.Decode(&obj.Discriminant)
	if err != nil {
		return err
	}
	// Deserialize `Market`:
	err = decoder.Decode(&obj.Market)
	if err != nil {
		return err
	}
	// Deserialize `Trader`:
	err = decoder.Decode(&obj.Trader)
	if err != nil {
		return err
	}
	// Deserialize `ApprovalStatus`:
	err = decoder.Decode(&obj.ApprovalStatus)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type AuditLogHeader struct {
	Instruction    uint8
	SequenceNumber uint64
	Timestamp      int64
	Slot           uint64
	Market         ag_solanago.PublicKey
	Signer         ag_solanago.PublicKey
	TotalEvents    uint16
}

func (obj AuditLogHeader) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Instruction` param:
	err = encoder.Encode(obj.Instruction)
	if err != nil {
		return err
	}
	// Serialize `SequenceNumber` param:
	err = encoder.Encode(obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Slot` param:
	err = encoder.Encode(obj.Slot)
	if err != nil {
		return err
	}
	// Serialize `Market` param:
	err = encoder.Encode(obj.Market)
	if err != nil {
		return err
	}
	// Serialize `Signer` param:
	err = encoder.Encode(obj.Signer)
	if err != nil {
		return err
	}
	// Serialize `TotalEvents` param:
	err = encoder.Encode(obj.TotalEvents)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AuditLogHeader) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Instruction`:
	err = decoder.Decode(&obj.Instruction)
	if err != nil {
		return err
	}
	// Deserialize `SequenceNumber`:
	err = decoder.Decode(&obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Slot`:
	err = decoder.Decode(&obj.Slot)
	if err != nil {
		return err
	}
	// Deserialize `Market`:
	err = decoder.Decode(&obj.Market)
	if err != nil {
		return err
	}
	// Deserialize `Signer`:
	err = decoder.Decode(&obj.Signer)
	if err != nil {
		return err
	}
	// Deserialize `TotalEvents`:
	err = decoder.Decode(&obj.TotalEvents)
	if err != nil {
		return err
	}
	return nil
}

type FillEvent struct {
	Index               uint16
	MakerId             ag_solanago.PublicKey
	OrderSequenceNumber uint64
	PriceInTicks        uint64
	BaseLotsFilled      uint64
	BaseLotsRemaining   uint64
}

func (obj FillEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `MakerId` param:
	err = encoder.Encode(obj.MakerId)
	if err != nil {
		return err
	}
	// Serialize `OrderSequenceNumber` param:
	err = encoder.Encode(obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `PriceInTicks` param:
	err = encoder.Encode(obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Serialize `BaseLotsFilled` param:
	err = encoder.Encode(obj.BaseLotsFilled)
	if err != nil {
		return err
	}
	// Serialize `BaseLotsRemaining` param:
	err = encoder.Encode(obj.BaseLotsRemaining)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FillEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `MakerId`:
	err = decoder.Decode(&obj.MakerId)
	if err != nil {
		return err
	}
	// Deserialize `OrderSequenceNumber`:
	err = decoder.Decode(&obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `PriceInTicks`:
	err = decoder.Decode(&obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Deserialize `BaseLotsFilled`:
	err = decoder.Decode(&obj.BaseLotsFilled)
	if err != nil {
		return err
	}
	// Deserialize `BaseLotsRemaining`:
	err = decoder.Decode(&obj.BaseLotsRemaining)
	if err != nil {
		return err
	}
	return nil
}

type ReduceEvent struct {
	Index               uint16
	OrderSequenceNumber uint64
	PriceInTicks        uint64
	BaseLotsRemoved     uint64
	BaseLotsRemaining   uint64
}

func (obj ReduceEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `OrderSequenceNumber` param:
	err = encoder.Encode(obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `PriceInTicks` param:
	err = encoder.Encode(obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Serialize `BaseLotsRemoved` param:
	err = encoder.Encode(obj.BaseLotsRemoved)
	if err != nil {
		return err
	}
	// Serialize `BaseLotsRemaining` param:
	err = encoder.Encode(obj.BaseLotsRemaining)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReduceEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `OrderSequenceNumber`:
	err = decoder.Decode(&obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `PriceInTicks`:
	err = decoder.Decode(&obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Deserialize `BaseLotsRemoved`:
	err = decoder.Decode(&obj.BaseLotsRemoved)
	if err != nil {
		return err
	}
	// Deserialize `BaseLotsRemaining`:
	err = decoder.Decode(&obj.BaseLotsRemaining)
	if err != nil {
		return err
	}
	return nil
}

type PlaceEvent struct {
	Index               uint16
	OrderSequenceNumber uint64
	ClientOrderId       ag_binary.Uint128
	PriceInTicks        uint64
	BaseLotsPlaced      uint64
}

func (obj PlaceEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `OrderSequenceNumber` param:
	err = encoder.Encode(obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `ClientOrderId` param:
	err = encoder.Encode(obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Serialize `PriceInTicks` param:
	err = encoder.Encode(obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Serialize `BaseLotsPlaced` param:
	err = encoder.Encode(obj.BaseLotsPlaced)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlaceEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `OrderSequenceNumber`:
	err = decoder.Decode(&obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `ClientOrderId`:
	err = decoder.Decode(&obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Deserialize `PriceInTicks`:
	err = decoder.Decode(&obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Deserialize `BaseLotsPlaced`:
	err = decoder.Decode(&obj.BaseLotsPlaced)
	if err != nil {
		return err
	}
	return nil
}

type EvictEvent struct {
	Index               uint16
	MakerId             ag_solanago.PublicKey
	OrderSequenceNumber uint64
	PriceInTicks        uint64
	BaseLotsEvicted     uint64
}

func (obj EvictEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `MakerId` param:
	err = encoder.Encode(obj.MakerId)
	if err != nil {
		return err
	}
	// Serialize `OrderSequenceNumber` param:
	err = encoder.Encode(obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `PriceInTicks` param:
	err = encoder.Encode(obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Serialize `BaseLotsEvicted` param:
	err = encoder.Encode(obj.BaseLotsEvicted)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvictEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `MakerId`:
	err = decoder.Decode(&obj.MakerId)
	if err != nil {
		return err
	}
	// Deserialize `OrderSequenceNumber`:
	err = decoder.Decode(&obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `PriceInTicks`:
	err = decoder.Decode(&obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Deserialize `BaseLotsEvicted`:
	err = decoder.Decode(&obj.BaseLotsEvicted)
	if err != nil {
		return err
	}
	return nil
}

type FillSummaryEvent struct {
	Index                uint16
	ClientOrderId        ag_binary.Uint128
	TotalBaseLotsFilled  uint64
	TotalQuoteLotsFilled uint64
	TotalFeeInQuoteLots  uint64
}

func (obj FillSummaryEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `ClientOrderId` param:
	err = encoder.Encode(obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Serialize `TotalBaseLotsFilled` param:
	err = encoder.Encode(obj.TotalBaseLotsFilled)
	if err != nil {
		return err
	}
	// Serialize `TotalQuoteLotsFilled` param:
	err = encoder.Encode(obj.TotalQuoteLotsFilled)
	if err != nil {
		return err
	}
	// Serialize `TotalFeeInQuoteLots` param:
	err = encoder.Encode(obj.TotalFeeInQuoteLots)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FillSummaryEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `ClientOrderId`:
	err = decoder.Decode(&obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Deserialize `TotalBaseLotsFilled`:
	err = decoder.Decode(&obj.TotalBaseLotsFilled)
	if err != nil {
		return err
	}
	// Deserialize `TotalQuoteLotsFilled`:
	err = decoder.Decode(&obj.TotalQuoteLotsFilled)
	if err != nil {
		return err
	}
	// Deserialize `TotalFeeInQuoteLots`:
	err = decoder.Decode(&obj.TotalFeeInQuoteLots)
	if err != nil {
		return err
	}
	return nil
}

type FeeEvent struct {
	Index                    uint16
	FeesCollectedInQuoteLots uint64
}

func (obj FeeEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `FeesCollectedInQuoteLots` param:
	err = encoder.Encode(obj.FeesCollectedInQuoteLots)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `FeesCollectedInQuoteLots`:
	err = decoder.Decode(&obj.FeesCollectedInQuoteLots)
	if err != nil {
		return err
	}
	return nil
}

type TimeInForceEvent struct {
	Index                           uint16
	OrderSequenceNumber             uint64
	LastValidSlot                   uint64
	LastValidUnixTimestampInSeconds uint64
}

func (obj TimeInForceEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `OrderSequenceNumber` param:
	err = encoder.Encode(obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `LastValidSlot` param:
	err = encoder.Encode(obj.LastValidSlot)
	if err != nil {
		return err
	}
	// Serialize `LastValidUnixTimestampInSeconds` param:
	err = encoder.Encode(obj.LastValidUnixTimestampInSeconds)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TimeInForceEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `OrderSequenceNumber`:
	err = decoder.Decode(&obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `LastValidSlot`:
	err = decoder.Decode(&obj.LastValidSlot)
	if err != nil {
		return err
	}
	// Deserialize `LastValidUnixTimestampInSeconds`:
	err = decoder.Decode(&obj.LastValidUnixTimestampInSeconds)
	if err != nil {
		return err
	}
	return nil
}

type ExpiredOrderEvent struct {
	Index               uint16
	MakerId             ag_solanago.PublicKey
	OrderSequenceNumber uint64
	PriceInTicks        uint64
	BaseLotsRemoved     uint64
}

func (obj ExpiredOrderEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `MakerId` param:
	err = encoder.Encode(obj.MakerId)
	if err != nil {
		return err
	}
	// Serialize `OrderSequenceNumber` param:
	err = encoder.Encode(obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `PriceInTicks` param:
	err = encoder.Encode(obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Serialize `BaseLotsRemoved` param:
	err = encoder.Encode(obj.BaseLotsRemoved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExpiredOrderEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `MakerId`:
	err = decoder.Decode(&obj.MakerId)
	if err != nil {
		return err
	}
	// Deserialize `OrderSequenceNumber`:
	err = decoder.Decode(&obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `PriceInTicks`:
	err = decoder.Decode(&obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Deserialize `BaseLotsRemoved`:
	err = decoder.Decode(&obj.BaseLotsRemoved)
	if err != nil {
		return err
	}
	return nil
}

type CancelUpToParams struct {
	Side              Side
	TickLimit         *uint64 `bin:"optional"`
	NumOrdersToSearch *uint32 `bin:"optional"`
	NumOrdersToCancel *uint32 `bin:"optional"`
}

func (obj CancelUpToParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `TickLimit` param (optional):
	{
		if obj.TickLimit == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TickLimit)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NumOrdersToSearch` param (optional):
	{
		if obj.NumOrdersToSearch == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NumOrdersToSearch)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NumOrdersToCancel` param (optional):
	{
		if obj.NumOrdersToCancel == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NumOrdersToCancel)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CancelUpToParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `TickLimit` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TickLimit)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NumOrdersToSearch` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NumOrdersToSearch)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NumOrdersToCancel` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NumOrdersToCancel)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type CancelMultipleOrdersByIdParams struct {
	Orders []CancelOrderParams
}

func (obj CancelMultipleOrdersByIdParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Orders` param:
	err = encoder.Encode(obj.Orders)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CancelMultipleOrdersByIdParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Orders`:
	err = decoder.Decode(&obj.Orders)
	if err != nil {
		return err
	}
	return nil
}

type DepositParams struct {
	QuoteLotsToDeposit uint64
	BaseLotsToDeposit  uint64
}

func (obj DepositParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `QuoteLotsToDeposit` param:
	err = encoder.Encode(obj.QuoteLotsToDeposit)
	if err != nil {
		return err
	}
	// Serialize `BaseLotsToDeposit` param:
	err = encoder.Encode(obj.BaseLotsToDeposit)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DepositParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `QuoteLotsToDeposit`:
	err = decoder.Decode(&obj.QuoteLotsToDeposit)
	if err != nil {
		return err
	}
	// Deserialize `BaseLotsToDeposit`:
	err = decoder.Decode(&obj.BaseLotsToDeposit)
	if err != nil {
		return err
	}
	return nil
}

type InitializeParams struct {
	MarketSizeParams               MarketSizeParams
	NumQuoteLotsPerQuoteUnit       uint64
	TickSizeInQuoteLotsPerBaseUnit uint64
	NumBaseLotsPerBaseUnit         uint64
	TakerFeeBps                    uint16
	FeeCollector                   ag_solanago.PublicKey
	RawBaseUnitsPerBaseUnit        *uint32 `bin:"optional"`
}

func (obj InitializeParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketSizeParams` param:
	err = encoder.Encode(obj.MarketSizeParams)
	if err != nil {
		return err
	}
	// Serialize `NumQuoteLotsPerQuoteUnit` param:
	err = encoder.Encode(obj.NumQuoteLotsPerQuoteUnit)
	if err != nil {
		return err
	}
	// Serialize `TickSizeInQuoteLotsPerBaseUnit` param:
	err = encoder.Encode(obj.TickSizeInQuoteLotsPerBaseUnit)
	if err != nil {
		return err
	}
	// Serialize `NumBaseLotsPerBaseUnit` param:
	err = encoder.Encode(obj.NumBaseLotsPerBaseUnit)
	if err != nil {
		return err
	}
	// Serialize `TakerFeeBps` param:
	err = encoder.Encode(obj.TakerFeeBps)
	if err != nil {
		return err
	}
	// Serialize `FeeCollector` param:
	err = encoder.Encode(obj.FeeCollector)
	if err != nil {
		return err
	}
	// Serialize `RawBaseUnitsPerBaseUnit` param (optional):
	{
		if obj.RawBaseUnitsPerBaseUnit == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RawBaseUnitsPerBaseUnit)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *InitializeParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketSizeParams`:
	err = decoder.Decode(&obj.MarketSizeParams)
	if err != nil {
		return err
	}
	// Deserialize `NumQuoteLotsPerQuoteUnit`:
	err = decoder.Decode(&obj.NumQuoteLotsPerQuoteUnit)
	if err != nil {
		return err
	}
	// Deserialize `TickSizeInQuoteLotsPerBaseUnit`:
	err = decoder.Decode(&obj.TickSizeInQuoteLotsPerBaseUnit)
	if err != nil {
		return err
	}
	// Deserialize `NumBaseLotsPerBaseUnit`:
	err = decoder.Decode(&obj.NumBaseLotsPerBaseUnit)
	if err != nil {
		return err
	}
	// Deserialize `TakerFeeBps`:
	err = decoder.Decode(&obj.TakerFeeBps)
	if err != nil {
		return err
	}
	// Deserialize `FeeCollector`:
	err = decoder.Decode(&obj.FeeCollector)
	if err != nil {
		return err
	}
	// Deserialize `RawBaseUnitsPerBaseUnit` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RawBaseUnitsPerBaseUnit)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MultipleOrderPacket struct {
	Bids                             []CondensedOrder
	Asks                             []CondensedOrder
	ClientOrderId                    *ag_binary.Uint128 `bin:"optional"`
	FailedMultipleLimitOrderBehavior FailedMultipleLimitOrderBehavior
}

func (obj MultipleOrderPacket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bids` param:
	err = encoder.Encode(obj.Bids)
	if err != nil {
		return err
	}
	// Serialize `Asks` param:
	err = encoder.Encode(obj.Asks)
	if err != nil {
		return err
	}
	// Serialize `ClientOrderId` param (optional):
	{
		if obj.ClientOrderId == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ClientOrderId)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FailedMultipleLimitOrderBehavior` param:
	err = encoder.Encode(obj.FailedMultipleLimitOrderBehavior)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MultipleOrderPacket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bids`:
	err = decoder.Decode(&obj.Bids)
	if err != nil {
		return err
	}
	// Deserialize `Asks`:
	err = decoder.Decode(&obj.Asks)
	if err != nil {
		return err
	}
	// Deserialize `ClientOrderId` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ClientOrderId)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FailedMultipleLimitOrderBehavior`:
	err = decoder.Decode(&obj.FailedMultipleLimitOrderBehavior)
	if err != nil {
		return err
	}
	return nil
}

type CondensedOrder struct {
	PriceInTicks                    uint64
	SizeInBaseLots                  uint64
	LastValidSlot                   *uint64 `bin:"optional"`
	LastValidUnixTimestampInSeconds *uint64 `bin:"optional"`
}

func (obj CondensedOrder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PriceInTicks` param:
	err = encoder.Encode(obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Serialize `SizeInBaseLots` param:
	err = encoder.Encode(obj.SizeInBaseLots)
	if err != nil {
		return err
	}
	// Serialize `LastValidSlot` param (optional):
	{
		if obj.LastValidSlot == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.LastValidSlot)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `LastValidUnixTimestampInSeconds` param (optional):
	{
		if obj.LastValidUnixTimestampInSeconds == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.LastValidUnixTimestampInSeconds)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CondensedOrder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PriceInTicks`:
	err = decoder.Decode(&obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Deserialize `SizeInBaseLots`:
	err = decoder.Decode(&obj.SizeInBaseLots)
	if err != nil {
		return err
	}
	// Deserialize `LastValidSlot` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.LastValidSlot)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `LastValidUnixTimestampInSeconds` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.LastValidUnixTimestampInSeconds)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type CancelOrderParams struct {
	Side                Side
	PriceInTicks        uint64
	OrderSequenceNumber uint64
}

func (obj CancelOrderParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `PriceInTicks` param:
	err = encoder.Encode(obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Serialize `OrderSequenceNumber` param:
	err = encoder.Encode(obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CancelOrderParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `PriceInTicks`:
	err = decoder.Decode(&obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Deserialize `OrderSequenceNumber`:
	err = decoder.Decode(&obj.OrderSequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

type ReduceOrderParams struct {
	BaseParams CancelOrderParams
	Size       uint64
}

func (obj ReduceOrderParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseParams` param:
	err = encoder.Encode(obj.BaseParams)
	if err != nil {
		return err
	}
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReduceOrderParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseParams`:
	err = decoder.Decode(&obj.BaseParams)
	if err != nil {
		return err
	}
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	return nil
}

type WithdrawParams struct {
	QuoteLotsToWithdraw *uint64 `bin:"optional"`
	BaseLotsToWithdraw  *uint64 `bin:"optional"`
}

func (obj WithdrawParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `QuoteLotsToWithdraw` param (optional):
	{
		if obj.QuoteLotsToWithdraw == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.QuoteLotsToWithdraw)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `BaseLotsToWithdraw` param (optional):
	{
		if obj.BaseLotsToWithdraw == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.BaseLotsToWithdraw)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *WithdrawParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `QuoteLotsToWithdraw` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.QuoteLotsToWithdraw)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `BaseLotsToWithdraw` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.BaseLotsToWithdraw)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type MarketHeader struct {
	Discriminant                    uint64
	Status                          uint64
	MarketSizeParams                MarketSizeParams
	BaseParams                      TokenParams
	BaseLotSize                     uint64
	QuoteParams                     TokenParams
	QuoteLotSize                    uint64
	TickSizeInQuoteAtomsPerBaseUnit uint64
	Authority                       ag_solanago.PublicKey
	FeeRecipient                    ag_solanago.PublicKey
	MarketSequenceNumber            uint64
	Successor                       ag_solanago.PublicKey
	RawBaseUnitsPerBaseUnit         uint32
	Padding1                        uint32
	Padding2                        [32]uint64
}

func (obj MarketHeader) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Discriminant` param:
	err = encoder.Encode(obj.Discriminant)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `MarketSizeParams` param:
	err = encoder.Encode(obj.MarketSizeParams)
	if err != nil {
		return err
	}
	// Serialize `BaseParams` param:
	err = encoder.Encode(obj.BaseParams)
	if err != nil {
		return err
	}
	// Serialize `BaseLotSize` param:
	err = encoder.Encode(obj.BaseLotSize)
	if err != nil {
		return err
	}
	// Serialize `QuoteParams` param:
	err = encoder.Encode(obj.QuoteParams)
	if err != nil {
		return err
	}
	// Serialize `QuoteLotSize` param:
	err = encoder.Encode(obj.QuoteLotSize)
	if err != nil {
		return err
	}
	// Serialize `TickSizeInQuoteAtomsPerBaseUnit` param:
	err = encoder.Encode(obj.TickSizeInQuoteAtomsPerBaseUnit)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `FeeRecipient` param:
	err = encoder.Encode(obj.FeeRecipient)
	if err != nil {
		return err
	}
	// Serialize `MarketSequenceNumber` param:
	err = encoder.Encode(obj.MarketSequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `Successor` param:
	err = encoder.Encode(obj.Successor)
	if err != nil {
		return err
	}
	// Serialize `RawBaseUnitsPerBaseUnit` param:
	err = encoder.Encode(obj.RawBaseUnitsPerBaseUnit)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarketHeader) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Discriminant`:
	err = decoder.Decode(&obj.Discriminant)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `MarketSizeParams`:
	err = decoder.Decode(&obj.MarketSizeParams)
	if err != nil {
		return err
	}
	// Deserialize `BaseParams`:
	err = decoder.Decode(&obj.BaseParams)
	if err != nil {
		return err
	}
	// Deserialize `BaseLotSize`:
	err = decoder.Decode(&obj.BaseLotSize)
	if err != nil {
		return err
	}
	// Deserialize `QuoteParams`:
	err = decoder.Decode(&obj.QuoteParams)
	if err != nil {
		return err
	}
	// Deserialize `QuoteLotSize`:
	err = decoder.Decode(&obj.QuoteLotSize)
	if err != nil {
		return err
	}
	// Deserialize `TickSizeInQuoteAtomsPerBaseUnit`:
	err = decoder.Decode(&obj.TickSizeInQuoteAtomsPerBaseUnit)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `FeeRecipient`:
	err = decoder.Decode(&obj.FeeRecipient)
	if err != nil {
		return err
	}
	// Deserialize `MarketSequenceNumber`:
	err = decoder.Decode(&obj.MarketSequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `Successor`:
	err = decoder.Decode(&obj.Successor)
	if err != nil {
		return err
	}
	// Deserialize `RawBaseUnitsPerBaseUnit`:
	err = decoder.Decode(&obj.RawBaseUnitsPerBaseUnit)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	return nil
}

type PhoenixMarketEvent interface {
	isPhoenixMarketEvent()
}

type phoenixMarketEventContainer struct {
	Enum          ag_binary.BorshEnum `borsh_enum:"true"`
	Uninitialized PhoenixMarketEventUninitialized
	Header        PhoenixMarketEventHeader
	Fill          PhoenixMarketEventFill
	Place         PhoenixMarketEventPlace
	Reduce        PhoenixMarketEventReduce
	Evict         PhoenixMarketEventEvict
	FillSummary   PhoenixMarketEventFillSummary
	Fee           PhoenixMarketEventFee
	TimeInForce   PhoenixMarketEventTimeInForce
	ExpiredOrder  PhoenixMarketEventExpiredOrder
}

type PhoenixMarketEventUninitialized uint8

func (obj PhoenixMarketEventUninitialized) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *PhoenixMarketEventUninitialized) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *PhoenixMarketEventUninitialized) isPhoenixMarketEvent() {}

type PhoenixMarketEventHeader struct {
	Elem0 AuditLogHeader
}

func (_ *PhoenixMarketEventHeader) isPhoenixMarketEvent() {}

type PhoenixMarketEventFill struct {
	Elem0 FillEvent
}

func (_ *PhoenixMarketEventFill) isPhoenixMarketEvent() {}

type PhoenixMarketEventPlace struct {
	Elem0 PlaceEvent
}

func (_ *PhoenixMarketEventPlace) isPhoenixMarketEvent() {}

type PhoenixMarketEventReduce struct {
	Elem0 ReduceEvent
}

func (_ *PhoenixMarketEventReduce) isPhoenixMarketEvent() {}

type PhoenixMarketEventEvict struct {
	Elem0 EvictEvent
}

func (_ *PhoenixMarketEventEvict) isPhoenixMarketEvent() {}

type PhoenixMarketEventFillSummary struct {
	Elem0 FillSummaryEvent
}

func (_ *PhoenixMarketEventFillSummary) isPhoenixMarketEvent() {}

type PhoenixMarketEventFee struct {
	Elem0 FeeEvent
}

func (_ *PhoenixMarketEventFee) isPhoenixMarketEvent() {}

type PhoenixMarketEventTimeInForce struct {
	Elem0 TimeInForceEvent
}

func (_ *PhoenixMarketEventTimeInForce) isPhoenixMarketEvent() {}

type PhoenixMarketEventExpiredOrder struct {
	Elem0 ExpiredOrderEvent
}

func (_ *PhoenixMarketEventExpiredOrder) isPhoenixMarketEvent() {}

type FailedMultipleLimitOrderBehavior ag_binary.BorshEnum

const (
	FailedMultipleLimitOrderBehaviorFailOnInsufficientFundsAndAmendOnCross FailedMultipleLimitOrderBehavior = iota
	FailedMultipleLimitOrderBehaviorFailOnInsufficientFundsAndFailOnCross
	FailedMultipleLimitOrderBehaviorSkipOnInsufficientFundsAndAmendOnCross
	FailedMultipleLimitOrderBehaviorSkipOnInsufficientFundsAndFailOnCross
)

func (value FailedMultipleLimitOrderBehavior) String() string {
	switch value {
	case FailedMultipleLimitOrderBehaviorFailOnInsufficientFundsAndAmendOnCross:
		return "FailOnInsufficientFundsAndAmendOnCross"
	case FailedMultipleLimitOrderBehaviorFailOnInsufficientFundsAndFailOnCross:
		return "FailOnInsufficientFundsAndFailOnCross"
	case FailedMultipleLimitOrderBehaviorSkipOnInsufficientFundsAndAmendOnCross:
		return "SkipOnInsufficientFundsAndAmendOnCross"
	case FailedMultipleLimitOrderBehaviorSkipOnInsufficientFundsAndFailOnCross:
		return "SkipOnInsufficientFundsAndFailOnCross"
	default:
		return ""
	}
}

type MarketStatus ag_binary.BorshEnum

const (
	MarketStatusUninitialized MarketStatus = iota
	MarketStatusActive
	MarketStatusPostOnly
	MarketStatusPaused
	MarketStatusClosed
	MarketStatusTombstoned
)

func (value MarketStatus) String() string {
	switch value {
	case MarketStatusUninitialized:
		return "Uninitialized"
	case MarketStatusActive:
		return "Active"
	case MarketStatusPostOnly:
		return "PostOnly"
	case MarketStatusPaused:
		return "Paused"
	case MarketStatusClosed:
		return "Closed"
	case MarketStatusTombstoned:
		return "Tombstoned"
	default:
		return ""
	}
}

type SeatApprovalStatus ag_binary.BorshEnum

const (
	SeatApprovalStatusNotApproved SeatApprovalStatus = iota
	SeatApprovalStatusApproved
	SeatApprovalStatusRetired
)

func (value SeatApprovalStatus) String() string {
	switch value {
	case SeatApprovalStatusNotApproved:
		return "NotApproved"
	case SeatApprovalStatusApproved:
		return "Approved"
	case SeatApprovalStatusRetired:
		return "Retired"
	default:
		return ""
	}
}

type OrderPacket interface {
	isOrderPacket()
}

type orderPacketContainer struct {
	Enum              ag_binary.BorshEnum `borsh_enum:"true"`
	PostOnly          OrderPacketPostOnly
	Limit             OrderPacketLimit
	ImmediateOrCancel OrderPacketImmediateOrCancel
}

type OrderPacketPostOnly struct {
	Side                            Side
	PriceInTicks                    uint64
	NumBaseLots                     uint64
	ClientOrderId                   ag_binary.Uint128
	RejectPostOnly                  bool
	UseOnlyDepositedFunds           bool
	LastValidSlot                   *uint64 `bin:"optional"`
	LastValidUnixTimestampInSeconds *uint64 `bin:"optional"`
	FailSilentlyOnInsufficientFunds bool
}

func (obj OrderPacketPostOnly) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `PriceInTicks` param:
	err = encoder.Encode(obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Serialize `NumBaseLots` param:
	err = encoder.Encode(obj.NumBaseLots)
	if err != nil {
		return err
	}
	// Serialize `ClientOrderId` param:
	err = encoder.Encode(obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Serialize `RejectPostOnly` param:
	err = encoder.Encode(obj.RejectPostOnly)
	if err != nil {
		return err
	}
	// Serialize `UseOnlyDepositedFunds` param:
	err = encoder.Encode(obj.UseOnlyDepositedFunds)
	if err != nil {
		return err
	}
	// Serialize `LastValidSlot` param (optional):
	{
		if obj.LastValidSlot == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.LastValidSlot)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `LastValidUnixTimestampInSeconds` param (optional):
	{
		if obj.LastValidUnixTimestampInSeconds == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.LastValidUnixTimestampInSeconds)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FailSilentlyOnInsufficientFunds` param:
	err = encoder.Encode(obj.FailSilentlyOnInsufficientFunds)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderPacketPostOnly) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `PriceInTicks`:
	err = decoder.Decode(&obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Deserialize `NumBaseLots`:
	err = decoder.Decode(&obj.NumBaseLots)
	if err != nil {
		return err
	}
	// Deserialize `ClientOrderId`:
	err = decoder.Decode(&obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Deserialize `RejectPostOnly`:
	err = decoder.Decode(&obj.RejectPostOnly)
	if err != nil {
		return err
	}
	// Deserialize `UseOnlyDepositedFunds`:
	err = decoder.Decode(&obj.UseOnlyDepositedFunds)
	if err != nil {
		return err
	}
	// Deserialize `LastValidSlot` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.LastValidSlot)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `LastValidUnixTimestampInSeconds` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.LastValidUnixTimestampInSeconds)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FailSilentlyOnInsufficientFunds`:
	err = decoder.Decode(&obj.FailSilentlyOnInsufficientFunds)
	if err != nil {
		return err
	}
	return nil
}

func (_ *OrderPacketPostOnly) isOrderPacket() {}

type OrderPacketLimit struct {
	Side                            Side
	PriceInTicks                    uint64
	NumBaseLots                     uint64
	SelfTradeBehavior               SelfTradeBehavior
	MatchLimit                      *uint64 `bin:"optional"`
	ClientOrderId                   ag_binary.Uint128
	UseOnlyDepositedFunds           bool
	LastValidSlot                   *uint64 `bin:"optional"`
	LastValidUnixTimestampInSeconds *uint64 `bin:"optional"`
	FailSilentlyOnInsufficientFunds bool
}

func (obj OrderPacketLimit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `PriceInTicks` param:
	err = encoder.Encode(obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Serialize `NumBaseLots` param:
	err = encoder.Encode(obj.NumBaseLots)
	if err != nil {
		return err
	}
	// Serialize `SelfTradeBehavior` param:
	err = encoder.Encode(obj.SelfTradeBehavior)
	if err != nil {
		return err
	}
	// Serialize `MatchLimit` param (optional):
	{
		if obj.MatchLimit == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MatchLimit)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ClientOrderId` param:
	err = encoder.Encode(obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Serialize `UseOnlyDepositedFunds` param:
	err = encoder.Encode(obj.UseOnlyDepositedFunds)
	if err != nil {
		return err
	}
	// Serialize `LastValidSlot` param (optional):
	{
		if obj.LastValidSlot == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.LastValidSlot)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `LastValidUnixTimestampInSeconds` param (optional):
	{
		if obj.LastValidUnixTimestampInSeconds == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.LastValidUnixTimestampInSeconds)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FailSilentlyOnInsufficientFunds` param:
	err = encoder.Encode(obj.FailSilentlyOnInsufficientFunds)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderPacketLimit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `PriceInTicks`:
	err = decoder.Decode(&obj.PriceInTicks)
	if err != nil {
		return err
	}
	// Deserialize `NumBaseLots`:
	err = decoder.Decode(&obj.NumBaseLots)
	if err != nil {
		return err
	}
	// Deserialize `SelfTradeBehavior`:
	err = decoder.Decode(&obj.SelfTradeBehavior)
	if err != nil {
		return err
	}
	// Deserialize `MatchLimit` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MatchLimit)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ClientOrderId`:
	err = decoder.Decode(&obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Deserialize `UseOnlyDepositedFunds`:
	err = decoder.Decode(&obj.UseOnlyDepositedFunds)
	if err != nil {
		return err
	}
	// Deserialize `LastValidSlot` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.LastValidSlot)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `LastValidUnixTimestampInSeconds` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.LastValidUnixTimestampInSeconds)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FailSilentlyOnInsufficientFunds`:
	err = decoder.Decode(&obj.FailSilentlyOnInsufficientFunds)
	if err != nil {
		return err
	}
	return nil
}

func (_ *OrderPacketLimit) isOrderPacket() {}

type OrderPacketImmediateOrCancel struct {
	Side                            Side
	PriceInTicks                    *uint64 `bin:"optional"`
	NumBaseLots                     uint64
	NumQuoteLots                    uint64
	MinBaseLotsToFill               uint64
	MinQuoteLotsToFill              uint64
	SelfTradeBehavior               SelfTradeBehavior
	MatchLimit                      *uint64 `bin:"optional"`
	ClientOrderId                   ag_binary.Uint128
	UseOnlyDepositedFunds           bool
	LastValidSlot                   *uint64 `bin:"optional"`
	LastValidUnixTimestampInSeconds *uint64 `bin:"optional"`
}

func (obj OrderPacketImmediateOrCancel) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `PriceInTicks` param (optional):
	{
		if obj.PriceInTicks == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PriceInTicks)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NumBaseLots` param:
	err = encoder.Encode(obj.NumBaseLots)
	if err != nil {
		return err
	}
	// Serialize `NumQuoteLots` param:
	err = encoder.Encode(obj.NumQuoteLots)
	if err != nil {
		return err
	}
	// Serialize `MinBaseLotsToFill` param:
	err = encoder.Encode(obj.MinBaseLotsToFill)
	if err != nil {
		return err
	}
	// Serialize `MinQuoteLotsToFill` param:
	err = encoder.Encode(obj.MinQuoteLotsToFill)
	if err != nil {
		return err
	}
	// Serialize `SelfTradeBehavior` param:
	err = encoder.Encode(obj.SelfTradeBehavior)
	if err != nil {
		return err
	}
	// Serialize `MatchLimit` param (optional):
	{
		if obj.MatchLimit == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MatchLimit)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ClientOrderId` param:
	err = encoder.Encode(obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Serialize `UseOnlyDepositedFunds` param:
	err = encoder.Encode(obj.UseOnlyDepositedFunds)
	if err != nil {
		return err
	}
	// Serialize `LastValidSlot` param (optional):
	{
		if obj.LastValidSlot == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.LastValidSlot)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `LastValidUnixTimestampInSeconds` param (optional):
	{
		if obj.LastValidUnixTimestampInSeconds == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.LastValidUnixTimestampInSeconds)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *OrderPacketImmediateOrCancel) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `PriceInTicks` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PriceInTicks)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NumBaseLots`:
	err = decoder.Decode(&obj.NumBaseLots)
	if err != nil {
		return err
	}
	// Deserialize `NumQuoteLots`:
	err = decoder.Decode(&obj.NumQuoteLots)
	if err != nil {
		return err
	}
	// Deserialize `MinBaseLotsToFill`:
	err = decoder.Decode(&obj.MinBaseLotsToFill)
	if err != nil {
		return err
	}
	// Deserialize `MinQuoteLotsToFill`:
	err = decoder.Decode(&obj.MinQuoteLotsToFill)
	if err != nil {
		return err
	}
	// Deserialize `SelfTradeBehavior`:
	err = decoder.Decode(&obj.SelfTradeBehavior)
	if err != nil {
		return err
	}
	// Deserialize `MatchLimit` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MatchLimit)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ClientOrderId`:
	err = decoder.Decode(&obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Deserialize `UseOnlyDepositedFunds`:
	err = decoder.Decode(&obj.UseOnlyDepositedFunds)
	if err != nil {
		return err
	}
	if !decoder.HasRemaining() {
		return
	}
	// Deserialize `LastValidSlot` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.LastValidSlot)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `LastValidUnixTimestampInSeconds` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.LastValidUnixTimestampInSeconds)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (_ *OrderPacketImmediateOrCancel) isOrderPacket() {}

type Side ag_binary.BorshEnum

const (
	SideBid Side = iota
	SideAsk
)

func (value Side) String() string {
	switch value {
	case SideBid:
		return "Bid"
	case SideAsk:
		return "Ask"
	default:
		return ""
	}
}

type SelfTradeBehavior ag_binary.BorshEnum

const (
	SelfTradeBehaviorAbort SelfTradeBehavior = iota
	SelfTradeBehaviorCancelProvide
	SelfTradeBehaviorDecrementTake
)

func (value SelfTradeBehavior) String() string {
	switch value {
	case SelfTradeBehaviorAbort:
		return "Abort"
	case SelfTradeBehaviorCancelProvide:
		return "CancelProvide"
	case SelfTradeBehaviorDecrementTake:
		return "DecrementTake"
	default:
		return ""
	}
}
