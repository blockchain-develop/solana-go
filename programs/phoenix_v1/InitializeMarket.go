// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package phoenix_v1

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeMarket is the `InitializeMarket` instruction.
type InitializeMarket struct {
	InitializeParams *InitializeParams

	// [0] = [] phoenixProgram
	//
	// [1] = [] logAuthority
	//
	// [2] = [WRITE] market
	//
	// [3] = [WRITE, SIGNER] marketCreator
	//
	// [4] = [] baseMint
	//
	// [5] = [] quoteMint
	//
	// [6] = [WRITE] baseVault
	//
	// [7] = [WRITE] quoteVault
	//
	// [8] = [] systemProgram
	//
	// [9] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeMarketInstructionBuilder creates a new `InitializeMarket` instruction builder.
func NewInitializeMarketInstructionBuilder() *InitializeMarket {
	nd := &InitializeMarket{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetInitializeParams sets the "initializeParams" parameter.
func (inst *InitializeMarket) SetInitializeParams(initializeParams InitializeParams) *InitializeMarket {
	inst.InitializeParams = &initializeParams
	return inst
}

// SetPhoenixProgramAccount sets the "phoenixProgram" account.
func (inst *InitializeMarket) SetPhoenixProgramAccount(phoenixProgram ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(phoenixProgram)
	return inst
}

// GetPhoenixProgramAccount gets the "phoenixProgram" account.
func (inst *InitializeMarket) GetPhoenixProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLogAuthorityAccount sets the "logAuthority" account.
func (inst *InitializeMarket) SetLogAuthorityAccount(logAuthority ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(logAuthority)
	return inst
}

// GetLogAuthorityAccount gets the "logAuthority" account.
func (inst *InitializeMarket) GetLogAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMarketAccount sets the "market" account.
func (inst *InitializeMarket) SetMarketAccount(market ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *InitializeMarket) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMarketCreatorAccount sets the "marketCreator" account.
func (inst *InitializeMarket) SetMarketCreatorAccount(marketCreator ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(marketCreator).WRITE().SIGNER()
	return inst
}

// GetMarketCreatorAccount gets the "marketCreator" account.
func (inst *InitializeMarket) GetMarketCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBaseMintAccount sets the "baseMint" account.
func (inst *InitializeMarket) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "baseMint" account.
func (inst *InitializeMarket) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetQuoteMintAccount sets the "quoteMint" account.
func (inst *InitializeMarket) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quoteMint" account.
func (inst *InitializeMarket) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBaseVaultAccount sets the "baseVault" account.
func (inst *InitializeMarket) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "baseVault" account.
func (inst *InitializeMarket) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetQuoteVaultAccount sets the "quoteVault" account.
func (inst *InitializeMarket) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

// GetQuoteVaultAccount gets the "quoteVault" account.
func (inst *InitializeMarket) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeMarket) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeMarket) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *InitializeMarket) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *InitializeMarket) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst InitializeMarket) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeMarket,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeMarket) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeMarket) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.InitializeParams == nil {
			return errors.New("InitializeParams parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PhoenixProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LogAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MarketCreator is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeMarket) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeMarket")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("InitializeParams", *inst.InitializeParams))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("phoenixProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  logAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        market", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" marketCreator", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      baseMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     quoteMint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     baseVault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("    quoteVault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("  tokenProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj InitializeMarket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `InitializeParams` param:
	err = encoder.Encode(obj.InitializeParams)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeMarket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `InitializeParams`:
	err = decoder.Decode(&obj.InitializeParams)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeMarketInstruction declares a new InitializeMarket instruction with the provided parameters and accounts.
func NewInitializeMarketInstruction(
	// Parameters:
	initializeParams InitializeParams,
	// Accounts:
	phoenixProgram ag_solanago.PublicKey,
	logAuthority ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	marketCreator ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *InitializeMarket {
	return NewInitializeMarketInstructionBuilder().
		SetInitializeParams(initializeParams).
		SetPhoenixProgramAccount(phoenixProgram).
		SetLogAuthorityAccount(logAuthority).
		SetMarketAccount(market).
		SetMarketCreatorAccount(marketCreator).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram)
}
