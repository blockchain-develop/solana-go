// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package phoenix_v1

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// PlaceMultiplePostOnlyOrders is the `PlaceMultiplePostOnlyOrders` instruction.
type PlaceMultiplePostOnlyOrders struct {
	MultipleOrderPacket *MultipleOrderPacket

	// [0] = [] phoenixProgram
	//
	// [1] = [] logAuthority
	//
	// [2] = [WRITE] market
	//
	// [3] = [SIGNER] trader
	//
	// [4] = [] seat
	//
	// [5] = [WRITE] baseAccount
	//
	// [6] = [WRITE] quoteAccount
	//
	// [7] = [WRITE] baseVault
	//
	// [8] = [WRITE] quoteVault
	//
	// [9] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewPlaceMultiplePostOnlyOrdersInstructionBuilder creates a new `PlaceMultiplePostOnlyOrders` instruction builder.
func NewPlaceMultiplePostOnlyOrdersInstructionBuilder() *PlaceMultiplePostOnlyOrders {
	nd := &PlaceMultiplePostOnlyOrders{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetMultipleOrderPacket sets the "multipleOrderPacket" parameter.
func (inst *PlaceMultiplePostOnlyOrders) SetMultipleOrderPacket(multipleOrderPacket MultipleOrderPacket) *PlaceMultiplePostOnlyOrders {
	inst.MultipleOrderPacket = &multipleOrderPacket
	return inst
}

// SetPhoenixProgramAccount sets the "phoenixProgram" account.
func (inst *PlaceMultiplePostOnlyOrders) SetPhoenixProgramAccount(phoenixProgram ag_solanago.PublicKey) *PlaceMultiplePostOnlyOrders {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(phoenixProgram)
	return inst
}

// GetPhoenixProgramAccount gets the "phoenixProgram" account.
func (inst *PlaceMultiplePostOnlyOrders) GetPhoenixProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLogAuthorityAccount sets the "logAuthority" account.
func (inst *PlaceMultiplePostOnlyOrders) SetLogAuthorityAccount(logAuthority ag_solanago.PublicKey) *PlaceMultiplePostOnlyOrders {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(logAuthority)
	return inst
}

// GetLogAuthorityAccount gets the "logAuthority" account.
func (inst *PlaceMultiplePostOnlyOrders) GetLogAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMarketAccount sets the "market" account.
func (inst *PlaceMultiplePostOnlyOrders) SetMarketAccount(market ag_solanago.PublicKey) *PlaceMultiplePostOnlyOrders {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *PlaceMultiplePostOnlyOrders) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTraderAccount sets the "trader" account.
func (inst *PlaceMultiplePostOnlyOrders) SetTraderAccount(trader ag_solanago.PublicKey) *PlaceMultiplePostOnlyOrders {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(trader).SIGNER()
	return inst
}

// GetTraderAccount gets the "trader" account.
func (inst *PlaceMultiplePostOnlyOrders) GetTraderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSeatAccount sets the "seat" account.
func (inst *PlaceMultiplePostOnlyOrders) SetSeatAccount(seat ag_solanago.PublicKey) *PlaceMultiplePostOnlyOrders {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(seat)
	return inst
}

// GetSeatAccount gets the "seat" account.
func (inst *PlaceMultiplePostOnlyOrders) GetSeatAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBaseAccountAccount sets the "baseAccount" account.
func (inst *PlaceMultiplePostOnlyOrders) SetBaseAccountAccount(baseAccount ag_solanago.PublicKey) *PlaceMultiplePostOnlyOrders {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(baseAccount).WRITE()
	return inst
}

// GetBaseAccountAccount gets the "baseAccount" account.
func (inst *PlaceMultiplePostOnlyOrders) GetBaseAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetQuoteAccountAccount sets the "quoteAccount" account.
func (inst *PlaceMultiplePostOnlyOrders) SetQuoteAccountAccount(quoteAccount ag_solanago.PublicKey) *PlaceMultiplePostOnlyOrders {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(quoteAccount).WRITE()
	return inst
}

// GetQuoteAccountAccount gets the "quoteAccount" account.
func (inst *PlaceMultiplePostOnlyOrders) GetQuoteAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBaseVaultAccount sets the "baseVault" account.
func (inst *PlaceMultiplePostOnlyOrders) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *PlaceMultiplePostOnlyOrders {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "baseVault" account.
func (inst *PlaceMultiplePostOnlyOrders) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetQuoteVaultAccount sets the "quoteVault" account.
func (inst *PlaceMultiplePostOnlyOrders) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *PlaceMultiplePostOnlyOrders {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

// GetQuoteVaultAccount gets the "quoteVault" account.
func (inst *PlaceMultiplePostOnlyOrders) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *PlaceMultiplePostOnlyOrders) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *PlaceMultiplePostOnlyOrders {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *PlaceMultiplePostOnlyOrders) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst PlaceMultiplePostOnlyOrders) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_PlaceMultiplePostOnlyOrders,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst PlaceMultiplePostOnlyOrders) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *PlaceMultiplePostOnlyOrders) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MultipleOrderPacket == nil {
			return errors.New("MultipleOrderPacket parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PhoenixProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LogAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Trader is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Seat is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BaseAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.QuoteAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *PlaceMultiplePostOnlyOrders) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("PlaceMultiplePostOnlyOrders")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MultipleOrderPacket", *inst.MultipleOrderPacket))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("phoenixProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  logAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        market", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        trader", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          seat", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          base", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         quote", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     baseVault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    quoteVault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("  tokenProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj PlaceMultiplePostOnlyOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MultipleOrderPacket` param:
	err = encoder.Encode(obj.MultipleOrderPacket)
	if err != nil {
		return err
	}
	return nil
}
func (obj *PlaceMultiplePostOnlyOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MultipleOrderPacket`:
	err = decoder.Decode(&obj.MultipleOrderPacket)
	if err != nil {
		return err
	}
	return nil
}

// NewPlaceMultiplePostOnlyOrdersInstruction declares a new PlaceMultiplePostOnlyOrders instruction with the provided parameters and accounts.
func NewPlaceMultiplePostOnlyOrdersInstruction(
	// Parameters:
	multipleOrderPacket MultipleOrderPacket,
	// Accounts:
	phoenixProgram ag_solanago.PublicKey,
	logAuthority ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	trader ag_solanago.PublicKey,
	seat ag_solanago.PublicKey,
	baseAccount ag_solanago.PublicKey,
	quoteAccount ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *PlaceMultiplePostOnlyOrders {
	return NewPlaceMultiplePostOnlyOrdersInstructionBuilder().
		SetMultipleOrderPacket(multipleOrderPacket).
		SetPhoenixProgramAccount(phoenixProgram).
		SetLogAuthorityAccount(logAuthority).
		SetMarketAccount(market).
		SetTraderAccount(trader).
		SetSeatAccount(seat).
		SetBaseAccountAccount(baseAccount).
		SetQuoteAccountAccount(quoteAccount).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetTokenProgramAccount(tokenProgram)
}
