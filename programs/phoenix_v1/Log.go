// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package phoenix_v1

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Log is the `Log` instruction.
type Log struct {

	// [0] = [SIGNER] logAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewLogInstructionBuilder creates a new `Log` instruction builder.
func NewLogInstructionBuilder() *Log {
	nd := &Log{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetLogAuthorityAccount sets the "logAuthority" account.
func (inst *Log) SetLogAuthorityAccount(logAuthority ag_solanago.PublicKey) *Log {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(logAuthority).SIGNER()
	return inst
}

// GetLogAuthorityAccount gets the "logAuthority" account.
func (inst *Log) GetLogAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst Log) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Log,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Log) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Log) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LogAuthority is not set")
		}
	}
	return nil
}

func (inst *Log) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Log")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("logAuthority", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj Log) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *Log) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewLogInstruction declares a new Log instruction with the provided parameters and accounts.
func NewLogInstruction(
	// Accounts:
	logAuthority ag_solanago.PublicKey) *Log {
	return NewLogInstructionBuilder().
		SetLogAuthorityAccount(logAuthority)
}
