// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package phoenix_v1

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "PhoenixV1"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_Swap = ag_binary.TypeID([8]byte{248, 198, 158, 145, 225, 117, 135, 200})

	Instruction_SwapWithFreeFunds = ag_binary.TypeID([8]byte{85, 145, 253, 195, 175, 103, 32, 30})

	Instruction_PlaceLimitOrder = ag_binary.TypeID([8]byte{108, 176, 33, 186, 146, 229, 1, 197})

	Instruction_PlaceLimitOrderWithFreeFunds = ag_binary.TypeID([8]byte{201, 97, 183, 58, 224, 51, 193, 217})

	Instruction_ReduceOrder = ag_binary.TypeID([8]byte{138, 143, 24, 74, 37, 73, 195, 236})

	Instruction_ReduceOrderWithFreeFunds = ag_binary.TypeID([8]byte{153, 234, 42, 168, 238, 72, 171, 102})

	Instruction_CancelAllOrders = ag_binary.TypeID([8]byte{196, 83, 243, 171, 17, 100, 160, 143})

	Instruction_CancelAllOrdersWithFreeFunds = ag_binary.TypeID([8]byte{26, 160, 6, 99, 49, 168, 177, 236})

	Instruction_CancelUpTo = ag_binary.TypeID([8]byte{26, 209, 244, 253, 59, 175, 227, 54})

	Instruction_CancelUpToWithFreeFunds = ag_binary.TypeID([8]byte{224, 111, 103, 64, 53, 162, 174, 119})

	Instruction_CancelMultipleOrdersById = ag_binary.TypeID([8]byte{240, 145, 18, 248, 67, 112, 10, 149})

	Instruction_CancelMultipleOrdersByIdWithFreeFunds = ag_binary.TypeID([8]byte{70, 205, 161, 158, 178, 223, 151, 140})

	Instruction_WithdrawFunds = ag_binary.TypeID([8]byte{241, 36, 29, 111, 208, 31, 104, 217})

	Instruction_DepositFunds = ag_binary.TypeID([8]byte{202, 39, 52, 211, 53, 20, 250, 88})

	Instruction_RequestSeat = ag_binary.TypeID([8]byte{45, 147, 28, 81, 244, 235, 148, 143})

	Instruction_Log = ag_binary.TypeID([8]byte{141, 230, 214, 242, 9, 209, 207, 170})

	Instruction_PlaceMultiplePostOnlyOrders = ag_binary.TypeID([8]byte{43, 115, 45, 80, 85, 20, 71, 229})

	Instruction_PlaceMultiplePostOnlyOrdersWithFreeFunds = ag_binary.TypeID([8]byte{219, 66, 162, 10, 147, 94, 156, 68})

	Instruction_InitializeMarket = ag_binary.TypeID([8]byte{35, 35, 189, 193, 155, 48, 170, 203})

	Instruction_ClaimAuthority = ag_binary.TypeID([8]byte{222, 132, 185, 123, 127, 107, 6, 31})

	Instruction_NameSuccessor = ag_binary.TypeID([8]byte{160, 203, 37, 229, 225, 119, 129, 236})

	Instruction_ChangeMarketStatus = ag_binary.TypeID([8]byte{221, 127, 224, 41, 177, 145, 126, 8})

	Instruction_ChangeSeatStatus = ag_binary.TypeID([8]byte{197, 197, 78, 110, 99, 229, 168, 22})

	Instruction_RequestSeatAuthorized = ag_binary.TypeID([8]byte{250, 119, 182, 161, 113, 25, 150, 156})

	Instruction_EvictSeat = ag_binary.TypeID([8]byte{232, 165, 194, 88, 233, 155, 82, 197})

	Instruction_ForceCancelOrders = ag_binary.TypeID([8]byte{64, 181, 196, 63, 222, 72, 64, 232})

	Instruction_CollectFees = ag_binary.TypeID([8]byte{164, 152, 207, 99, 30, 186, 19, 182})

	Instruction_ChangeFeeRecipient = ag_binary.TypeID([8]byte{253, 7, 246, 194, 88, 253, 47, 118})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_Swap:
		return "Swap"
	case Instruction_SwapWithFreeFunds:
		return "SwapWithFreeFunds"
	case Instruction_PlaceLimitOrder:
		return "PlaceLimitOrder"
	case Instruction_PlaceLimitOrderWithFreeFunds:
		return "PlaceLimitOrderWithFreeFunds"
	case Instruction_ReduceOrder:
		return "ReduceOrder"
	case Instruction_ReduceOrderWithFreeFunds:
		return "ReduceOrderWithFreeFunds"
	case Instruction_CancelAllOrders:
		return "CancelAllOrders"
	case Instruction_CancelAllOrdersWithFreeFunds:
		return "CancelAllOrdersWithFreeFunds"
	case Instruction_CancelUpTo:
		return "CancelUpTo"
	case Instruction_CancelUpToWithFreeFunds:
		return "CancelUpToWithFreeFunds"
	case Instruction_CancelMultipleOrdersById:
		return "CancelMultipleOrdersById"
	case Instruction_CancelMultipleOrdersByIdWithFreeFunds:
		return "CancelMultipleOrdersByIdWithFreeFunds"
	case Instruction_WithdrawFunds:
		return "WithdrawFunds"
	case Instruction_DepositFunds:
		return "DepositFunds"
	case Instruction_RequestSeat:
		return "RequestSeat"
	case Instruction_Log:
		return "Log"
	case Instruction_PlaceMultiplePostOnlyOrders:
		return "PlaceMultiplePostOnlyOrders"
	case Instruction_PlaceMultiplePostOnlyOrdersWithFreeFunds:
		return "PlaceMultiplePostOnlyOrdersWithFreeFunds"
	case Instruction_InitializeMarket:
		return "InitializeMarket"
	case Instruction_ClaimAuthority:
		return "ClaimAuthority"
	case Instruction_NameSuccessor:
		return "NameSuccessor"
	case Instruction_ChangeMarketStatus:
		return "ChangeMarketStatus"
	case Instruction_ChangeSeatStatus:
		return "ChangeSeatStatus"
	case Instruction_RequestSeatAuthorized:
		return "RequestSeatAuthorized"
	case Instruction_EvictSeat:
		return "EvictSeat"
	case Instruction_ForceCancelOrders:
		return "ForceCancelOrders"
	case Instruction_CollectFees:
		return "CollectFees"
	case Instruction_ChangeFeeRecipient:
		return "ChangeFeeRecipient"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"swap", (*Swap)(nil),
		},
		{
			"swap_with_free_funds", (*SwapWithFreeFunds)(nil),
		},
		{
			"place_limit_order", (*PlaceLimitOrder)(nil),
		},
		{
			"place_limit_order_with_free_funds", (*PlaceLimitOrderWithFreeFunds)(nil),
		},
		{
			"reduce_order", (*ReduceOrder)(nil),
		},
		{
			"reduce_order_with_free_funds", (*ReduceOrderWithFreeFunds)(nil),
		},
		{
			"cancel_all_orders", (*CancelAllOrders)(nil),
		},
		{
			"cancel_all_orders_with_free_funds", (*CancelAllOrdersWithFreeFunds)(nil),
		},
		{
			"cancel_up_to", (*CancelUpTo)(nil),
		},
		{
			"cancel_up_to_with_free_funds", (*CancelUpToWithFreeFunds)(nil),
		},
		{
			"cancel_multiple_orders_by_id", (*CancelMultipleOrdersById)(nil),
		},
		{
			"cancel_multiple_orders_by_id_with_free_funds", (*CancelMultipleOrdersByIdWithFreeFunds)(nil),
		},
		{
			"withdraw_funds", (*WithdrawFunds)(nil),
		},
		{
			"deposit_funds", (*DepositFunds)(nil),
		},
		{
			"request_seat", (*RequestSeat)(nil),
		},
		{
			"log", (*Log)(nil),
		},
		{
			"place_multiple_post_only_orders", (*PlaceMultiplePostOnlyOrders)(nil),
		},
		{
			"place_multiple_post_only_orders_with_free_funds", (*PlaceMultiplePostOnlyOrdersWithFreeFunds)(nil),
		},
		{
			"initialize_market", (*InitializeMarket)(nil),
		},
		{
			"claim_authority", (*ClaimAuthority)(nil),
		},
		{
			"name_successor", (*NameSuccessor)(nil),
		},
		{
			"change_market_status", (*ChangeMarketStatus)(nil),
		},
		{
			"change_seat_status", (*ChangeSeatStatus)(nil),
		},
		{
			"request_seat_authorized", (*RequestSeatAuthorized)(nil),
		},
		{
			"evict_seat", (*EvictSeat)(nil),
		},
		{
			"force_cancel_orders", (*ForceCancelOrders)(nil),
		},
		{
			"collect_fees", (*CollectFees)(nil),
		},
		{
			"change_fee_recipient", (*ChangeFeeRecipient)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
