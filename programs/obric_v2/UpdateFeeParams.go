// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package obric_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateFeeParams is the `updateFeeParams` instruction.
type UpdateFeeParams struct {
	FeeMillionth               *uint64
	ProtocolFeeShareThousandth *uint64

	// [0] = [WRITE] tradingPair
	//
	// [1] = [] mintX
	//
	// [2] = [] mintY
	//
	// [3] = [SIGNER] user
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateFeeParamsInstructionBuilder creates a new `UpdateFeeParams` instruction builder.
func NewUpdateFeeParamsInstructionBuilder() *UpdateFeeParams {
	nd := &UpdateFeeParams{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetFeeMillionth sets the "feeMillionth" parameter.
func (inst *UpdateFeeParams) SetFeeMillionth(feeMillionth uint64) *UpdateFeeParams {
	inst.FeeMillionth = &feeMillionth
	return inst
}

// SetProtocolFeeShareThousandth sets the "protocolFeeShareThousandth" parameter.
func (inst *UpdateFeeParams) SetProtocolFeeShareThousandth(protocolFeeShareThousandth uint64) *UpdateFeeParams {
	inst.ProtocolFeeShareThousandth = &protocolFeeShareThousandth
	return inst
}

// SetTradingPairAccount sets the "tradingPair" account.
func (inst *UpdateFeeParams) SetTradingPairAccount(tradingPair ag_solanago.PublicKey) *UpdateFeeParams {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tradingPair).WRITE()
	return inst
}

// GetTradingPairAccount gets the "tradingPair" account.
func (inst *UpdateFeeParams) GetTradingPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintXAccount sets the "mintX" account.
func (inst *UpdateFeeParams) SetMintXAccount(mintX ag_solanago.PublicKey) *UpdateFeeParams {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mintX)
	return inst
}

// GetMintXAccount gets the "mintX" account.
func (inst *UpdateFeeParams) GetMintXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintYAccount sets the "mintY" account.
func (inst *UpdateFeeParams) SetMintYAccount(mintY ag_solanago.PublicKey) *UpdateFeeParams {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mintY)
	return inst
}

// GetMintYAccount gets the "mintY" account.
func (inst *UpdateFeeParams) GetMintYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserAccount sets the "user" account.
func (inst *UpdateFeeParams) SetUserAccount(user ag_solanago.PublicKey) *UpdateFeeParams {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *UpdateFeeParams) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UpdateFeeParams) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateFeeParams,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateFeeParams) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateFeeParams) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.FeeMillionth == nil {
			return errors.New("FeeMillionth parameter is not set")
		}
		if inst.ProtocolFeeShareThousandth == nil {
			return errors.New("ProtocolFeeShareThousandth parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TradingPair is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MintX is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MintY is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.User is not set")
		}
	}
	return nil
}

func (inst *UpdateFeeParams) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateFeeParams")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("              FeeMillionth", *inst.FeeMillionth))
						paramsBranch.Child(ag_format.Param("ProtocolFeeShareThousandth", *inst.ProtocolFeeShareThousandth))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("tradingPair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      mintX", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      mintY", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       user", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdateFeeParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeMillionth` param:
	err = encoder.Encode(obj.FeeMillionth)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeShareThousandth` param:
	err = encoder.Encode(obj.ProtocolFeeShareThousandth)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateFeeParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeMillionth`:
	err = decoder.Decode(&obj.FeeMillionth)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeShareThousandth`:
	err = decoder.Decode(&obj.ProtocolFeeShareThousandth)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateFeeParamsInstruction declares a new UpdateFeeParams instruction with the provided parameters and accounts.
func NewUpdateFeeParamsInstruction(
	// Parameters:
	feeMillionth uint64,
	protocolFeeShareThousandth uint64,
	// Accounts:
	tradingPair ag_solanago.PublicKey,
	mintX ag_solanago.PublicKey,
	mintY ag_solanago.PublicKey,
	user ag_solanago.PublicKey) *UpdateFeeParams {
	return NewUpdateFeeParamsInstructionBuilder().
		SetFeeMillionth(feeMillionth).
		SetProtocolFeeShareThousandth(protocolFeeShareThousandth).
		SetTradingPairAccount(tradingPair).
		SetMintXAccount(mintX).
		SetMintYAccount(mintY).
		SetUserAccount(user)
}
