// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package obric_v2

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("obriQD1zbpyLz95G5n7nJe6a4DPjpFwa5XYPoNm113y")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "ObricV2"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_CreatePair = ag_binary.TypeID([8]byte{156, 190, 126, 151, 163, 62, 192, 220})

	Instruction_CreatePairV2 = ag_binary.TypeID([8]byte{55, 255, 159, 236, 123, 161, 174, 155})

	Instruction_UpdateConcentration = ag_binary.TypeID([8]byte{252, 177, 98, 133, 34, 227, 202, 11})

	Instruction_UpdateVersion = ag_binary.TypeID([8]byte{248, 152, 89, 69, 41, 63, 148, 30})

	Instruction_UpdateFeeParams = ag_binary.TypeID([8]byte{223, 116, 30, 197, 161, 4, 201, 146})

	Instruction_UpdateOracles = ag_binary.TypeID([8]byte{209, 115, 103, 72, 108, 69, 218, 189})

	Instruction_WithdrawFees = ag_binary.TypeID([8]byte{198, 212, 171, 109, 144, 215, 174, 89})

	Instruction_Deposit = ag_binary.TypeID([8]byte{242, 35, 198, 137, 82, 225, 242, 182})

	Instruction_Withdraw = ag_binary.TypeID([8]byte{183, 18, 70, 156, 148, 109, 161, 34})

	Instruction_SwapXToY = ag_binary.TypeID([8]byte{226, 74, 41, 166, 87, 155, 41, 75})

	Instruction_SwapYToX = ag_binary.TypeID([8]byte{219, 168, 219, 174, 169, 221, 164, 95})

	Instruction_Swap = ag_binary.TypeID([8]byte{248, 198, 158, 145, 225, 117, 135, 200})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_CreatePair:
		return "CreatePair"
	case Instruction_CreatePairV2:
		return "CreatePairV2"
	case Instruction_UpdateConcentration:
		return "UpdateConcentration"
	case Instruction_UpdateVersion:
		return "UpdateVersion"
	case Instruction_UpdateFeeParams:
		return "UpdateFeeParams"
	case Instruction_UpdateOracles:
		return "UpdateOracles"
	case Instruction_WithdrawFees:
		return "WithdrawFees"
	case Instruction_Deposit:
		return "Deposit"
	case Instruction_Withdraw:
		return "Withdraw"
	case Instruction_SwapXToY:
		return "SwapXToY"
	case Instruction_SwapYToX:
		return "SwapYToX"
	case Instruction_Swap:
		return "Swap"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"create_pair", (*CreatePair)(nil),
		},
		{
			"create_pair_v2", (*CreatePairV2)(nil),
		},
		{
			"update_concentration", (*UpdateConcentration)(nil),
		},
		{
			"update_version", (*UpdateVersion)(nil),
		},
		{
			"update_fee_params", (*UpdateFeeParams)(nil),
		},
		{
			"update_oracles", (*UpdateOracles)(nil),
		},
		{
			"withdraw_fees", (*WithdrawFees)(nil),
		},
		{
			"deposit", (*Deposit)(nil),
		},
		{
			"withdraw", (*Withdraw)(nil),
		},
		{
			"swap_x_to_y", (*SwapXToY)(nil),
		},
		{
			"swap_y_to_x", (*SwapYToX)(nil),
		},
		{
			"swap", (*Swap)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
