// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package obric_v2

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type SSTradingPair struct {
	IsInitialized              bool
	XPriceFeedId               ag_solanago.PublicKey
	YPriceFeedId               ag_solanago.PublicKey
	ReserveX                   ag_solanago.PublicKey
	ReserveY                   ag_solanago.PublicKey
	ProtocolFeeX               ag_solanago.PublicKey
	ProtocolFeeY               ag_solanago.PublicKey
	Bump                       uint8
	MintX                      ag_solanago.PublicKey
	MintY                      ag_solanago.PublicKey
	Concentration              uint64
	BigK                       ag_binary.Uint128
	TargetX                    uint64
	CumulativeVolume           uint64
	MultX                      uint64
	MultY                      uint64
	FeeMillionth               uint64
	RebatePercentage           uint64
	ProtocolFeeShareThousandth uint64
	VolumeRecord               [8]uint64
	VolumeTimeRecord           [8]int64
	Version                    uint8
	Padding                    [7]uint8
	MintSslpX                  ag_solanago.PublicKey
	MintSslpY                  ag_solanago.PublicKey
	Padding2                   [15]uint64
}

var SSTradingPairDiscriminator = [8]byte{59, 222, 15, 236, 98, 102, 90, 224}

func (obj SSTradingPair) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SSTradingPairDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `XPriceFeedId` param:
	err = encoder.Encode(obj.XPriceFeedId)
	if err != nil {
		return err
	}
	// Serialize `YPriceFeedId` param:
	err = encoder.Encode(obj.YPriceFeedId)
	if err != nil {
		return err
	}
	// Serialize `ReserveX` param:
	err = encoder.Encode(obj.ReserveX)
	if err != nil {
		return err
	}
	// Serialize `ReserveY` param:
	err = encoder.Encode(obj.ReserveY)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeX` param:
	err = encoder.Encode(obj.ProtocolFeeX)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeY` param:
	err = encoder.Encode(obj.ProtocolFeeY)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `MintX` param:
	err = encoder.Encode(obj.MintX)
	if err != nil {
		return err
	}
	// Serialize `MintY` param:
	err = encoder.Encode(obj.MintY)
	if err != nil {
		return err
	}
	// Serialize `Concentration` param:
	err = encoder.Encode(obj.Concentration)
	if err != nil {
		return err
	}
	// Serialize `BigK` param:
	err = encoder.Encode(obj.BigK)
	if err != nil {
		return err
	}
	// Serialize `TargetX` param:
	err = encoder.Encode(obj.TargetX)
	if err != nil {
		return err
	}
	// Serialize `CumulativeVolume` param:
	err = encoder.Encode(obj.CumulativeVolume)
	if err != nil {
		return err
	}
	// Serialize `MultX` param:
	err = encoder.Encode(obj.MultX)
	if err != nil {
		return err
	}
	// Serialize `MultY` param:
	err = encoder.Encode(obj.MultY)
	if err != nil {
		return err
	}
	// Serialize `FeeMillionth` param:
	err = encoder.Encode(obj.FeeMillionth)
	if err != nil {
		return err
	}
	// Serialize `RebatePercentage` param:
	err = encoder.Encode(obj.RebatePercentage)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeShareThousandth` param:
	err = encoder.Encode(obj.ProtocolFeeShareThousandth)
	if err != nil {
		return err
	}
	// Serialize `VolumeRecord` param:
	err = encoder.Encode(obj.VolumeRecord)
	if err != nil {
		return err
	}
	// Serialize `VolumeTimeRecord` param:
	err = encoder.Encode(obj.VolumeTimeRecord)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `MintSslpX` param:
	err = encoder.Encode(obj.MintSslpX)
	if err != nil {
		return err
	}
	// Serialize `MintSslpY` param:
	err = encoder.Encode(obj.MintSslpY)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SSTradingPair) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SSTradingPairDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[59 222 15 236 98 102 90 224]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `XPriceFeedId`:
	err = decoder.Decode(&obj.XPriceFeedId)
	if err != nil {
		return err
	}
	// Deserialize `YPriceFeedId`:
	err = decoder.Decode(&obj.YPriceFeedId)
	if err != nil {
		return err
	}
	// Deserialize `ReserveX`:
	err = decoder.Decode(&obj.ReserveX)
	if err != nil {
		return err
	}
	// Deserialize `ReserveY`:
	err = decoder.Decode(&obj.ReserveY)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeX`:
	err = decoder.Decode(&obj.ProtocolFeeX)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeY`:
	err = decoder.Decode(&obj.ProtocolFeeY)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `MintX`:
	err = decoder.Decode(&obj.MintX)
	if err != nil {
		return err
	}
	// Deserialize `MintY`:
	err = decoder.Decode(&obj.MintY)
	if err != nil {
		return err
	}
	// Deserialize `Concentration`:
	err = decoder.Decode(&obj.Concentration)
	if err != nil {
		return err
	}
	// Deserialize `BigK`:
	err = decoder.Decode(&obj.BigK)
	if err != nil {
		return err
	}
	// Deserialize `TargetX`:
	err = decoder.Decode(&obj.TargetX)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeVolume`:
	err = decoder.Decode(&obj.CumulativeVolume)
	if err != nil {
		return err
	}
	// Deserialize `MultX`:
	err = decoder.Decode(&obj.MultX)
	if err != nil {
		return err
	}
	// Deserialize `MultY`:
	err = decoder.Decode(&obj.MultY)
	if err != nil {
		return err
	}
	// Deserialize `FeeMillionth`:
	err = decoder.Decode(&obj.FeeMillionth)
	if err != nil {
		return err
	}
	// Deserialize `RebatePercentage`:
	err = decoder.Decode(&obj.RebatePercentage)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeShareThousandth`:
	err = decoder.Decode(&obj.ProtocolFeeShareThousandth)
	if err != nil {
		return err
	}
	// Deserialize `VolumeRecord`:
	err = decoder.Decode(&obj.VolumeRecord)
	if err != nil {
		return err
	}
	// Deserialize `VolumeTimeRecord`:
	err = decoder.Decode(&obj.VolumeTimeRecord)
	if err != nil {
		return err
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `MintSslpX`:
	err = decoder.Decode(&obj.MintSslpX)
	if err != nil {
		return err
	}
	// Deserialize `MintSslpY`:
	err = decoder.Decode(&obj.MintSslpY)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	return nil
}
