// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package obric_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SwapYToX is the `swapYToX` instruction.
type SwapYToX struct {
	InputY       *uint64
	MinOutputAmt *uint64

	// [0] = [WRITE] tradingPair
	//
	// [1] = [] mintX
	//
	// [2] = [] mintY
	//
	// [3] = [WRITE] reserveX
	//
	// [4] = [WRITE] reserveY
	//
	// [5] = [WRITE] userTokenAccountX
	//
	// [6] = [WRITE] userTokenAccountY
	//
	// [7] = [WRITE] protocolFeeX
	//
	// [8] = [] xPriceFeed
	//
	// [9] = [] yPriceFeed
	//
	// [10] = [SIGNER] user
	//
	// [11] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapYToXInstructionBuilder creates a new `SwapYToX` instruction builder.
func NewSwapYToXInstructionBuilder() *SwapYToX {
	nd := &SwapYToX{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetInputY sets the "inputY" parameter.
func (inst *SwapYToX) SetInputY(inputY uint64) *SwapYToX {
	inst.InputY = &inputY
	return inst
}

// SetMinOutputAmt sets the "minOutputAmt" parameter.
func (inst *SwapYToX) SetMinOutputAmt(minOutputAmt uint64) *SwapYToX {
	inst.MinOutputAmt = &minOutputAmt
	return inst
}

// SetTradingPairAccount sets the "tradingPair" account.
func (inst *SwapYToX) SetTradingPairAccount(tradingPair ag_solanago.PublicKey) *SwapYToX {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tradingPair).WRITE()
	return inst
}

// GetTradingPairAccount gets the "tradingPair" account.
func (inst *SwapYToX) GetTradingPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintXAccount sets the "mintX" account.
func (inst *SwapYToX) SetMintXAccount(mintX ag_solanago.PublicKey) *SwapYToX {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mintX)
	return inst
}

// GetMintXAccount gets the "mintX" account.
func (inst *SwapYToX) GetMintXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintYAccount sets the "mintY" account.
func (inst *SwapYToX) SetMintYAccount(mintY ag_solanago.PublicKey) *SwapYToX {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mintY)
	return inst
}

// GetMintYAccount gets the "mintY" account.
func (inst *SwapYToX) GetMintYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetReserveXAccount sets the "reserveX" account.
func (inst *SwapYToX) SetReserveXAccount(reserveX ag_solanago.PublicKey) *SwapYToX {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(reserveX).WRITE()
	return inst
}

// GetReserveXAccount gets the "reserveX" account.
func (inst *SwapYToX) GetReserveXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetReserveYAccount sets the "reserveY" account.
func (inst *SwapYToX) SetReserveYAccount(reserveY ag_solanago.PublicKey) *SwapYToX {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(reserveY).WRITE()
	return inst
}

// GetReserveYAccount gets the "reserveY" account.
func (inst *SwapYToX) GetReserveYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserTokenAccountXAccount sets the "userTokenAccountX" account.
func (inst *SwapYToX) SetUserTokenAccountXAccount(userTokenAccountX ag_solanago.PublicKey) *SwapYToX {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userTokenAccountX).WRITE()
	return inst
}

// GetUserTokenAccountXAccount gets the "userTokenAccountX" account.
func (inst *SwapYToX) GetUserTokenAccountXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserTokenAccountYAccount sets the "userTokenAccountY" account.
func (inst *SwapYToX) SetUserTokenAccountYAccount(userTokenAccountY ag_solanago.PublicKey) *SwapYToX {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(userTokenAccountY).WRITE()
	return inst
}

// GetUserTokenAccountYAccount gets the "userTokenAccountY" account.
func (inst *SwapYToX) GetUserTokenAccountYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetProtocolFeeXAccount sets the "protocolFeeX" account.
func (inst *SwapYToX) SetProtocolFeeXAccount(protocolFeeX ag_solanago.PublicKey) *SwapYToX {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(protocolFeeX).WRITE()
	return inst
}

// GetProtocolFeeXAccount gets the "protocolFeeX" account.
func (inst *SwapYToX) GetProtocolFeeXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetXPriceFeedAccount sets the "xPriceFeed" account.
func (inst *SwapYToX) SetXPriceFeedAccount(xPriceFeed ag_solanago.PublicKey) *SwapYToX {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(xPriceFeed)
	return inst
}

// GetXPriceFeedAccount gets the "xPriceFeed" account.
func (inst *SwapYToX) GetXPriceFeedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetYPriceFeedAccount sets the "yPriceFeed" account.
func (inst *SwapYToX) SetYPriceFeedAccount(yPriceFeed ag_solanago.PublicKey) *SwapYToX {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(yPriceFeed)
	return inst
}

// GetYPriceFeedAccount gets the "yPriceFeed" account.
func (inst *SwapYToX) GetYPriceFeedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetUserAccount sets the "user" account.
func (inst *SwapYToX) SetUserAccount(user ag_solanago.PublicKey) *SwapYToX {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *SwapYToX) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *SwapYToX) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SwapYToX {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *SwapYToX) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst SwapYToX) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SwapYToX,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SwapYToX) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SwapYToX) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.InputY == nil {
			return errors.New("InputY parameter is not set")
		}
		if inst.MinOutputAmt == nil {
			return errors.New("MinOutputAmt parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TradingPair is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MintX is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MintY is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ReserveX is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ReserveY is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UserTokenAccountX is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.UserTokenAccountY is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ProtocolFeeX is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.XPriceFeed is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.YPriceFeed is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *SwapYToX) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SwapYToX")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("      InputY", *inst.InputY))
						paramsBranch.Child(ag_format.Param("MinOutputAmt", *inst.MinOutputAmt))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      tradingPair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            mintX", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            mintY", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         reserveX", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         reserveY", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("userTokenAccountX", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("userTokenAccountY", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     protocolFeeX", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("       xPriceFeed", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       yPriceFeed", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("             user", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj SwapYToX) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `InputY` param:
	err = encoder.Encode(obj.InputY)
	if err != nil {
		return err
	}
	// Serialize `MinOutputAmt` param:
	err = encoder.Encode(obj.MinOutputAmt)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SwapYToX) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `InputY`:
	err = decoder.Decode(&obj.InputY)
	if err != nil {
		return err
	}
	// Deserialize `MinOutputAmt`:
	err = decoder.Decode(&obj.MinOutputAmt)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapYToXInstruction declares a new SwapYToX instruction with the provided parameters and accounts.
func NewSwapYToXInstruction(
	// Parameters:
	inputY uint64,
	minOutputAmt uint64,
	// Accounts:
	tradingPair ag_solanago.PublicKey,
	mintX ag_solanago.PublicKey,
	mintY ag_solanago.PublicKey,
	reserveX ag_solanago.PublicKey,
	reserveY ag_solanago.PublicKey,
	userTokenAccountX ag_solanago.PublicKey,
	userTokenAccountY ag_solanago.PublicKey,
	protocolFeeX ag_solanago.PublicKey,
	xPriceFeed ag_solanago.PublicKey,
	yPriceFeed ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *SwapYToX {
	return NewSwapYToXInstructionBuilder().
		SetInputY(inputY).
		SetMinOutputAmt(minOutputAmt).
		SetTradingPairAccount(tradingPair).
		SetMintXAccount(mintX).
		SetMintYAccount(mintY).
		SetReserveXAccount(reserveX).
		SetReserveYAccount(reserveY).
		SetUserTokenAccountXAccount(userTokenAccountX).
		SetUserTokenAccountYAccount(userTokenAccountY).
		SetProtocolFeeXAccount(protocolFeeX).
		SetXPriceFeedAccount(xPriceFeed).
		SetYPriceFeedAccount(yPriceFeed).
		SetUserAccount(user).
		SetTokenProgramAccount(tokenProgram)
}
