// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type BinArrayBitmapExtension struct {
	LbPair ag_solanago.PublicKey

	// Packed initialized bin array state for start_bin_index is positive
	PositiveBinArrayBitmap [12][8]uint64

	// Packed initialized bin array state for start_bin_index is negative
	NegativeBinArrayBitmap [12][8]uint64
}

var BinArrayBitmapExtensionDiscriminator = [8]byte{80, 111, 124, 113, 55, 237, 18, 5}

func (obj BinArrayBitmapExtension) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BinArrayBitmapExtensionDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `PositiveBinArrayBitmap` param:
	err = encoder.Encode(obj.PositiveBinArrayBitmap)
	if err != nil {
		return err
	}
	// Serialize `NegativeBinArrayBitmap` param:
	err = encoder.Encode(obj.NegativeBinArrayBitmap)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinArrayBitmapExtension) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BinArrayBitmapExtensionDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[80 111 124 113 55 237 18 5]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `PositiveBinArrayBitmap`:
	err = decoder.Decode(&obj.PositiveBinArrayBitmap)
	if err != nil {
		return err
	}
	// Deserialize `NegativeBinArrayBitmap`:
	err = decoder.Decode(&obj.NegativeBinArrayBitmap)
	if err != nil {
		return err
	}
	return nil
}

type BinArray struct {
	Index int64

	// Version of binArray
	Version uint8
	Padding [7]uint8
	LbPair  ag_solanago.PublicKey
	Bins    [70]Bin
}

var BinArrayDiscriminator = [8]byte{92, 142, 92, 220, 5, 148, 70, 181}

func (obj BinArray) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BinArrayDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `Bins` param:
	err = encoder.Encode(obj.Bins)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinArray) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BinArrayDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[92 142 92 220 5 148 70 181]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `Bins`:
	err = decoder.Decode(&obj.Bins)
	if err != nil {
		return err
	}
	return nil
}

type LbPair struct {
	Parameters  StaticParameters
	VParameters VariableParameters
	BumpSeed    [1]uint8

	// Bin step signer seed
	BinStepSeed [2]uint8

	// Type of the pair
	PairType uint8

	// Active bin id
	ActiveId int32

	// Bin step. Represent the price increment / decrement.
	BinStep uint16

	// Status of the pair. Check PairStatus enum.
	Status uint8

	// Require base factor seed
	RequireBaseFactorSeed uint8

	// Base factor seed
	BaseFactorSeed [2]uint8

	// Activation type
	ActivationType uint8

	// padding 0
	Padding0 uint8

	// Token X mint
	TokenXMint ag_solanago.PublicKey

	// Token Y mint
	TokenYMint ag_solanago.PublicKey

	// LB token X vault
	ReserveX ag_solanago.PublicKey

	// LB token Y vault
	ReserveY ag_solanago.PublicKey

	// Uncollected protocol fee
	ProtocolFee ProtocolFee

	// _padding_1, previous Fee owner, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	Padding1 [32]uint8

	// Farming reward information
	RewardInfos [2]RewardInfo

	// Oracle pubkey
	Oracle ag_solanago.PublicKey

	// Packed initialized bin array state
	BinArrayBitmap [16]uint64

	// Last time the pool fee parameter was updated
	LastUpdatedAt int64

	// _padding_2, previous whitelisted_wallet, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	Padding2 [32]uint8

	// Address allowed to swap when the current point is greater than or equal to the pre-activation point. The pre-activation point is calculated as `activation_point - pre_activation_duration`.
	PreActivationSwapAddress ag_solanago.PublicKey

	// Base keypair. Only required for permission pair
	BaseKey ag_solanago.PublicKey

	// Time point to enable the pair. Only applicable for permission pair.
	ActivationPoint uint64

	// Duration before activation activation_point. Used to calculate pre-activation time point for pre_activation_swap_address
	PreActivationDuration uint64

	// _padding 3 is reclaimed free space from swap_cap_deactivate_point and swap_cap_amount before, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	Padding3 [8]uint8

	// _padding_4, previous lock_duration, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	Padding4 uint64

	// Pool creator
	Creator ag_solanago.PublicKey

	// Reserved space for future use
	Reserved [24]uint8
}

var LbPairDiscriminator = [8]byte{33, 11, 49, 98, 181, 101, 177, 13}

func (obj LbPair) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LbPairDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Parameters` param:
	err = encoder.Encode(obj.Parameters)
	if err != nil {
		return err
	}
	// Serialize `VParameters` param:
	err = encoder.Encode(obj.VParameters)
	if err != nil {
		return err
	}
	// Serialize `BumpSeed` param:
	err = encoder.Encode(obj.BumpSeed)
	if err != nil {
		return err
	}
	// Serialize `BinStepSeed` param:
	err = encoder.Encode(obj.BinStepSeed)
	if err != nil {
		return err
	}
	// Serialize `PairType` param:
	err = encoder.Encode(obj.PairType)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `RequireBaseFactorSeed` param:
	err = encoder.Encode(obj.RequireBaseFactorSeed)
	if err != nil {
		return err
	}
	// Serialize `BaseFactorSeed` param:
	err = encoder.Encode(obj.BaseFactorSeed)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `Padding0` param:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return err
	}
	// Serialize `TokenXMint` param:
	err = encoder.Encode(obj.TokenXMint)
	if err != nil {
		return err
	}
	// Serialize `TokenYMint` param:
	err = encoder.Encode(obj.TokenYMint)
	if err != nil {
		return err
	}
	// Serialize `ReserveX` param:
	err = encoder.Encode(obj.ReserveX)
	if err != nil {
		return err
	}
	// Serialize `ReserveY` param:
	err = encoder.Encode(obj.ReserveY)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	// Serialize `Oracle` param:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return err
	}
	// Serialize `BinArrayBitmap` param:
	err = encoder.Encode(obj.BinArrayBitmap)
	if err != nil {
		return err
	}
	// Serialize `LastUpdatedAt` param:
	err = encoder.Encode(obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `PreActivationSwapAddress` param:
	err = encoder.Encode(obj.PreActivationSwapAddress)
	if err != nil {
		return err
	}
	// Serialize `BaseKey` param:
	err = encoder.Encode(obj.BaseKey)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Serialize `PreActivationDuration` param:
	err = encoder.Encode(obj.PreActivationDuration)
	if err != nil {
		return err
	}
	// Serialize `Padding3` param:
	err = encoder.Encode(obj.Padding3)
	if err != nil {
		return err
	}
	// Serialize `Padding4` param:
	err = encoder.Encode(obj.Padding4)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LbPair) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LbPairDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[33 11 49 98 181 101 177 13]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Parameters`:
	err = decoder.Decode(&obj.Parameters)
	if err != nil {
		return err
	}
	// Deserialize `VParameters`:
	err = decoder.Decode(&obj.VParameters)
	if err != nil {
		return err
	}
	// Deserialize `BumpSeed`:
	err = decoder.Decode(&obj.BumpSeed)
	if err != nil {
		return err
	}
	// Deserialize `BinStepSeed`:
	err = decoder.Decode(&obj.BinStepSeed)
	if err != nil {
		return err
	}
	// Deserialize `PairType`:
	err = decoder.Decode(&obj.PairType)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `RequireBaseFactorSeed`:
	err = decoder.Decode(&obj.RequireBaseFactorSeed)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactorSeed`:
	err = decoder.Decode(&obj.BaseFactorSeed)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return err
	}
	// Deserialize `TokenXMint`:
	err = decoder.Decode(&obj.TokenXMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenYMint`:
	err = decoder.Decode(&obj.TokenYMint)
	if err != nil {
		return err
	}
	// Deserialize `ReserveX`:
	err = decoder.Decode(&obj.ReserveX)
	if err != nil {
		return err
	}
	// Deserialize `ReserveY`:
	err = decoder.Decode(&obj.ReserveY)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return err
	}
	// Deserialize `BinArrayBitmap`:
	err = decoder.Decode(&obj.BinArrayBitmap)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdatedAt`:
	err = decoder.Decode(&obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `PreActivationSwapAddress`:
	err = decoder.Decode(&obj.PreActivationSwapAddress)
	if err != nil {
		return err
	}
	// Deserialize `BaseKey`:
	err = decoder.Decode(&obj.BaseKey)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Deserialize `PreActivationDuration`:
	err = decoder.Decode(&obj.PreActivationDuration)
	if err != nil {
		return err
	}
	// Deserialize `Padding3`:
	err = decoder.Decode(&obj.Padding3)
	if err != nil {
		return err
	}
	// Deserialize `Padding4`:
	err = decoder.Decode(&obj.Padding4)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type Oracle struct {
	// Index of latest observation
	Idx uint64

	// Size of active sample. Active sample is initialized observation.
	ActiveSize uint64

	// Number of observations
	Length uint64
}

var OracleDiscriminator = [8]byte{139, 194, 131, 179, 140, 179, 229, 244}

func (obj Oracle) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OracleDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Idx` param:
	err = encoder.Encode(obj.Idx)
	if err != nil {
		return err
	}
	// Serialize `ActiveSize` param:
	err = encoder.Encode(obj.ActiveSize)
	if err != nil {
		return err
	}
	// Serialize `Length` param:
	err = encoder.Encode(obj.Length)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Oracle) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OracleDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[139 194 131 179 140 179 229 244]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Idx`:
	err = decoder.Decode(&obj.Idx)
	if err != nil {
		return err
	}
	// Deserialize `ActiveSize`:
	err = decoder.Decode(&obj.ActiveSize)
	if err != nil {
		return err
	}
	// Deserialize `Length`:
	err = decoder.Decode(&obj.Length)
	if err != nil {
		return err
	}
	return nil
}

type Position struct {
	// The LB pair of this position
	LbPair ag_solanago.PublicKey

	// Owner of the position. Client rely on this to to fetch their positions.
	Owner ag_solanago.PublicKey

	// Liquidity shares of this position in bins (lower_bin_id <-> upper_bin_id). This is the same as LP concept.
	LiquidityShares [70]uint64

	// Farming reward information
	RewardInfos [70]UserRewardInfo

	// Swap fee to claim information
	FeeInfos [70]FeeInfo

	// Lower bin ID
	LowerBinId int32

	// Upper bin ID
	UpperBinId int32

	// Last updated timestamp
	LastUpdatedAt int64

	// Total claimed token fee X
	TotalClaimedFeeXAmount uint64

	// Total claimed token fee Y
	TotalClaimedFeeYAmount uint64

	// Total claimed rewards
	TotalClaimedRewards [2]uint64

	// Reserved space for future use
	Reserved [160]uint8
}

var PositionDiscriminator = [8]byte{170, 188, 143, 228, 122, 64, 247, 208}

func (obj Position) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PositionDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `LiquidityShares` param:
	err = encoder.Encode(obj.LiquidityShares)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	// Serialize `FeeInfos` param:
	err = encoder.Encode(obj.FeeInfos)
	if err != nil {
		return err
	}
	// Serialize `LowerBinId` param:
	err = encoder.Encode(obj.LowerBinId)
	if err != nil {
		return err
	}
	// Serialize `UpperBinId` param:
	err = encoder.Encode(obj.UpperBinId)
	if err != nil {
		return err
	}
	// Serialize `LastUpdatedAt` param:
	err = encoder.Encode(obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedFeeXAmount` param:
	err = encoder.Encode(obj.TotalClaimedFeeXAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedFeeYAmount` param:
	err = encoder.Encode(obj.TotalClaimedFeeYAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedRewards` param:
	err = encoder.Encode(obj.TotalClaimedRewards)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PositionDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[170 188 143 228 122 64 247 208]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityShares`:
	err = decoder.Decode(&obj.LiquidityShares)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	// Deserialize `FeeInfos`:
	err = decoder.Decode(&obj.FeeInfos)
	if err != nil {
		return err
	}
	// Deserialize `LowerBinId`:
	err = decoder.Decode(&obj.LowerBinId)
	if err != nil {
		return err
	}
	// Deserialize `UpperBinId`:
	err = decoder.Decode(&obj.UpperBinId)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdatedAt`:
	err = decoder.Decode(&obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedFeeXAmount`:
	err = decoder.Decode(&obj.TotalClaimedFeeXAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedFeeYAmount`:
	err = decoder.Decode(&obj.TotalClaimedFeeYAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedRewards`:
	err = decoder.Decode(&obj.TotalClaimedRewards)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type PositionV2 struct {
	// The LB pair of this position
	LbPair ag_solanago.PublicKey

	// Owner of the position. Client rely on this to to fetch their positions.
	Owner ag_solanago.PublicKey

	// Liquidity shares of this position in bins (lower_bin_id <-> upper_bin_id). This is the same as LP concept.
	LiquidityShares [70]ag_binary.Uint128

	// Farming reward information
	RewardInfos [70]UserRewardInfo

	// Swap fee to claim information
	FeeInfos [70]FeeInfo

	// Lower bin ID
	LowerBinId int32

	// Upper bin ID
	UpperBinId int32

	// Last updated timestamp
	LastUpdatedAt int64

	// Total claimed token fee X
	TotalClaimedFeeXAmount uint64

	// Total claimed token fee Y
	TotalClaimedFeeYAmount uint64

	// Total claimed rewards
	TotalClaimedRewards [2]uint64

	// Operator of position
	Operator ag_solanago.PublicKey

	// Time point which the locked liquidity can be withdraw
	LockReleasePoint uint64

	// _padding_0, previous subjected_to_bootstrap_liquidity_locking, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	Padding0 uint8

	// Address is able to claim fee in this position, only valid for bootstrap_liquidity_position
	FeeOwner ag_solanago.PublicKey

	// Reserved space for future use
	Reserved [87]uint8
}

var PositionV2Discriminator = [8]byte{117, 176, 212, 199, 245, 180, 133, 182}

func (obj PositionV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PositionV2Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `LiquidityShares` param:
	err = encoder.Encode(obj.LiquidityShares)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	// Serialize `FeeInfos` param:
	err = encoder.Encode(obj.FeeInfos)
	if err != nil {
		return err
	}
	// Serialize `LowerBinId` param:
	err = encoder.Encode(obj.LowerBinId)
	if err != nil {
		return err
	}
	// Serialize `UpperBinId` param:
	err = encoder.Encode(obj.UpperBinId)
	if err != nil {
		return err
	}
	// Serialize `LastUpdatedAt` param:
	err = encoder.Encode(obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedFeeXAmount` param:
	err = encoder.Encode(obj.TotalClaimedFeeXAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedFeeYAmount` param:
	err = encoder.Encode(obj.TotalClaimedFeeYAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedRewards` param:
	err = encoder.Encode(obj.TotalClaimedRewards)
	if err != nil {
		return err
	}
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `LockReleasePoint` param:
	err = encoder.Encode(obj.LockReleasePoint)
	if err != nil {
		return err
	}
	// Serialize `Padding0` param:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return err
	}
	// Serialize `FeeOwner` param:
	err = encoder.Encode(obj.FeeOwner)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PositionV2Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[117 176 212 199 245 180 133 182]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityShares`:
	err = decoder.Decode(&obj.LiquidityShares)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	// Deserialize `FeeInfos`:
	err = decoder.Decode(&obj.FeeInfos)
	if err != nil {
		return err
	}
	// Deserialize `LowerBinId`:
	err = decoder.Decode(&obj.LowerBinId)
	if err != nil {
		return err
	}
	// Deserialize `UpperBinId`:
	err = decoder.Decode(&obj.UpperBinId)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdatedAt`:
	err = decoder.Decode(&obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedFeeXAmount`:
	err = decoder.Decode(&obj.TotalClaimedFeeXAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedFeeYAmount`:
	err = decoder.Decode(&obj.TotalClaimedFeeYAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedRewards`:
	err = decoder.Decode(&obj.TotalClaimedRewards)
	if err != nil {
		return err
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `LockReleasePoint`:
	err = decoder.Decode(&obj.LockReleasePoint)
	if err != nil {
		return err
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return err
	}
	// Deserialize `FeeOwner`:
	err = decoder.Decode(&obj.FeeOwner)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type PresetParameter struct {
	// Bin step. Represent the price increment / decrement.
	BinStep uint16

	// Used for base fee calculation. base_fee_rate = base_factor * bin_step
	BaseFactor uint16

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32

	// Min bin id supported by the pool based on the configured bin step.
	MinBinId int32

	// Max bin id supported by the pool based on the configured bin step.
	MaxBinId int32

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16
}

var PresetParameterDiscriminator = [8]byte{242, 62, 244, 34, 181, 112, 58, 170}

func (obj PresetParameter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PresetParameterDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `MinBinId` param:
	err = encoder.Encode(obj.MinBinId)
	if err != nil {
		return err
	}
	// Serialize `MaxBinId` param:
	err = encoder.Encode(obj.MaxBinId)
	if err != nil {
		return err
	}
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PresetParameter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PresetParameterDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[242 62 244 34 181 112 58 170]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `MinBinId`:
	err = decoder.Decode(&obj.MinBinId)
	if err != nil {
		return err
	}
	// Deserialize `MaxBinId`:
	err = decoder.Decode(&obj.MaxBinId)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	return nil
}
