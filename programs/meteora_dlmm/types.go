// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type InitPresetParametersIx struct {
	// Bin step. Represent the price increment / decrement.
	BinStep uint16

	// Used for base fee calculation. base_fee_rate = base_factor * bin_step
	BaseFactor uint16

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32

	// Min bin id supported by the pool based on the configured bin step.
	MinBinId int32

	// Max bin id supported by the pool based on the configured bin step.
	MaxBinId int32

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16
}

func (obj InitPresetParametersIx) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `MinBinId` param:
	err = encoder.Encode(obj.MinBinId)
	if err != nil {
		return err
	}
	// Serialize `MaxBinId` param:
	err = encoder.Encode(obj.MaxBinId)
	if err != nil {
		return err
	}
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitPresetParametersIx) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `MinBinId`:
	err = decoder.Decode(&obj.MinBinId)
	if err != nil {
		return err
	}
	// Deserialize `MaxBinId`:
	err = decoder.Decode(&obj.MaxBinId)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	return nil
}

type FeeParameter struct {
	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16

	// Base factor for base fee rate
	BaseFactor uint16
}

func (obj FeeParameter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeParameter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityParameterByStrategyOneSide struct {
	// Amount of X token or Y token to deposit
	Amount uint64

	// Active bin that integrator observe off-chain
	ActiveId int32

	// max active bin slippage allowed
	MaxActiveBinSlippage int32

	// strategy parameters
	StrategyParameters StrategyParameters
}

func (obj LiquidityParameterByStrategyOneSide) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `MaxActiveBinSlippage` param:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Serialize `StrategyParameters` param:
	err = encoder.Encode(obj.StrategyParameters)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityParameterByStrategyOneSide) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Deserialize `StrategyParameters`:
	err = decoder.Decode(&obj.StrategyParameters)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityParameterByStrategy struct {
	// Amount of X token to deposit
	AmountX uint64

	// Amount of Y token to deposit
	AmountY uint64

	// Active bin that integrator observe off-chain
	ActiveId int32

	// max active bin slippage allowed
	MaxActiveBinSlippage int32

	// strategy parameters
	StrategyParameters StrategyParameters
}

func (obj LiquidityParameterByStrategy) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountX` param:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return err
	}
	// Serialize `AmountY` param:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `MaxActiveBinSlippage` param:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Serialize `StrategyParameters` param:
	err = encoder.Encode(obj.StrategyParameters)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityParameterByStrategy) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return err
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Deserialize `StrategyParameters`:
	err = decoder.Decode(&obj.StrategyParameters)
	if err != nil {
		return err
	}
	return nil
}

type StrategyParameters struct {
	// min bin id
	MinBinId int32

	// max bin id
	MaxBinId int32

	// strategy type
	StrategyType StrategyType

	// parameters
	Parameteres [64]uint8
}

func (obj StrategyParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinBinId` param:
	err = encoder.Encode(obj.MinBinId)
	if err != nil {
		return err
	}
	// Serialize `MaxBinId` param:
	err = encoder.Encode(obj.MaxBinId)
	if err != nil {
		return err
	}
	// Serialize `StrategyType` param:
	err = encoder.Encode(obj.StrategyType)
	if err != nil {
		return err
	}
	// Serialize `Parameteres` param:
	err = encoder.Encode(obj.Parameteres)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StrategyParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinBinId`:
	err = decoder.Decode(&obj.MinBinId)
	if err != nil {
		return err
	}
	// Deserialize `MaxBinId`:
	err = decoder.Decode(&obj.MaxBinId)
	if err != nil {
		return err
	}
	// Deserialize `StrategyType`:
	err = decoder.Decode(&obj.StrategyType)
	if err != nil {
		return err
	}
	// Deserialize `Parameteres`:
	err = decoder.Decode(&obj.Parameteres)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityOneSideParameter struct {
	// Amount of X token or Y token to deposit
	Amount uint64

	// Active bin that integrator observe off-chain
	ActiveId int32

	// max active bin slippage allowed
	MaxActiveBinSlippage int32

	// Liquidity distribution to each bins
	BinLiquidityDist []BinLiquidityDistributionByWeight
}

func (obj LiquidityOneSideParameter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `MaxActiveBinSlippage` param:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Serialize `BinLiquidityDist` param:
	err = encoder.Encode(obj.BinLiquidityDist)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityOneSideParameter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Deserialize `BinLiquidityDist`:
	err = decoder.Decode(&obj.BinLiquidityDist)
	if err != nil {
		return err
	}
	return nil
}

type BinLiquidityDistributionByWeight struct {
	// Define the bin ID wish to deposit to.
	BinId int32

	// weight of liquidity distributed for this bin id
	Weight uint16
}

func (obj BinLiquidityDistributionByWeight) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinId` param:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return err
	}
	// Serialize `Weight` param:
	err = encoder.Encode(obj.Weight)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinLiquidityDistributionByWeight) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return err
	}
	// Deserialize `Weight`:
	err = decoder.Decode(&obj.Weight)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityParameterByWeight struct {
	// Amount of X token to deposit
	AmountX uint64

	// Amount of Y token to deposit
	AmountY uint64

	// Active bin that integrator observe off-chain
	ActiveId int32

	// max active bin slippage allowed
	MaxActiveBinSlippage int32

	// Liquidity distribution to each bins
	BinLiquidityDist []BinLiquidityDistributionByWeight
}

func (obj LiquidityParameterByWeight) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountX` param:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return err
	}
	// Serialize `AmountY` param:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `MaxActiveBinSlippage` param:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Serialize `BinLiquidityDist` param:
	err = encoder.Encode(obj.BinLiquidityDist)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityParameterByWeight) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return err
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Deserialize `BinLiquidityDist`:
	err = decoder.Decode(&obj.BinLiquidityDist)
	if err != nil {
		return err
	}
	return nil
}

type AddLiquiditySingleSidePreciseParameter struct {
	Bins                 []CompressedBinDepositAmount
	DecompressMultiplier uint64
}

func (obj AddLiquiditySingleSidePreciseParameter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bins` param:
	err = encoder.Encode(obj.Bins)
	if err != nil {
		return err
	}
	// Serialize `DecompressMultiplier` param:
	err = encoder.Encode(obj.DecompressMultiplier)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AddLiquiditySingleSidePreciseParameter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bins`:
	err = decoder.Decode(&obj.Bins)
	if err != nil {
		return err
	}
	// Deserialize `DecompressMultiplier`:
	err = decoder.Decode(&obj.DecompressMultiplier)
	if err != nil {
		return err
	}
	return nil
}

type CompressedBinDepositAmount struct {
	BinId  int32
	Amount uint32
}

func (obj CompressedBinDepositAmount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinId` param:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CompressedBinDepositAmount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type BinLiquidityDistribution struct {
	// Define the bin ID wish to deposit to.
	BinId int32

	// DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin.
	DistributionX uint16

	// DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin.
	DistributionY uint16
}

func (obj BinLiquidityDistribution) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinId` param:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return err
	}
	// Serialize `DistributionX` param:
	err = encoder.Encode(obj.DistributionX)
	if err != nil {
		return err
	}
	// Serialize `DistributionY` param:
	err = encoder.Encode(obj.DistributionY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinLiquidityDistribution) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return err
	}
	// Deserialize `DistributionX`:
	err = decoder.Decode(&obj.DistributionX)
	if err != nil {
		return err
	}
	// Deserialize `DistributionY`:
	err = decoder.Decode(&obj.DistributionY)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityParameter struct {
	// Amount of X token to deposit
	AmountX uint64

	// Amount of Y token to deposit
	AmountY uint64

	// Liquidity distribution to each bins
	BinLiquidityDist []BinLiquidityDistribution
}

func (obj LiquidityParameter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountX` param:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return err
	}
	// Serialize `AmountY` param:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return err
	}
	// Serialize `BinLiquidityDist` param:
	err = encoder.Encode(obj.BinLiquidityDist)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityParameter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return err
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return err
	}
	// Deserialize `BinLiquidityDist`:
	err = decoder.Decode(&obj.BinLiquidityDist)
	if err != nil {
		return err
	}
	return nil
}

type CustomizableParams struct {
	// Pool price
	ActiveId int32

	// Bin step
	BinStep uint16

	// Base factor
	BaseFactor uint16

	// Activation type. 0 = Slot, 1 = Time. Check ActivationType enum
	ActivationType uint8

	// Whether the pool has an alpha vault
	HasAlphaVault bool

	// Decide when does the pool start trade. None = Now
	ActivationPoint *uint64 `bin:"optional"`

	// Padding, for future use
	Padding [64]uint8
}

func (obj CustomizableParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `HasAlphaVault` param:
	err = encoder.Encode(obj.HasAlphaVault)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param (optional):
	{
		if obj.ActivationPoint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ActivationPoint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CustomizableParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `HasAlphaVault`:
	err = decoder.Decode(&obj.HasAlphaVault)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ActivationPoint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type InitPermissionPairIx struct {
	ActiveId       int32
	BinStep        uint16
	BaseFactor     uint16
	MinBinId       int32
	MaxBinId       int32
	ActivationType uint8
}

func (obj InitPermissionPairIx) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `MinBinId` param:
	err = encoder.Encode(obj.MinBinId)
	if err != nil {
		return err
	}
	// Serialize `MaxBinId` param:
	err = encoder.Encode(obj.MaxBinId)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitPermissionPairIx) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `MinBinId`:
	err = decoder.Decode(&obj.MinBinId)
	if err != nil {
		return err
	}
	// Deserialize `MaxBinId`:
	err = decoder.Decode(&obj.MaxBinId)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	return nil
}

type BinLiquidityReduction struct {
	BinId       int32
	BpsToRemove uint16
}

func (obj BinLiquidityReduction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinId` param:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return err
	}
	// Serialize `BpsToRemove` param:
	err = encoder.Encode(obj.BpsToRemove)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinLiquidityReduction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return err
	}
	// Deserialize `BpsToRemove`:
	err = decoder.Decode(&obj.BpsToRemove)
	if err != nil {
		return err
	}
	return nil
}

type Bin struct {
	// Amount of token X in the bin. This already excluded protocol fees.
	AmountX uint64

	// Amount of token Y in the bin. This already excluded protocol fees.
	AmountY uint64

	// Bin price
	Price ag_binary.Uint128

	// Liquidities of the bin. This is the same as LP mint supply. q-number
	LiquiditySupply ag_binary.Uint128

	// reward_a_per_token_stored
	RewardPerTokenStored [2]ag_binary.Uint128

	// Swap fee amount of token X per liquidity deposited.
	FeeAmountXPerTokenStored ag_binary.Uint128

	// Swap fee amount of token Y per liquidity deposited.
	FeeAmountYPerTokenStored ag_binary.Uint128

	// Total token X swap into the bin. Only used for tracking purpose.
	AmountXIn ag_binary.Uint128

	// Total token Y swap into he bin. Only used for tracking purpose.
	AmountYIn ag_binary.Uint128
}

func (obj Bin) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountX` param:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return err
	}
	// Serialize `AmountY` param:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `LiquiditySupply` param:
	err = encoder.Encode(obj.LiquiditySupply)
	if err != nil {
		return err
	}
	// Serialize `RewardPerTokenStored` param:
	err = encoder.Encode(obj.RewardPerTokenStored)
	if err != nil {
		return err
	}
	// Serialize `FeeAmountXPerTokenStored` param:
	err = encoder.Encode(obj.FeeAmountXPerTokenStored)
	if err != nil {
		return err
	}
	// Serialize `FeeAmountYPerTokenStored` param:
	err = encoder.Encode(obj.FeeAmountYPerTokenStored)
	if err != nil {
		return err
	}
	// Serialize `AmountXIn` param:
	err = encoder.Encode(obj.AmountXIn)
	if err != nil {
		return err
	}
	// Serialize `AmountYIn` param:
	err = encoder.Encode(obj.AmountYIn)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Bin) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return err
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `LiquiditySupply`:
	err = decoder.Decode(&obj.LiquiditySupply)
	if err != nil {
		return err
	}
	// Deserialize `RewardPerTokenStored`:
	err = decoder.Decode(&obj.RewardPerTokenStored)
	if err != nil {
		return err
	}
	// Deserialize `FeeAmountXPerTokenStored`:
	err = decoder.Decode(&obj.FeeAmountXPerTokenStored)
	if err != nil {
		return err
	}
	// Deserialize `FeeAmountYPerTokenStored`:
	err = decoder.Decode(&obj.FeeAmountYPerTokenStored)
	if err != nil {
		return err
	}
	// Deserialize `AmountXIn`:
	err = decoder.Decode(&obj.AmountXIn)
	if err != nil {
		return err
	}
	// Deserialize `AmountYIn`:
	err = decoder.Decode(&obj.AmountYIn)
	if err != nil {
		return err
	}
	return nil
}

type ProtocolFee struct {
	AmountX uint64
	AmountY uint64
}

func (obj ProtocolFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountX` param:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return err
	}
	// Serialize `AmountY` param:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProtocolFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return err
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return err
	}
	return nil
}

type RewardInfo struct {
	// Reward token mint.
	Mint ag_solanago.PublicKey

	// Reward vault token account.
	Vault ag_solanago.PublicKey

	// Authority account that allows to fund rewards
	Funder ag_solanago.PublicKey

	// TODO check whether we need to store it in pool
	RewardDuration uint64

	// TODO check whether we need to store it in pool
	RewardDurationEnd uint64

	// TODO check whether we need to store it in pool
	RewardRate ag_binary.Uint128

	// The last time reward states were updated.
	LastUpdateTime uint64

	// Accumulated seconds where when farm distribute rewards, but the bin is empty. The reward will be accumulated for next reward time window.
	CumulativeSecondsWithEmptyLiquidityReward uint64
}

func (obj RewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Funder` param:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return err
	}
	// Serialize `RewardDuration` param:
	err = encoder.Encode(obj.RewardDuration)
	if err != nil {
		return err
	}
	// Serialize `RewardDurationEnd` param:
	err = encoder.Encode(obj.RewardDurationEnd)
	if err != nil {
		return err
	}
	// Serialize `RewardRate` param:
	err = encoder.Encode(obj.RewardRate)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateTime` param:
	err = encoder.Encode(obj.LastUpdateTime)
	if err != nil {
		return err
	}
	// Serialize `CumulativeSecondsWithEmptyLiquidityReward` param:
	err = encoder.Encode(obj.CumulativeSecondsWithEmptyLiquidityReward)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return err
	}
	// Deserialize `RewardDuration`:
	err = decoder.Decode(&obj.RewardDuration)
	if err != nil {
		return err
	}
	// Deserialize `RewardDurationEnd`:
	err = decoder.Decode(&obj.RewardDurationEnd)
	if err != nil {
		return err
	}
	// Deserialize `RewardRate`:
	err = decoder.Decode(&obj.RewardRate)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateTime`:
	err = decoder.Decode(&obj.LastUpdateTime)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeSecondsWithEmptyLiquidityReward`:
	err = decoder.Decode(&obj.CumulativeSecondsWithEmptyLiquidityReward)
	if err != nil {
		return err
	}
	return nil
}

type Observation struct {
	// Cumulative active bin ID
	CumulativeActiveBinId ag_binary.Int128

	// Observation sample created timestamp
	CreatedAt int64

	// Observation sample last updated timestamp
	LastUpdatedAt int64
}

func (obj Observation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CumulativeActiveBinId` param:
	err = encoder.Encode(obj.CumulativeActiveBinId)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `LastUpdatedAt` param:
	err = encoder.Encode(obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Observation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CumulativeActiveBinId`:
	err = decoder.Decode(&obj.CumulativeActiveBinId)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdatedAt`:
	err = decoder.Decode(&obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	return nil
}

type StaticParameters struct {
	// Used for base fee calculation. base_fee_rate = base_factor * bin_step
	BaseFactor uint16

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32

	// Min bin id supported by the pool based on the configured bin step.
	MinBinId int32

	// Max bin id supported by the pool based on the configured bin step.
	MaxBinId int32

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16

	// Padding for bytemuck safe alignment
	Padding [6]uint8
}

func (obj StaticParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `MinBinId` param:
	err = encoder.Encode(obj.MinBinId)
	if err != nil {
		return err
	}
	// Serialize `MaxBinId` param:
	err = encoder.Encode(obj.MaxBinId)
	if err != nil {
		return err
	}
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StaticParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `MinBinId`:
	err = decoder.Decode(&obj.MinBinId)
	if err != nil {
		return err
	}
	// Deserialize `MaxBinId`:
	err = decoder.Decode(&obj.MaxBinId)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type VariableParameters struct {
	// Volatility accumulator measure the number of bin crossed since reference bin ID. Normally (without filter period taken into consideration), reference bin ID is the active bin of last swap.
	// It affects the variable fee rate
	VolatilityAccumulator uint32

	// Volatility reference is decayed volatility accumulator. It is always <= volatility_accumulator
	VolatilityReference uint32

	// Active bin id of last swap.
	IndexReference int32

	// Padding for bytemuck safe alignment
	Padding [4]uint8

	// Last timestamp the variable parameters was updated
	LastUpdateTimestamp int64

	// Padding for bytemuck safe alignment
	Padding1 [8]uint8
}

func (obj VariableParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VolatilityAccumulator` param:
	err = encoder.Encode(obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `VolatilityReference` param:
	err = encoder.Encode(obj.VolatilityReference)
	if err != nil {
		return err
	}
	// Serialize `IndexReference` param:
	err = encoder.Encode(obj.IndexReference)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateTimestamp` param:
	err = encoder.Encode(obj.LastUpdateTimestamp)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VariableParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VolatilityAccumulator`:
	err = decoder.Decode(&obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `VolatilityReference`:
	err = decoder.Decode(&obj.VolatilityReference)
	if err != nil {
		return err
	}
	// Deserialize `IndexReference`:
	err = decoder.Decode(&obj.IndexReference)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateTimestamp`:
	err = decoder.Decode(&obj.LastUpdateTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	return nil
}

type FeeInfo struct {
	FeeXPerTokenComplete ag_binary.Uint128
	FeeYPerTokenComplete ag_binary.Uint128
	FeeXPending          uint64
	FeeYPending          uint64
}

func (obj FeeInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeXPerTokenComplete` param:
	err = encoder.Encode(obj.FeeXPerTokenComplete)
	if err != nil {
		return err
	}
	// Serialize `FeeYPerTokenComplete` param:
	err = encoder.Encode(obj.FeeYPerTokenComplete)
	if err != nil {
		return err
	}
	// Serialize `FeeXPending` param:
	err = encoder.Encode(obj.FeeXPending)
	if err != nil {
		return err
	}
	// Serialize `FeeYPending` param:
	err = encoder.Encode(obj.FeeYPending)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeXPerTokenComplete`:
	err = decoder.Decode(&obj.FeeXPerTokenComplete)
	if err != nil {
		return err
	}
	// Deserialize `FeeYPerTokenComplete`:
	err = decoder.Decode(&obj.FeeYPerTokenComplete)
	if err != nil {
		return err
	}
	// Deserialize `FeeXPending`:
	err = decoder.Decode(&obj.FeeXPending)
	if err != nil {
		return err
	}
	// Deserialize `FeeYPending`:
	err = decoder.Decode(&obj.FeeYPending)
	if err != nil {
		return err
	}
	return nil
}

type UserRewardInfo struct {
	RewardPerTokenCompletes [2]ag_binary.Uint128
	RewardPendings          [2]uint64
}

func (obj UserRewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardPerTokenCompletes` param:
	err = encoder.Encode(obj.RewardPerTokenCompletes)
	if err != nil {
		return err
	}
	// Serialize `RewardPendings` param:
	err = encoder.Encode(obj.RewardPendings)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserRewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardPerTokenCompletes`:
	err = decoder.Decode(&obj.RewardPerTokenCompletes)
	if err != nil {
		return err
	}
	// Deserialize `RewardPendings`:
	err = decoder.Decode(&obj.RewardPendings)
	if err != nil {
		return err
	}
	return nil
}

type StrategyType ag_binary.BorshEnum

const (
	StrategyTypeSpotOneSide StrategyType = iota
	StrategyTypeCurveOneSide
	StrategyTypeBidAskOneSide
	StrategyTypeSpotBalanced
	StrategyTypeCurveBalanced
	StrategyTypeBidAskBalanced
	StrategyTypeSpotImBalanced
	StrategyTypeCurveImBalanced
	StrategyTypeBidAskImBalanced
)

func (value StrategyType) String() string {
	switch value {
	case StrategyTypeSpotOneSide:
		return "SpotOneSide"
	case StrategyTypeCurveOneSide:
		return "CurveOneSide"
	case StrategyTypeBidAskOneSide:
		return "BidAskOneSide"
	case StrategyTypeSpotBalanced:
		return "SpotBalanced"
	case StrategyTypeCurveBalanced:
		return "CurveBalanced"
	case StrategyTypeBidAskBalanced:
		return "BidAskBalanced"
	case StrategyTypeSpotImBalanced:
		return "SpotImBalanced"
	case StrategyTypeCurveImBalanced:
		return "CurveImBalanced"
	case StrategyTypeBidAskImBalanced:
		return "BidAskImBalanced"
	default:
		return ""
	}
}

type Rounding ag_binary.BorshEnum

const (
	RoundingUp Rounding = iota
	RoundingDown
)

func (value Rounding) String() string {
	switch value {
	case RoundingUp:
		return "Up"
	case RoundingDown:
		return "Down"
	default:
		return ""
	}
}

type ActivationType ag_binary.BorshEnum

const (
	ActivationTypeSlot ActivationType = iota
	ActivationTypeTimestamp
)

func (value ActivationType) String() string {
	switch value {
	case ActivationTypeSlot:
		return "Slot"
	case ActivationTypeTimestamp:
		return "Timestamp"
	default:
		return ""
	}
}

type LayoutVersion ag_binary.BorshEnum

const (
	LayoutVersionV0 LayoutVersion = iota
	LayoutVersionV1
)

func (value LayoutVersion) String() string {
	switch value {
	case LayoutVersionV0:
		return "V0"
	case LayoutVersionV1:
		return "V1"
	default:
		return ""
	}
}

type PairType ag_binary.BorshEnum

const (
	PairTypePermissionless PairType = iota
	PairTypePermission
	PairTypeCustomizablePermissionless
)

func (value PairType) String() string {
	switch value {
	case PairTypePermissionless:
		return "Permissionless"
	case PairTypePermission:
		return "Permission"
	case PairTypeCustomizablePermissionless:
		return "CustomizablePermissionless"
	default:
		return ""
	}
}

type PairStatus ag_binary.BorshEnum

const (
	PairStatusEnabled PairStatus = iota
	PairStatusDisabled
)

func (value PairStatus) String() string {
	switch value {
	case PairStatusEnabled:
		return "Enabled"
	case PairStatusDisabled:
		return "Disabled"
	default:
		return ""
	}
}
