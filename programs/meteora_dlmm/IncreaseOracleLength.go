// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// IncreaseOracleLength is the `increaseOracleLength` instruction.
type IncreaseOracleLength struct {
	LengthToAdd *uint64

	// [0] = [WRITE] oracle
	//
	// [1] = [WRITE, SIGNER] funder
	//
	// [2] = [] systemProgram
	//
	// [3] = [] eventAuthority
	//
	// [4] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewIncreaseOracleLengthInstructionBuilder creates a new `IncreaseOracleLength` instruction builder.
func NewIncreaseOracleLengthInstructionBuilder() *IncreaseOracleLength {
	nd := &IncreaseOracleLength{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetLengthToAdd sets the "lengthToAdd" parameter.
func (inst *IncreaseOracleLength) SetLengthToAdd(lengthToAdd uint64) *IncreaseOracleLength {
	inst.LengthToAdd = &lengthToAdd
	return inst
}

// SetOracleAccount sets the "oracle" account.
func (inst *IncreaseOracleLength) SetOracleAccount(oracle ag_solanago.PublicKey) *IncreaseOracleLength {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle).WRITE()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *IncreaseOracleLength) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFunderAccount sets the "funder" account.
func (inst *IncreaseOracleLength) SetFunderAccount(funder ag_solanago.PublicKey) *IncreaseOracleLength {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(funder).WRITE().SIGNER()
	return inst
}

// GetFunderAccount gets the "funder" account.
func (inst *IncreaseOracleLength) GetFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *IncreaseOracleLength) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *IncreaseOracleLength {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *IncreaseOracleLength) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEventAuthorityAccount sets the "eventAuthority" account.
func (inst *IncreaseOracleLength) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *IncreaseOracleLength {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "eventAuthority" account.
func (inst *IncreaseOracleLength) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramAccount sets the "program" account.
func (inst *IncreaseOracleLength) SetProgramAccount(program ag_solanago.PublicKey) *IncreaseOracleLength {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *IncreaseOracleLength) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst IncreaseOracleLength) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_IncreaseOracleLength,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst IncreaseOracleLength) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *IncreaseOracleLength) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LengthToAdd == nil {
			return errors.New("LengthToAdd parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Funder is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *IncreaseOracleLength) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("IncreaseOracleLength")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("LengthToAdd", *inst.LengthToAdd))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        funder", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("eventAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj IncreaseOracleLength) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LengthToAdd` param:
	err = encoder.Encode(obj.LengthToAdd)
	if err != nil {
		return err
	}
	return nil
}
func (obj *IncreaseOracleLength) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LengthToAdd`:
	err = decoder.Decode(&obj.LengthToAdd)
	if err != nil {
		return err
	}
	return nil
}

// NewIncreaseOracleLengthInstruction declares a new IncreaseOracleLength instruction with the provided parameters and accounts.
func NewIncreaseOracleLengthInstruction(
	// Parameters:
	lengthToAdd uint64,
	// Accounts:
	oracle ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *IncreaseOracleLength {
	return NewIncreaseOracleLengthInstructionBuilder().
		SetLengthToAdd(lengthToAdd).
		SetOracleAccount(oracle).
		SetFunderAccount(funder).
		SetSystemProgramAccount(systemProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
