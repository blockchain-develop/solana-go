// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "MeteoraDlmm"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_InitializeLbPair = ag_binary.TypeID([8]byte{45, 154, 237, 210, 221, 15, 166, 92})

	Instruction_InitializePermissionLbPair = ag_binary.TypeID([8]byte{108, 102, 213, 85, 251, 3, 53, 21})

	Instruction_InitializeCustomizablePermissionlessLbPair = ag_binary.TypeID([8]byte{46, 39, 41, 135, 111, 183, 200, 64})

	Instruction_InitializeBinArrayBitmapExtension = ag_binary.TypeID([8]byte{47, 157, 226, 180, 12, 240, 33, 71})

	Instruction_InitializeBinArray = ag_binary.TypeID([8]byte{35, 86, 19, 185, 78, 212, 75, 211})

	Instruction_AddLiquidity = ag_binary.TypeID([8]byte{181, 157, 89, 67, 143, 182, 52, 72})

	Instruction_AddLiquidityByWeight = ag_binary.TypeID([8]byte{28, 140, 238, 99, 231, 162, 21, 149})

	Instruction_AddLiquidityByStrategy = ag_binary.TypeID([8]byte{7, 3, 150, 127, 148, 40, 61, 200})

	Instruction_AddLiquidityByStrategyOneSide = ag_binary.TypeID([8]byte{41, 5, 238, 175, 100, 225, 6, 205})

	Instruction_AddLiquidityOneSide = ag_binary.TypeID([8]byte{94, 155, 103, 151, 70, 95, 220, 165})

	Instruction_RemoveLiquidity = ag_binary.TypeID([8]byte{80, 85, 209, 72, 24, 206, 177, 108})

	Instruction_InitializePosition = ag_binary.TypeID([8]byte{219, 192, 234, 71, 190, 191, 102, 80})

	Instruction_InitializePositionPda = ag_binary.TypeID([8]byte{46, 82, 125, 146, 85, 141, 228, 153})

	Instruction_InitializePositionByOperator = ag_binary.TypeID([8]byte{251, 189, 190, 244, 117, 254, 35, 148})

	Instruction_UpdatePositionOperator = ag_binary.TypeID([8]byte{202, 184, 103, 143, 180, 191, 116, 217})

	Instruction_Swap = ag_binary.TypeID([8]byte{248, 198, 158, 145, 225, 117, 135, 200})

	Instruction_SwapExactOut = ag_binary.TypeID([8]byte{250, 73, 101, 33, 38, 207, 75, 184})

	Instruction_SwapWithPriceImpact = ag_binary.TypeID([8]byte{56, 173, 230, 208, 173, 228, 156, 205})

	Instruction_WithdrawProtocolFee = ag_binary.TypeID([8]byte{158, 201, 158, 189, 33, 93, 162, 103})

	Instruction_InitializeReward = ag_binary.TypeID([8]byte{95, 135, 192, 196, 242, 129, 230, 68})

	Instruction_FundReward = ag_binary.TypeID([8]byte{188, 50, 249, 165, 93, 151, 38, 63})

	Instruction_UpdateRewardFunder = ag_binary.TypeID([8]byte{211, 28, 48, 32, 215, 160, 35, 23})

	Instruction_UpdateRewardDuration = ag_binary.TypeID([8]byte{138, 174, 196, 169, 213, 235, 254, 107})

	Instruction_ClaimReward = ag_binary.TypeID([8]byte{149, 95, 181, 242, 94, 90, 158, 162})

	Instruction_ClaimFee = ag_binary.TypeID([8]byte{169, 32, 79, 137, 136, 232, 70, 137})

	Instruction_ClosePosition = ag_binary.TypeID([8]byte{123, 134, 81, 0, 49, 68, 98, 98})

	Instruction_UpdateFeeParameters = ag_binary.TypeID([8]byte{128, 128, 208, 91, 246, 53, 31, 176})

	Instruction_IncreaseOracleLength = ag_binary.TypeID([8]byte{190, 61, 125, 87, 103, 79, 158, 173})

	Instruction_InitializePresetParameter = ag_binary.TypeID([8]byte{66, 188, 71, 211, 98, 109, 14, 186})

	Instruction_ClosePresetParameter = ag_binary.TypeID([8]byte{4, 148, 145, 100, 134, 26, 181, 61})

	Instruction_RemoveAllLiquidity = ag_binary.TypeID([8]byte{10, 51, 61, 35, 112, 105, 24, 85})

	Instruction_TogglePairStatus = ag_binary.TypeID([8]byte{61, 115, 52, 23, 46, 13, 31, 144})

	Instruction_MigratePosition = ag_binary.TypeID([8]byte{15, 132, 59, 50, 199, 6, 251, 46})

	Instruction_MigrateBinArray = ag_binary.TypeID([8]byte{17, 23, 159, 211, 101, 184, 41, 241})

	Instruction_UpdateFeesAndRewards = ag_binary.TypeID([8]byte{154, 230, 250, 13, 236, 209, 75, 223})

	Instruction_WithdrawIneligibleReward = ag_binary.TypeID([8]byte{148, 206, 42, 195, 247, 49, 103, 8})

	Instruction_SetActivationPoint = ag_binary.TypeID([8]byte{91, 249, 15, 165, 26, 129, 254, 125})

	Instruction_RemoveLiquidityByRange = ag_binary.TypeID([8]byte{26, 82, 102, 152, 240, 74, 105, 26})

	Instruction_AddLiquidityOneSidePrecise = ag_binary.TypeID([8]byte{161, 194, 103, 84, 171, 71, 250, 154})

	Instruction_GoToABin = ag_binary.TypeID([8]byte{146, 72, 174, 224, 40, 253, 84, 174})

	Instruction_SetPreActivationDuration = ag_binary.TypeID([8]byte{165, 61, 201, 244, 130, 159, 22, 100})

	Instruction_SetPreActivationSwapAddress = ag_binary.TypeID([8]byte{57, 139, 47, 123, 216, 80, 223, 10})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_InitializeLbPair:
		return "InitializeLbPair"
	case Instruction_InitializePermissionLbPair:
		return "InitializePermissionLbPair"
	case Instruction_InitializeCustomizablePermissionlessLbPair:
		return "InitializeCustomizablePermissionlessLbPair"
	case Instruction_InitializeBinArrayBitmapExtension:
		return "InitializeBinArrayBitmapExtension"
	case Instruction_InitializeBinArray:
		return "InitializeBinArray"
	case Instruction_AddLiquidity:
		return "AddLiquidity"
	case Instruction_AddLiquidityByWeight:
		return "AddLiquidityByWeight"
	case Instruction_AddLiquidityByStrategy:
		return "AddLiquidityByStrategy"
	case Instruction_AddLiquidityByStrategyOneSide:
		return "AddLiquidityByStrategyOneSide"
	case Instruction_AddLiquidityOneSide:
		return "AddLiquidityOneSide"
	case Instruction_RemoveLiquidity:
		return "RemoveLiquidity"
	case Instruction_InitializePosition:
		return "InitializePosition"
	case Instruction_InitializePositionPda:
		return "InitializePositionPda"
	case Instruction_InitializePositionByOperator:
		return "InitializePositionByOperator"
	case Instruction_UpdatePositionOperator:
		return "UpdatePositionOperator"
	case Instruction_Swap:
		return "Swap"
	case Instruction_SwapExactOut:
		return "SwapExactOut"
	case Instruction_SwapWithPriceImpact:
		return "SwapWithPriceImpact"
	case Instruction_WithdrawProtocolFee:
		return "WithdrawProtocolFee"
	case Instruction_InitializeReward:
		return "InitializeReward"
	case Instruction_FundReward:
		return "FundReward"
	case Instruction_UpdateRewardFunder:
		return "UpdateRewardFunder"
	case Instruction_UpdateRewardDuration:
		return "UpdateRewardDuration"
	case Instruction_ClaimReward:
		return "ClaimReward"
	case Instruction_ClaimFee:
		return "ClaimFee"
	case Instruction_ClosePosition:
		return "ClosePosition"
	case Instruction_UpdateFeeParameters:
		return "UpdateFeeParameters"
	case Instruction_IncreaseOracleLength:
		return "IncreaseOracleLength"
	case Instruction_InitializePresetParameter:
		return "InitializePresetParameter"
	case Instruction_ClosePresetParameter:
		return "ClosePresetParameter"
	case Instruction_RemoveAllLiquidity:
		return "RemoveAllLiquidity"
	case Instruction_TogglePairStatus:
		return "TogglePairStatus"
	case Instruction_MigratePosition:
		return "MigratePosition"
	case Instruction_MigrateBinArray:
		return "MigrateBinArray"
	case Instruction_UpdateFeesAndRewards:
		return "UpdateFeesAndRewards"
	case Instruction_WithdrawIneligibleReward:
		return "WithdrawIneligibleReward"
	case Instruction_SetActivationPoint:
		return "SetActivationPoint"
	case Instruction_RemoveLiquidityByRange:
		return "RemoveLiquidityByRange"
	case Instruction_AddLiquidityOneSidePrecise:
		return "AddLiquidityOneSidePrecise"
	case Instruction_GoToABin:
		return "GoToABin"
	case Instruction_SetPreActivationDuration:
		return "SetPreActivationDuration"
	case Instruction_SetPreActivationSwapAddress:
		return "SetPreActivationSwapAddress"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize_lb_pair", (*InitializeLbPair)(nil),
		},
		{
			"initialize_permission_lb_pair", (*InitializePermissionLbPair)(nil),
		},
		{
			"initialize_customizable_permissionless_lb_pair", (*InitializeCustomizablePermissionlessLbPair)(nil),
		},
		{
			"initialize_bin_array_bitmap_extension", (*InitializeBinArrayBitmapExtension)(nil),
		},
		{
			"initialize_bin_array", (*InitializeBinArray)(nil),
		},
		{
			"add_liquidity", (*AddLiquidity)(nil),
		},
		{
			"add_liquidity_by_weight", (*AddLiquidityByWeight)(nil),
		},
		{
			"add_liquidity_by_strategy", (*AddLiquidityByStrategy)(nil),
		},
		{
			"add_liquidity_by_strategy_one_side", (*AddLiquidityByStrategyOneSide)(nil),
		},
		{
			"add_liquidity_one_side", (*AddLiquidityOneSide)(nil),
		},
		{
			"remove_liquidity", (*RemoveLiquidity)(nil),
		},
		{
			"initialize_position", (*InitializePosition)(nil),
		},
		{
			"initialize_position_pda", (*InitializePositionPda)(nil),
		},
		{
			"initialize_position_by_operator", (*InitializePositionByOperator)(nil),
		},
		{
			"update_position_operator", (*UpdatePositionOperator)(nil),
		},
		{
			"swap", (*Swap)(nil),
		},
		{
			"swap_exact_out", (*SwapExactOut)(nil),
		},
		{
			"swap_with_price_impact", (*SwapWithPriceImpact)(nil),
		},
		{
			"withdraw_protocol_fee", (*WithdrawProtocolFee)(nil),
		},
		{
			"initialize_reward", (*InitializeReward)(nil),
		},
		{
			"fund_reward", (*FundReward)(nil),
		},
		{
			"update_reward_funder", (*UpdateRewardFunder)(nil),
		},
		{
			"update_reward_duration", (*UpdateRewardDuration)(nil),
		},
		{
			"claim_reward", (*ClaimReward)(nil),
		},
		{
			"claim_fee", (*ClaimFee)(nil),
		},
		{
			"close_position", (*ClosePosition)(nil),
		},
		{
			"update_fee_parameters", (*UpdateFeeParameters)(nil),
		},
		{
			"increase_oracle_length", (*IncreaseOracleLength)(nil),
		},
		{
			"initialize_preset_parameter", (*InitializePresetParameter)(nil),
		},
		{
			"close_preset_parameter", (*ClosePresetParameter)(nil),
		},
		{
			"remove_all_liquidity", (*RemoveAllLiquidity)(nil),
		},
		{
			"toggle_pair_status", (*TogglePairStatus)(nil),
		},
		{
			"migrate_position", (*MigratePosition)(nil),
		},
		{
			"migrate_bin_array", (*MigrateBinArray)(nil),
		},
		{
			"update_fees_and_rewards", (*UpdateFeesAndRewards)(nil),
		},
		{
			"withdraw_ineligible_reward", (*WithdrawIneligibleReward)(nil),
		},
		{
			"set_activation_point", (*SetActivationPoint)(nil),
		},
		{
			"remove_liquidity_by_range", (*RemoveLiquidityByRange)(nil),
		},
		{
			"add_liquidity_one_side_precise", (*AddLiquidityOneSidePrecise)(nil),
		},
		{
			"go_to_a_bin", (*GoToABin)(nil),
		},
		{
			"set_pre_activation_duration", (*SetPreActivationDuration)(nil),
		},
		{
			"set_pre_activation_swap_address", (*SetPreActivationSwapAddress)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
