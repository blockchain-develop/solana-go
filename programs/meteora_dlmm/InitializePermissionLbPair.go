// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializePermissionLbPair is the `initializePermissionLbPair` instruction.
type InitializePermissionLbPair struct {
	IxData *InitPermissionPairIx

	// [0] = [SIGNER] base
	//
	// [1] = [WRITE] lbPair
	//
	// [2] = [WRITE] binArrayBitmapExtension
	//
	// [3] = [] tokenMintX
	//
	// [4] = [] tokenMintY
	//
	// [5] = [WRITE] reserveX
	//
	// [6] = [WRITE] reserveY
	//
	// [7] = [WRITE] oracle
	//
	// [8] = [WRITE, SIGNER] admin
	//
	// [9] = [] tokenProgram
	//
	// [10] = [] systemProgram
	//
	// [11] = [] rent
	//
	// [12] = [] eventAuthority
	//
	// [13] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializePermissionLbPairInstructionBuilder creates a new `InitializePermissionLbPair` instruction builder.
func NewInitializePermissionLbPairInstructionBuilder() *InitializePermissionLbPair {
	nd := &InitializePermissionLbPair{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetIxData sets the "ixData" parameter.
func (inst *InitializePermissionLbPair) SetIxData(ixData InitPermissionPairIx) *InitializePermissionLbPair {
	inst.IxData = &ixData
	return inst
}

// SetBaseAccount sets the "base" account.
func (inst *InitializePermissionLbPair) SetBaseAccount(base ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(base).SIGNER()
	return inst
}

// GetBaseAccount gets the "base" account.
func (inst *InitializePermissionLbPair) GetBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLbPairAccount sets the "lbPair" account.
func (inst *InitializePermissionLbPair) SetLbPairAccount(lbPair ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(lbPair).WRITE()
	return inst
}

// GetLbPairAccount gets the "lbPair" account.
func (inst *InitializePermissionLbPair) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBinArrayBitmapExtensionAccount sets the "binArrayBitmapExtension" account.
func (inst *InitializePermissionLbPair) SetBinArrayBitmapExtensionAccount(binArrayBitmapExtension ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(binArrayBitmapExtension).WRITE()
	return inst
}

// GetBinArrayBitmapExtensionAccount gets the "binArrayBitmapExtension" account.
func (inst *InitializePermissionLbPair) GetBinArrayBitmapExtensionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenMintXAccount sets the "tokenMintX" account.
func (inst *InitializePermissionLbPair) SetTokenMintXAccount(tokenMintX ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenMintX)
	return inst
}

// GetTokenMintXAccount gets the "tokenMintX" account.
func (inst *InitializePermissionLbPair) GetTokenMintXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenMintYAccount sets the "tokenMintY" account.
func (inst *InitializePermissionLbPair) SetTokenMintYAccount(tokenMintY ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenMintY)
	return inst
}

// GetTokenMintYAccount gets the "tokenMintY" account.
func (inst *InitializePermissionLbPair) GetTokenMintYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReserveXAccount sets the "reserveX" account.
func (inst *InitializePermissionLbPair) SetReserveXAccount(reserveX ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(reserveX).WRITE()
	return inst
}

// GetReserveXAccount gets the "reserveX" account.
func (inst *InitializePermissionLbPair) GetReserveXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetReserveYAccount sets the "reserveY" account.
func (inst *InitializePermissionLbPair) SetReserveYAccount(reserveY ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(reserveY).WRITE()
	return inst
}

// GetReserveYAccount gets the "reserveY" account.
func (inst *InitializePermissionLbPair) GetReserveYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetOracleAccount sets the "oracle" account.
func (inst *InitializePermissionLbPair) SetOracleAccount(oracle ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(oracle).WRITE()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *InitializePermissionLbPair) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAdminAccount sets the "admin" account.
func (inst *InitializePermissionLbPair) SetAdminAccount(admin ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *InitializePermissionLbPair) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *InitializePermissionLbPair) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *InitializePermissionLbPair) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializePermissionLbPair) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializePermissionLbPair) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializePermissionLbPair) SetRentAccount(rent ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializePermissionLbPair) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetEventAuthorityAccount sets the "eventAuthority" account.
func (inst *InitializePermissionLbPair) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "eventAuthority" account.
func (inst *InitializePermissionLbPair) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetProgramAccount sets the "program" account.
func (inst *InitializePermissionLbPair) SetProgramAccount(program ag_solanago.PublicKey) *InitializePermissionLbPair {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *InitializePermissionLbPair) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst InitializePermissionLbPair) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializePermissionLbPair,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializePermissionLbPair) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializePermissionLbPair) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.IxData == nil {
			return errors.New("IxData parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Base is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LbPair is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.BinArrayBitmapExtension is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenMintX is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenMintY is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ReserveX is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ReserveY is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *InitializePermissionLbPair) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializePermissionLbPair")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("IxData", *inst.IxData))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   base", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 lbPair", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("binArrayBitmapExtension", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             tokenMintX", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             tokenMintY", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("               reserveX", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("               reserveY", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                 oracle", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                  admin", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          systemProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                   rent", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("         eventAuthority", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                program", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj InitializePermissionLbPair) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IxData` param:
	err = encoder.Encode(obj.IxData)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializePermissionLbPair) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IxData`:
	err = decoder.Decode(&obj.IxData)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializePermissionLbPairInstruction declares a new InitializePermissionLbPair instruction with the provided parameters and accounts.
func NewInitializePermissionLbPairInstruction(
	// Parameters:
	ixData InitPermissionPairIx,
	// Accounts:
	base ag_solanago.PublicKey,
	lbPair ag_solanago.PublicKey,
	binArrayBitmapExtension ag_solanago.PublicKey,
	tokenMintX ag_solanago.PublicKey,
	tokenMintY ag_solanago.PublicKey,
	reserveX ag_solanago.PublicKey,
	reserveY ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *InitializePermissionLbPair {
	return NewInitializePermissionLbPairInstructionBuilder().
		SetIxData(ixData).
		SetBaseAccount(base).
		SetLbPairAccount(lbPair).
		SetBinArrayBitmapExtensionAccount(binArrayBitmapExtension).
		SetTokenMintXAccount(tokenMintX).
		SetTokenMintYAccount(tokenMintY).
		SetReserveXAccount(reserveX).
		SetReserveYAccount(reserveY).
		SetOracleAccount(oracle).
		SetAdminAccount(admin).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
