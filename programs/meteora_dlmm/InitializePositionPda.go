// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializePositionPda is the `initializePositionPda` instruction.
type InitializePositionPda struct {
	LowerBinId *int32
	Width      *int32

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] base
	//
	// [2] = [WRITE] position
	//
	// [3] = [] lbPair
	//
	// [4] = [SIGNER] owner
	// ··········· owner
	//
	// [5] = [] systemProgram
	//
	// [6] = [] rent
	//
	// [7] = [] eventAuthority
	//
	// [8] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializePositionPdaInstructionBuilder creates a new `InitializePositionPda` instruction builder.
func NewInitializePositionPdaInstructionBuilder() *InitializePositionPda {
	nd := &InitializePositionPda{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetLowerBinId sets the "lowerBinId" parameter.
func (inst *InitializePositionPda) SetLowerBinId(lowerBinId int32) *InitializePositionPda {
	inst.LowerBinId = &lowerBinId
	return inst
}

// SetWidth sets the "width" parameter.
func (inst *InitializePositionPda) SetWidth(width int32) *InitializePositionPda {
	inst.Width = &width
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *InitializePositionPda) SetPayerAccount(payer ag_solanago.PublicKey) *InitializePositionPda {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *InitializePositionPda) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBaseAccount sets the "base" account.
func (inst *InitializePositionPda) SetBaseAccount(base ag_solanago.PublicKey) *InitializePositionPda {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(base).SIGNER()
	return inst
}

// GetBaseAccount gets the "base" account.
func (inst *InitializePositionPda) GetBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionAccount sets the "position" account.
func (inst *InitializePositionPda) SetPositionAccount(position ag_solanago.PublicKey) *InitializePositionPda {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *InitializePositionPda) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetLbPairAccount sets the "lbPair" account.
func (inst *InitializePositionPda) SetLbPairAccount(lbPair ag_solanago.PublicKey) *InitializePositionPda {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(lbPair)
	return inst
}

// GetLbPairAccount gets the "lbPair" account.
func (inst *InitializePositionPda) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOwnerAccount sets the "owner" account.
// owner
func (inst *InitializePositionPda) SetOwnerAccount(owner ag_solanago.PublicKey) *InitializePositionPda {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// owner
func (inst *InitializePositionPda) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializePositionPda) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializePositionPda {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializePositionPda) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializePositionPda) SetRentAccount(rent ag_solanago.PublicKey) *InitializePositionPda {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializePositionPda) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetEventAuthorityAccount sets the "eventAuthority" account.
func (inst *InitializePositionPda) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *InitializePositionPda {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "eventAuthority" account.
func (inst *InitializePositionPda) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetProgramAccount sets the "program" account.
func (inst *InitializePositionPda) SetProgramAccount(program ag_solanago.PublicKey) *InitializePositionPda {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *InitializePositionPda) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst InitializePositionPda) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializePositionPda,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializePositionPda) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializePositionPda) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LowerBinId == nil {
			return errors.New("LowerBinId parameter is not set")
		}
		if inst.Width == nil {
			return errors.New("Width parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Base is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.LbPair is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *InitializePositionPda) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializePositionPda")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("LowerBinId", *inst.LowerBinId))
						paramsBranch.Child(ag_format.Param("     Width", *inst.Width))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          base", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      position", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        lbPair", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         owner", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          rent", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("eventAuthority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("       program", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj InitializePositionPda) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LowerBinId` param:
	err = encoder.Encode(obj.LowerBinId)
	if err != nil {
		return err
	}
	// Serialize `Width` param:
	err = encoder.Encode(obj.Width)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializePositionPda) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LowerBinId`:
	err = decoder.Decode(&obj.LowerBinId)
	if err != nil {
		return err
	}
	// Deserialize `Width`:
	err = decoder.Decode(&obj.Width)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializePositionPdaInstruction declares a new InitializePositionPda instruction with the provided parameters and accounts.
func NewInitializePositionPdaInstruction(
	// Parameters:
	lowerBinId int32,
	width int32,
	// Accounts:
	payer ag_solanago.PublicKey,
	base ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	lbPair ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *InitializePositionPda {
	return NewInitializePositionPdaInstructionBuilder().
		SetLowerBinId(lowerBinId).
		SetWidth(width).
		SetPayerAccount(payer).
		SetBaseAccount(base).
		SetPositionAccount(position).
		SetLbPairAccount(lbPair).
		SetOwnerAccount(owner).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
