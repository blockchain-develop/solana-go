// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateRewardDuration is the `updateRewardDuration` instruction.
type UpdateRewardDuration struct {
	RewardIndex *uint64
	NewDuration *uint64

	// [0] = [WRITE] lbPair
	//
	// [1] = [SIGNER] admin
	//
	// [2] = [WRITE] binArray
	//
	// [3] = [] eventAuthority
	//
	// [4] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateRewardDurationInstructionBuilder creates a new `UpdateRewardDuration` instruction builder.
func NewUpdateRewardDurationInstructionBuilder() *UpdateRewardDuration {
	nd := &UpdateRewardDuration{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetRewardIndex sets the "rewardIndex" parameter.
func (inst *UpdateRewardDuration) SetRewardIndex(rewardIndex uint64) *UpdateRewardDuration {
	inst.RewardIndex = &rewardIndex
	return inst
}

// SetNewDuration sets the "newDuration" parameter.
func (inst *UpdateRewardDuration) SetNewDuration(newDuration uint64) *UpdateRewardDuration {
	inst.NewDuration = &newDuration
	return inst
}

// SetLbPairAccount sets the "lbPair" account.
func (inst *UpdateRewardDuration) SetLbPairAccount(lbPair ag_solanago.PublicKey) *UpdateRewardDuration {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(lbPair).WRITE()
	return inst
}

// GetLbPairAccount gets the "lbPair" account.
func (inst *UpdateRewardDuration) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateRewardDuration) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateRewardDuration {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateRewardDuration) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBinArrayAccount sets the "binArray" account.
func (inst *UpdateRewardDuration) SetBinArrayAccount(binArray ag_solanago.PublicKey) *UpdateRewardDuration {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(binArray).WRITE()
	return inst
}

// GetBinArrayAccount gets the "binArray" account.
func (inst *UpdateRewardDuration) GetBinArrayAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEventAuthorityAccount sets the "eventAuthority" account.
func (inst *UpdateRewardDuration) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *UpdateRewardDuration {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "eventAuthority" account.
func (inst *UpdateRewardDuration) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramAccount sets the "program" account.
func (inst *UpdateRewardDuration) SetProgramAccount(program ag_solanago.PublicKey) *UpdateRewardDuration {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *UpdateRewardDuration) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst UpdateRewardDuration) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateRewardDuration,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateRewardDuration) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateRewardDuration) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardIndex == nil {
			return errors.New("RewardIndex parameter is not set")
		}
		if inst.NewDuration == nil {
			return errors.New("NewDuration parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LbPair is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.BinArray is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *UpdateRewardDuration) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateRewardDuration")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("RewardIndex", *inst.RewardIndex))
						paramsBranch.Child(ag_format.Param("NewDuration", *inst.NewDuration))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        lbPair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      binArray", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("eventAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj UpdateRewardDuration) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `NewDuration` param:
	err = encoder.Encode(obj.NewDuration)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateRewardDuration) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `NewDuration`:
	err = decoder.Decode(&obj.NewDuration)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateRewardDurationInstruction declares a new UpdateRewardDuration instruction with the provided parameters and accounts.
func NewUpdateRewardDurationInstruction(
	// Parameters:
	rewardIndex uint64,
	newDuration uint64,
	// Accounts:
	lbPair ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	binArray ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *UpdateRewardDuration {
	return NewUpdateRewardDurationInstructionBuilder().
		SetRewardIndex(rewardIndex).
		SetNewDuration(newDuration).
		SetLbPairAccount(lbPair).
		SetAdminAccount(admin).
		SetBinArrayAccount(binArray).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
