// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetPreActivationDuration is the `setPreActivationDuration` instruction.
type SetPreActivationDuration struct {
	PreActivationDuration *uint64

	// [0] = [WRITE] lbPair
	//
	// [1] = [SIGNER] creator
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetPreActivationDurationInstructionBuilder creates a new `SetPreActivationDuration` instruction builder.
func NewSetPreActivationDurationInstructionBuilder() *SetPreActivationDuration {
	nd := &SetPreActivationDuration{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetPreActivationDuration sets the "preActivationDuration" parameter.
func (inst *SetPreActivationDuration) SetPreActivationDuration(preActivationDuration uint64) *SetPreActivationDuration {
	inst.PreActivationDuration = &preActivationDuration
	return inst
}

// SetLbPairAccount sets the "lbPair" account.
func (inst *SetPreActivationDuration) SetLbPairAccount(lbPair ag_solanago.PublicKey) *SetPreActivationDuration {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(lbPair).WRITE()
	return inst
}

// GetLbPairAccount gets the "lbPair" account.
func (inst *SetPreActivationDuration) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCreatorAccount sets the "creator" account.
func (inst *SetPreActivationDuration) SetCreatorAccount(creator ag_solanago.PublicKey) *SetPreActivationDuration {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(creator).SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *SetPreActivationDuration) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst SetPreActivationDuration) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetPreActivationDuration,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetPreActivationDuration) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetPreActivationDuration) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PreActivationDuration == nil {
			return errors.New("PreActivationDuration parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LbPair is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Creator is not set")
		}
	}
	return nil
}

func (inst *SetPreActivationDuration) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetPreActivationDuration")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("PreActivationDuration", *inst.PreActivationDuration))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" lbPair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("creator", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj SetPreActivationDuration) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PreActivationDuration` param:
	err = encoder.Encode(obj.PreActivationDuration)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetPreActivationDuration) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PreActivationDuration`:
	err = decoder.Decode(&obj.PreActivationDuration)
	if err != nil {
		return err
	}
	return nil
}

// NewSetPreActivationDurationInstruction declares a new SetPreActivationDuration instruction with the provided parameters and accounts.
func NewSetPreActivationDurationInstruction(
	// Parameters:
	preActivationDuration uint64,
	// Accounts:
	lbPair ag_solanago.PublicKey,
	creator ag_solanago.PublicKey) *SetPreActivationDuration {
	return NewSetPreActivationDurationInstructionBuilder().
		SetPreActivationDuration(preActivationDuration).
		SetLbPairAccount(lbPair).
		SetCreatorAccount(creator)
}
