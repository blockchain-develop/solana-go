// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Withdraw only single token from the pool. Only supported by pool with stable swap curve.
type RemoveLiquiditySingleSide struct {
	PoolTokenAmount  *uint64
	MinimumOutAmount *uint64

	// [0] = [WRITE] pool
	// ··········· Pool account (PDA)
	//
	// [1] = [WRITE] lpMint
	// ··········· LP token mint of the pool
	//
	// [2] = [WRITE] userPoolLp
	// ··········· User pool lp token account. LP will be burned from this account upon success liquidity removal.
	//
	// [3] = [WRITE] aVaultLp
	// ··········· LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	//
	// [4] = [WRITE] bVaultLp
	// ··········· LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	//
	// [5] = [WRITE] aVault
	// ··········· Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
	//
	// [6] = [WRITE] bVault
	// ··········· Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
	//
	// [7] = [WRITE] aVaultLpMint
	// ··········· LP token mint of vault A
	//
	// [8] = [WRITE] bVaultLpMint
	// ··········· LP token mint of vault B
	//
	// [9] = [WRITE] aTokenVault
	// ··········· Token vault account of vault A
	//
	// [10] = [WRITE] bTokenVault
	// ··········· Token vault account of vault B
	//
	// [11] = [WRITE] userDestinationToken
	// ··········· User token account to receive token upon success liquidity removal.
	//
	// [12] = [SIGNER] user
	// ··········· User account. Must be owner of the user_pool_lp account.
	//
	// [13] = [] vaultProgram
	// ··········· Vault program. The pool will deposit/withdraw liquidity from the vault.
	//
	// [14] = [] tokenProgram
	// ··········· Token program.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRemoveLiquiditySingleSideInstructionBuilder creates a new `RemoveLiquiditySingleSide` instruction builder.
func NewRemoveLiquiditySingleSideInstructionBuilder() *RemoveLiquiditySingleSide {
	nd := &RemoveLiquiditySingleSide{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetPoolTokenAmount sets the "poolTokenAmount" parameter.
func (inst *RemoveLiquiditySingleSide) SetPoolTokenAmount(poolTokenAmount uint64) *RemoveLiquiditySingleSide {
	inst.PoolTokenAmount = &poolTokenAmount
	return inst
}

// SetMinimumOutAmount sets the "minimumOutAmount" parameter.
func (inst *RemoveLiquiditySingleSide) SetMinimumOutAmount(minimumOutAmount uint64) *RemoveLiquiditySingleSide {
	inst.MinimumOutAmount = &minimumOutAmount
	return inst
}

// SetPoolAccount sets the "pool" account.
// Pool account (PDA)
func (inst *RemoveLiquiditySingleSide) SetPoolAccount(pool ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
// Pool account (PDA)
func (inst *RemoveLiquiditySingleSide) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLpMintAccount sets the "lpMint" account.
// LP token mint of the pool
func (inst *RemoveLiquiditySingleSide) SetLpMintAccount(lpMint ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lpMint" account.
// LP token mint of the pool
func (inst *RemoveLiquiditySingleSide) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserPoolLpAccount sets the "userPoolLp" account.
// User pool lp token account. LP will be burned from this account upon success liquidity removal.
func (inst *RemoveLiquiditySingleSide) SetUserPoolLpAccount(userPoolLp ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userPoolLp).WRITE()
	return inst
}

// GetUserPoolLpAccount gets the "userPoolLp" account.
// User pool lp token account. LP will be burned from this account upon success liquidity removal.
func (inst *RemoveLiquiditySingleSide) GetUserPoolLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAVaultLpAccount sets the "aVaultLp" account.
// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *RemoveLiquiditySingleSide) SetAVaultLpAccount(aVaultLp ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(aVaultLp).WRITE()
	return inst
}

// GetAVaultLpAccount gets the "aVaultLp" account.
// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *RemoveLiquiditySingleSide) GetAVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBVaultLpAccount sets the "bVaultLp" account.
// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *RemoveLiquiditySingleSide) SetBVaultLpAccount(bVaultLp ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(bVaultLp).WRITE()
	return inst
}

// GetBVaultLpAccount gets the "bVaultLp" account.
// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *RemoveLiquiditySingleSide) GetBVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAVaultAccount sets the "aVault" account.
// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
func (inst *RemoveLiquiditySingleSide) SetAVaultAccount(aVault ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(aVault).WRITE()
	return inst
}

// GetAVaultAccount gets the "aVault" account.
// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
func (inst *RemoveLiquiditySingleSide) GetAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBVaultAccount sets the "bVault" account.
// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
func (inst *RemoveLiquiditySingleSide) SetBVaultAccount(bVault ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(bVault).WRITE()
	return inst
}

// GetBVaultAccount gets the "bVault" account.
// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
func (inst *RemoveLiquiditySingleSide) GetBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAVaultLpMintAccount sets the "aVaultLpMint" account.
// LP token mint of vault A
func (inst *RemoveLiquiditySingleSide) SetAVaultLpMintAccount(aVaultLpMint ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(aVaultLpMint).WRITE()
	return inst
}

// GetAVaultLpMintAccount gets the "aVaultLpMint" account.
// LP token mint of vault A
func (inst *RemoveLiquiditySingleSide) GetAVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetBVaultLpMintAccount sets the "bVaultLpMint" account.
// LP token mint of vault B
func (inst *RemoveLiquiditySingleSide) SetBVaultLpMintAccount(bVaultLpMint ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(bVaultLpMint).WRITE()
	return inst
}

// GetBVaultLpMintAccount gets the "bVaultLpMint" account.
// LP token mint of vault B
func (inst *RemoveLiquiditySingleSide) GetBVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetATokenVaultAccount sets the "aTokenVault" account.
// Token vault account of vault A
func (inst *RemoveLiquiditySingleSide) SetATokenVaultAccount(aTokenVault ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(aTokenVault).WRITE()
	return inst
}

// GetATokenVaultAccount gets the "aTokenVault" account.
// Token vault account of vault A
func (inst *RemoveLiquiditySingleSide) GetATokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetBTokenVaultAccount sets the "bTokenVault" account.
// Token vault account of vault B
func (inst *RemoveLiquiditySingleSide) SetBTokenVaultAccount(bTokenVault ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(bTokenVault).WRITE()
	return inst
}

// GetBTokenVaultAccount gets the "bTokenVault" account.
// Token vault account of vault B
func (inst *RemoveLiquiditySingleSide) GetBTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetUserDestinationTokenAccount sets the "userDestinationToken" account.
// User token account to receive token upon success liquidity removal.
func (inst *RemoveLiquiditySingleSide) SetUserDestinationTokenAccount(userDestinationToken ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(userDestinationToken).WRITE()
	return inst
}

// GetUserDestinationTokenAccount gets the "userDestinationToken" account.
// User token account to receive token upon success liquidity removal.
func (inst *RemoveLiquiditySingleSide) GetUserDestinationTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetUserAccount sets the "user" account.
// User account. Must be owner of the user_pool_lp account.
func (inst *RemoveLiquiditySingleSide) SetUserAccount(user ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
// User account. Must be owner of the user_pool_lp account.
func (inst *RemoveLiquiditySingleSide) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetVaultProgramAccount sets the "vaultProgram" account.
// Vault program. The pool will deposit/withdraw liquidity from the vault.
func (inst *RemoveLiquiditySingleSide) SetVaultProgramAccount(vaultProgram ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(vaultProgram)
	return inst
}

// GetVaultProgramAccount gets the "vaultProgram" account.
// Vault program. The pool will deposit/withdraw liquidity from the vault.
func (inst *RemoveLiquiditySingleSide) GetVaultProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token program.
func (inst *RemoveLiquiditySingleSide) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token program.
func (inst *RemoveLiquiditySingleSide) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst RemoveLiquiditySingleSide) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RemoveLiquiditySingleSide,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RemoveLiquiditySingleSide) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RemoveLiquiditySingleSide) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PoolTokenAmount == nil {
			return errors.New("PoolTokenAmount parameter is not set")
		}
		if inst.MinimumOutAmount == nil {
			return errors.New("MinimumOutAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserPoolLp is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AVaultLp is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BVaultLp is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.BVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.BVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.ATokenVault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.BTokenVault is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.UserDestinationToken is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.VaultProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *RemoveLiquiditySingleSide) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RemoveLiquiditySingleSide")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" PoolTokenAmount", *inst.PoolTokenAmount))
						paramsBranch.Child(ag_format.Param("MinimumOutAmount", *inst.MinimumOutAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              lpMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          userPoolLp", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            aVaultLp", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            bVaultLp", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              aVault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("              bVault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        aVaultLpMint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        bVaultLpMint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         aTokenVault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         bTokenVault", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("userDestinationToken", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                user", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("        vaultProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("        tokenProgram", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj RemoveLiquiditySingleSide) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolTokenAmount` param:
	err = encoder.Encode(obj.PoolTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `MinimumOutAmount` param:
	err = encoder.Encode(obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RemoveLiquiditySingleSide) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolTokenAmount`:
	err = decoder.Decode(&obj.PoolTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `MinimumOutAmount`:
	err = decoder.Decode(&obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewRemoveLiquiditySingleSideInstruction declares a new RemoveLiquiditySingleSide instruction with the provided parameters and accounts.
func NewRemoveLiquiditySingleSideInstruction(
	// Parameters:
	poolTokenAmount uint64,
	minimumOutAmount uint64,
	// Accounts:
	pool ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	userPoolLp ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey,
	aTokenVault ag_solanago.PublicKey,
	bTokenVault ag_solanago.PublicKey,
	userDestinationToken ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	vaultProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *RemoveLiquiditySingleSide {
	return NewRemoveLiquiditySingleSideInstructionBuilder().
		SetPoolTokenAmount(poolTokenAmount).
		SetMinimumOutAmount(minimumOutAmount).
		SetPoolAccount(pool).
		SetLpMintAccount(lpMint).
		SetUserPoolLpAccount(userPoolLp).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint).
		SetATokenVaultAccount(aTokenVault).
		SetBTokenVaultAccount(bTokenVault).
		SetUserDestinationTokenAccount(userDestinationToken).
		SetUserAccount(user).
		SetVaultProgramAccount(vaultProgram).
		SetTokenProgramAccount(tokenProgram)
}
