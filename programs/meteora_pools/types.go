// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type TokenMultiplier struct {
	// Multiplier for token A of the pool.
	TokenAMultiplier uint64

	// Multiplier for token B of the pool.
	TokenBMultiplier uint64

	// Record the highest token decimal in the pool. For example, Token A is 6 decimal, token B is 9 decimal. This will save value of 9.
	PrecisionFactor uint8
}

func (obj TokenMultiplier) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenAMultiplier` param:
	err = encoder.Encode(obj.TokenAMultiplier)
	if err != nil {
		return err
	}
	// Serialize `TokenBMultiplier` param:
	err = encoder.Encode(obj.TokenBMultiplier)
	if err != nil {
		return err
	}
	// Serialize `PrecisionFactor` param:
	err = encoder.Encode(obj.PrecisionFactor)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenMultiplier) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenAMultiplier`:
	err = decoder.Decode(&obj.TokenAMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `TokenBMultiplier`:
	err = decoder.Decode(&obj.TokenBMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `PrecisionFactor`:
	err = decoder.Decode(&obj.PrecisionFactor)
	if err != nil {
		return err
	}
	return nil
}

type PoolFees struct {
	// Trade fees are extra token amounts that are held inside the token
	// accounts during a trade, making the value of liquidity tokens rise.
	// Trade fee numerator
	TradeFeeNumerator uint64

	// Trade fee denominator
	TradeFeeDenominator uint64

	// Protocol trading fees are extra token amounts that are held inside the token
	// accounts during a trade, with the equivalent in pool tokens minted to
	// the protocol of the program.
	// Protocol trade fee numerator
	ProtocolTradeFeeNumerator uint64

	// Protocol trade fee denominator
	ProtocolTradeFeeDenominator uint64
}

func (obj PoolFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator` param:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeDenominator` param:
	err = encoder.Encode(obj.TradeFeeDenominator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeNumerator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeDenominator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeDenominator`:
	err = decoder.Decode(&obj.TradeFeeDenominator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeDenominator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return err
	}
	return nil
}

type Depeg struct {
	// The virtual price of staking / interest bearing token
	BaseVirtualPrice uint64

	// The last time base_virtual_price is updated
	BaseCacheUpdated uint64

	// Type of the depeg pool
	DepegType DepegType
}

func (obj Depeg) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseVirtualPrice` param:
	err = encoder.Encode(obj.BaseVirtualPrice)
	if err != nil {
		return err
	}
	// Serialize `BaseCacheUpdated` param:
	err = encoder.Encode(obj.BaseCacheUpdated)
	if err != nil {
		return err
	}
	// Serialize `DepegType` param:
	err = encoder.Encode(obj.DepegType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Depeg) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseVirtualPrice`:
	err = decoder.Decode(&obj.BaseVirtualPrice)
	if err != nil {
		return err
	}
	// Deserialize `BaseCacheUpdated`:
	err = decoder.Decode(&obj.BaseCacheUpdated)
	if err != nil {
		return err
	}
	// Deserialize `DepegType`:
	err = decoder.Decode(&obj.DepegType)
	if err != nil {
		return err
	}
	return nil
}

type ConfigParameters struct {
	TradeFeeNumerator         uint64
	ProtocolTradeFeeNumerator uint64
	ActivationDuration        uint64
	VaultConfigKey            ag_solanago.PublicKey
	PoolCreatorAuthority      ag_solanago.PublicKey
	ActivationType            uint8
	Index                     uint64
	PartnerFeeNumerator       uint64
}

func (obj ConfigParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator` param:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeNumerator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ActivationDuration` param:
	err = encoder.Encode(obj.ActivationDuration)
	if err != nil {
		return err
	}
	// Serialize `VaultConfigKey` param:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Serialize `PoolCreatorAuthority` param:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `PartnerFeeNumerator` param:
	err = encoder.Encode(obj.PartnerFeeNumerator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ActivationDuration`:
	err = decoder.Decode(&obj.ActivationDuration)
	if err != nil {
		return err
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `PartnerFeeNumerator`:
	err = decoder.Decode(&obj.PartnerFeeNumerator)
	if err != nil {
		return err
	}
	return nil
}

type CustomizableParams struct {
	// Trading fee.
	TradeFeeNumerator uint32

	// The pool start trading.
	ActivationPoint *uint64 `bin:"optional"`

	// Whether the pool support alpha vault
	HasAlphaVault bool

	// Activation type
	ActivationType uint8

	// Padding
	Padding [90]uint8
}

func (obj CustomizableParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator` param:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param (optional):
	{
		if obj.ActivationPoint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ActivationPoint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `HasAlphaVault` param:
	err = encoder.Encode(obj.HasAlphaVault)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CustomizableParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ActivationPoint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `HasAlphaVault`:
	err = decoder.Decode(&obj.HasAlphaVault)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type Padding struct {
	// Padding 0
	Padding0 [6]uint8

	// Padding 1
	Padding1 [21]uint64

	// Padding 2
	Padding2 [21]uint64
}

func (obj Padding) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Padding0` param:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Padding) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	return nil
}

type PartnerInfo struct {
	FeeNumerator     uint64
	PartnerAuthority ag_solanago.PublicKey
	PendingFeeA      uint64
	PendingFeeB      uint64
}

func (obj PartnerInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeNumerator` param:
	err = encoder.Encode(obj.FeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `PartnerAuthority` param:
	err = encoder.Encode(obj.PartnerAuthority)
	if err != nil {
		return err
	}
	// Serialize `PendingFeeA` param:
	err = encoder.Encode(obj.PendingFeeA)
	if err != nil {
		return err
	}
	// Serialize `PendingFeeB` param:
	err = encoder.Encode(obj.PendingFeeB)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PartnerInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeNumerator`:
	err = decoder.Decode(&obj.FeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `PartnerAuthority`:
	err = decoder.Decode(&obj.PartnerAuthority)
	if err != nil {
		return err
	}
	// Deserialize `PendingFeeA`:
	err = decoder.Decode(&obj.PendingFeeA)
	if err != nil {
		return err
	}
	// Deserialize `PendingFeeB`:
	err = decoder.Decode(&obj.PendingFeeB)
	if err != nil {
		return err
	}
	return nil
}

type Bootstrapping struct {
	// Activation point, can be slot or timestamp
	ActivationPoint uint64

	// Whitelisted vault to be able to buy pool before activation_point
	WhitelistedVault ag_solanago.PublicKey

	// Need to store pool creator in lauch pool, so they can modify liquidity before activation_point
	PoolCreator ag_solanago.PublicKey

	// Activation type, 0 means by slot, 1 means by timestamp
	ActivationType uint8
}

func (obj Bootstrapping) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ActivationPoint` param:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Serialize `WhitelistedVault` param:
	err = encoder.Encode(obj.WhitelistedVault)
	if err != nil {
		return err
	}
	// Serialize `PoolCreator` param:
	err = encoder.Encode(obj.PoolCreator)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Bootstrapping) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Deserialize `WhitelistedVault`:
	err = decoder.Decode(&obj.WhitelistedVault)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreator`:
	err = decoder.Decode(&obj.PoolCreator)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	return nil
}

type ActivationType ag_binary.BorshEnum

const (
	ActivationTypeSlot ActivationType = iota
	ActivationTypeTimestamp
)

func (value ActivationType) String() string {
	switch value {
	case ActivationTypeSlot:
		return "Slot"
	case ActivationTypeTimestamp:
		return "Timestamp"
	default:
		return ""
	}
}

type RoundDirection ag_binary.BorshEnum

const (
	RoundDirectionFloor RoundDirection = iota
	RoundDirectionCeiling
)

func (value RoundDirection) String() string {
	switch value {
	case RoundDirectionFloor:
		return "Floor"
	case RoundDirectionCeiling:
		return "Ceiling"
	default:
		return ""
	}
}

type TradeDirection ag_binary.BorshEnum

const (
	TradeDirectionAtoB TradeDirection = iota
	TradeDirectionBtoA
)

func (value TradeDirection) String() string {
	switch value {
	case TradeDirectionAtoB:
		return "AtoB"
	case TradeDirectionBtoA:
		return "BtoA"
	default:
		return ""
	}
}

type NewCurveType interface {
	isNewCurveType()
}

type newCurveTypeContainer struct {
	Enum            ag_binary.BorshEnum `borsh_enum:"true"`
	ConstantProduct NewCurveTypeConstantProduct
	Stable          NewCurveTypeStable
	NewCurve        NewCurveTypeNewCurve
}

type NewCurveTypeConstantProduct uint8

func (obj NewCurveTypeConstantProduct) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *NewCurveTypeConstantProduct) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *NewCurveTypeConstantProduct) isNewCurveType() {}

type NewCurveTypeStable struct {
	Amp                     uint64
	TokenMultiplier         TokenMultiplier
	Depeg                   Depeg
	LastAmpUpdatedTimestamp uint64
}

func (obj NewCurveTypeStable) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amp` param:
	err = encoder.Encode(obj.Amp)
	if err != nil {
		return err
	}
	// Serialize `TokenMultiplier` param:
	err = encoder.Encode(obj.TokenMultiplier)
	if err != nil {
		return err
	}
	// Serialize `Depeg` param:
	err = encoder.Encode(obj.Depeg)
	if err != nil {
		return err
	}
	// Serialize `LastAmpUpdatedTimestamp` param:
	err = encoder.Encode(obj.LastAmpUpdatedTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NewCurveTypeStable) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amp`:
	err = decoder.Decode(&obj.Amp)
	if err != nil {
		return err
	}
	// Deserialize `TokenMultiplier`:
	err = decoder.Decode(&obj.TokenMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `Depeg`:
	err = decoder.Decode(&obj.Depeg)
	if err != nil {
		return err
	}
	// Deserialize `LastAmpUpdatedTimestamp`:
	err = decoder.Decode(&obj.LastAmpUpdatedTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (_ *NewCurveTypeStable) isNewCurveType() {}

type NewCurveTypeNewCurve struct {
	FieldOne uint64
	FieldTwo uint64
}

func (obj NewCurveTypeNewCurve) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FieldOne` param:
	err = encoder.Encode(obj.FieldOne)
	if err != nil {
		return err
	}
	// Serialize `FieldTwo` param:
	err = encoder.Encode(obj.FieldTwo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NewCurveTypeNewCurve) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FieldOne`:
	err = decoder.Decode(&obj.FieldOne)
	if err != nil {
		return err
	}
	// Deserialize `FieldTwo`:
	err = decoder.Decode(&obj.FieldTwo)
	if err != nil {
		return err
	}
	return nil
}

func (_ *NewCurveTypeNewCurve) isNewCurveType() {}

type CurveType interface {
	isCurveType()
}

type curveTypeContainer struct {
	Enum            ag_binary.BorshEnum `borsh_enum:"true"`
	ConstantProduct CurveTypeConstantProduct
	Stable          CurveTypeStable
}

type CurveTypeConstantProduct uint8

func (obj CurveTypeConstantProduct) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *CurveTypeConstantProduct) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *CurveTypeConstantProduct) isCurveType() {}

type CurveTypeStable struct {
	Amp                     uint64
	TokenMultiplier         TokenMultiplier
	Depeg                   Depeg
	LastAmpUpdatedTimestamp uint64
}

func (obj CurveTypeStable) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amp` param:
	err = encoder.Encode(obj.Amp)
	if err != nil {
		return err
	}
	// Serialize `TokenMultiplier` param:
	err = encoder.Encode(obj.TokenMultiplier)
	if err != nil {
		return err
	}
	// Serialize `Depeg` param:
	err = encoder.Encode(obj.Depeg)
	if err != nil {
		return err
	}
	// Serialize `LastAmpUpdatedTimestamp` param:
	err = encoder.Encode(obj.LastAmpUpdatedTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CurveTypeStable) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amp`:
	err = decoder.Decode(&obj.Amp)
	if err != nil {
		return err
	}
	// Deserialize `TokenMultiplier`:
	err = decoder.Decode(&obj.TokenMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `Depeg`:
	err = decoder.Decode(&obj.Depeg)
	if err != nil {
		return err
	}
	// Deserialize `LastAmpUpdatedTimestamp`:
	err = decoder.Decode(&obj.LastAmpUpdatedTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (_ *CurveTypeStable) isCurveType() {}

type DepegType ag_binary.BorshEnum

const (
	DepegTypeNone DepegType = iota
	DepegTypeMarinade
	DepegTypeLido
	DepegTypeSplStake
)

func (value DepegType) String() string {
	switch value {
	case DepegTypeNone:
		return "None"
	case DepegTypeMarinade:
		return "Marinade"
	case DepegTypeLido:
		return "Lido"
	case DepegTypeSplStake:
		return "SplStake"
	default:
		return ""
	}
}

type Rounding ag_binary.BorshEnum

const (
	RoundingUp Rounding = iota
	RoundingDown
)

func (value Rounding) String() string {
	switch value {
	case RoundingUp:
		return "Up"
	case RoundingDown:
		return "Down"
	default:
		return ""
	}
}

type PoolType ag_binary.BorshEnum

const (
	PoolTypePermissioned PoolType = iota
	PoolTypePermissionless
)

func (value PoolType) String() string {
	switch value {
	case PoolTypePermissioned:
		return "Permissioned"
	case PoolTypePermissionless:
		return "Permissionless"
	default:
		return ""
	}
}
