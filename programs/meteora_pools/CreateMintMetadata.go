// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Create mint metadata account for old pools
type CreateMintMetadata struct {

	// [0] = [] pool
	// ··········· Pool account
	//
	// [1] = [] lpMint
	// ··········· LP mint account of the pool
	//
	// [2] = [] aVaultLp
	// ··········· Vault A LP account of the pool
	//
	// [3] = [WRITE] mintMetadata
	//
	// [4] = [] metadataProgram
	//
	// [5] = [] systemProgram
	// ··········· System program.
	//
	// [6] = [WRITE, SIGNER] payer
	// ··········· Payer
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateMintMetadataInstructionBuilder creates a new `CreateMintMetadata` instruction builder.
func NewCreateMintMetadataInstructionBuilder() *CreateMintMetadata {
	nd := &CreateMintMetadata{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetPoolAccount sets the "pool" account.
// Pool account
func (inst *CreateMintMetadata) SetPoolAccount(pool ag_solanago.PublicKey) *CreateMintMetadata {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool)
	return inst
}

// GetPoolAccount gets the "pool" account.
// Pool account
func (inst *CreateMintMetadata) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLpMintAccount sets the "lpMint" account.
// LP mint account of the pool
func (inst *CreateMintMetadata) SetLpMintAccount(lpMint ag_solanago.PublicKey) *CreateMintMetadata {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(lpMint)
	return inst
}

// GetLpMintAccount gets the "lpMint" account.
// LP mint account of the pool
func (inst *CreateMintMetadata) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAVaultLpAccount sets the "aVaultLp" account.
// Vault A LP account of the pool
func (inst *CreateMintMetadata) SetAVaultLpAccount(aVaultLp ag_solanago.PublicKey) *CreateMintMetadata {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(aVaultLp)
	return inst
}

// GetAVaultLpAccount gets the "aVaultLp" account.
// Vault A LP account of the pool
func (inst *CreateMintMetadata) GetAVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintMetadataAccount sets the "mintMetadata" account.
func (inst *CreateMintMetadata) SetMintMetadataAccount(mintMetadata ag_solanago.PublicKey) *CreateMintMetadata {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mintMetadata).WRITE()
	return inst
}

// GetMintMetadataAccount gets the "mintMetadata" account.
func (inst *CreateMintMetadata) GetMintMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMetadataProgramAccount sets the "metadataProgram" account.
func (inst *CreateMintMetadata) SetMetadataProgramAccount(metadataProgram ag_solanago.PublicKey) *CreateMintMetadata {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(metadataProgram)
	return inst
}

// GetMetadataProgramAccount gets the "metadataProgram" account.
func (inst *CreateMintMetadata) GetMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
// System program.
func (inst *CreateMintMetadata) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateMintMetadata {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// System program.
func (inst *CreateMintMetadata) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPayerAccount sets the "payer" account.
// Payer
func (inst *CreateMintMetadata) SetPayerAccount(payer ag_solanago.PublicKey) *CreateMintMetadata {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Payer
func (inst *CreateMintMetadata) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst CreateMintMetadata) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateMintMetadata,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateMintMetadata) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateMintMetadata) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AVaultLp is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MintMetadata is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MetadataProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Payer is not set")
		}
	}
	return nil
}

func (inst *CreateMintMetadata) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateMintMetadata")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         lpMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       aVaultLp", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   mintMetadata", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("metadataProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          payer", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj CreateMintMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateMintMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateMintMetadataInstruction declares a new CreateMintMetadata instruction with the provided parameters and accounts.
func NewCreateMintMetadataInstruction(
	// Accounts:
	pool ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	mintMetadata ag_solanago.PublicKey,
	metadataProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *CreateMintMetadata {
	return NewCreateMintMetadataInstructionBuilder().
		SetPoolAccount(pool).
		SetLpMintAccount(lpMint).
		SetAVaultLpAccount(aVaultLp).
		SetMintMetadataAccount(mintMetadata).
		SetMetadataProgramAccount(metadataProgram).
		SetSystemProgramAccount(systemProgram).
		SetPayerAccount(payer)
}
