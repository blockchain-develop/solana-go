// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Lock Lp token
type Lock struct {
	MaxAmount *uint64

	// [0] = [WRITE] pool
	// ··········· Pool account
	//
	// [1] = [] lpMint
	// ··········· LP token mint of the pool
	//
	// [2] = [WRITE] lockEscrow
	// ··········· Lock account
	//
	// [3] = [WRITE, SIGNER] owner
	// ··········· Can be anyone
	//
	// [4] = [WRITE] sourceTokens
	// ··········· owner lp token account
	//
	// [5] = [WRITE] escrowVault
	// ··········· Escrow vault
	//
	// [6] = [] tokenProgram
	// ··········· Token program.
	//
	// [7] = [] aVault
	// ··········· Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
	//
	// [8] = [] bVault
	// ··········· Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
	//
	// [9] = [] aVaultLp
	// ··········· LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	//
	// [10] = [] bVaultLp
	// ··········· LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	//
	// [11] = [] aVaultLpMint
	// ··········· LP token mint of vault a
	//
	// [12] = [] bVaultLpMint
	// ··········· LP token mint of vault b
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewLockInstructionBuilder creates a new `Lock` instruction builder.
func NewLockInstructionBuilder() *Lock {
	nd := &Lock{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetMaxAmount sets the "maxAmount" parameter.
func (inst *Lock) SetMaxAmount(maxAmount uint64) *Lock {
	inst.MaxAmount = &maxAmount
	return inst
}

// SetPoolAccount sets the "pool" account.
// Pool account
func (inst *Lock) SetPoolAccount(pool ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
// Pool account
func (inst *Lock) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLpMintAccount sets the "lpMint" account.
// LP token mint of the pool
func (inst *Lock) SetLpMintAccount(lpMint ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(lpMint)
	return inst
}

// GetLpMintAccount gets the "lpMint" account.
// LP token mint of the pool
func (inst *Lock) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetLockEscrowAccount sets the "lockEscrow" account.
// Lock account
func (inst *Lock) SetLockEscrowAccount(lockEscrow ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(lockEscrow).WRITE()
	return inst
}

// GetLockEscrowAccount gets the "lockEscrow" account.
// Lock account
func (inst *Lock) GetLockEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOwnerAccount sets the "owner" account.
// Can be anyone
func (inst *Lock) SetOwnerAccount(owner ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// Can be anyone
func (inst *Lock) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSourceTokensAccount sets the "sourceTokens" account.
// owner lp token account
func (inst *Lock) SetSourceTokensAccount(sourceTokens ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(sourceTokens).WRITE()
	return inst
}

// GetSourceTokensAccount gets the "sourceTokens" account.
// owner lp token account
func (inst *Lock) GetSourceTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetEscrowVaultAccount sets the "escrowVault" account.
// Escrow vault
func (inst *Lock) SetEscrowVaultAccount(escrowVault ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(escrowVault).WRITE()
	return inst
}

// GetEscrowVaultAccount gets the "escrowVault" account.
// Escrow vault
func (inst *Lock) GetEscrowVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token program.
func (inst *Lock) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token program.
func (inst *Lock) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAVaultAccount sets the "aVault" account.
// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
func (inst *Lock) SetAVaultAccount(aVault ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(aVault)
	return inst
}

// GetAVaultAccount gets the "aVault" account.
// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
func (inst *Lock) GetAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetBVaultAccount sets the "bVault" account.
// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
func (inst *Lock) SetBVaultAccount(bVault ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(bVault)
	return inst
}

// GetBVaultAccount gets the "bVault" account.
// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
func (inst *Lock) GetBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetAVaultLpAccount sets the "aVaultLp" account.
// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *Lock) SetAVaultLpAccount(aVaultLp ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(aVaultLp)
	return inst
}

// GetAVaultLpAccount gets the "aVaultLp" account.
// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *Lock) GetAVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetBVaultLpAccount sets the "bVaultLp" account.
// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *Lock) SetBVaultLpAccount(bVaultLp ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(bVaultLp)
	return inst
}

// GetBVaultLpAccount gets the "bVaultLp" account.
// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *Lock) GetBVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetAVaultLpMintAccount sets the "aVaultLpMint" account.
// LP token mint of vault a
func (inst *Lock) SetAVaultLpMintAccount(aVaultLpMint ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(aVaultLpMint)
	return inst
}

// GetAVaultLpMintAccount gets the "aVaultLpMint" account.
// LP token mint of vault a
func (inst *Lock) GetAVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetBVaultLpMintAccount sets the "bVaultLpMint" account.
// LP token mint of vault b
func (inst *Lock) SetBVaultLpMintAccount(bVaultLpMint ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(bVaultLpMint)
	return inst
}

// GetBVaultLpMintAccount gets the "bVaultLpMint" account.
// LP token mint of vault b
func (inst *Lock) GetBVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst Lock) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Lock,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Lock) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Lock) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MaxAmount == nil {
			return errors.New("MaxAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.LockEscrow is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SourceTokens is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.EscrowVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.BVault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.AVaultLp is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.BVaultLp is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.AVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.BVaultLpMint is not set")
		}
	}
	return nil
}

func (inst *Lock) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Lock")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MaxAmount", *inst.MaxAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      lpMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  lockEscrow", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       owner", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("sourceTokens", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" escrowVault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      aVault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("      bVault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("    aVaultLp", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    bVaultLp", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("aVaultLpMint", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("bVaultLpMint", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj Lock) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MaxAmount` param:
	err = encoder.Encode(obj.MaxAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Lock) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MaxAmount`:
	err = decoder.Decode(&obj.MaxAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewLockInstruction declares a new Lock instruction with the provided parameters and accounts.
func NewLockInstruction(
	// Parameters:
	maxAmount uint64,
	// Accounts:
	pool ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	lockEscrow ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	sourceTokens ag_solanago.PublicKey,
	escrowVault ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey) *Lock {
	return NewLockInstructionBuilder().
		SetMaxAmount(maxAmount).
		SetPoolAccount(pool).
		SetLpMintAccount(lpMint).
		SetLockEscrowAccount(lockEscrow).
		SetOwnerAccount(owner).
		SetSourceTokensAccount(sourceTokens).
		SetEscrowVaultAccount(escrowVault).
		SetTokenProgramAccount(tokenProgram).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint)
}
