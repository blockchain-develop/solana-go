// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solfi

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawFees is the `withdrawFees` instruction.
type WithdrawFees struct {

	// [0] = [WRITE] tradingPair
	//
	// [1] = [] mintX
	//
	// [2] = [] mintY
	//
	// [3] = [WRITE] protocolFeeX
	//
	// [4] = [WRITE] protocolFeeY
	//
	// [5] = [WRITE] userTokenAccountX
	//
	// [6] = [WRITE] userTokenAccountY
	//
	// [7] = [SIGNER] signer
	//
	// [8] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawFeesInstructionBuilder creates a new `WithdrawFees` instruction builder.
func NewWithdrawFeesInstructionBuilder() *WithdrawFees {
	nd := &WithdrawFees{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetTradingPairAccount sets the "tradingPair" account.
func (inst *WithdrawFees) SetTradingPairAccount(tradingPair ag_solanago.PublicKey) *WithdrawFees {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tradingPair).WRITE()
	return inst
}

// GetTradingPairAccount gets the "tradingPair" account.
func (inst *WithdrawFees) GetTradingPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintXAccount sets the "mintX" account.
func (inst *WithdrawFees) SetMintXAccount(mintX ag_solanago.PublicKey) *WithdrawFees {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mintX)
	return inst
}

// GetMintXAccount gets the "mintX" account.
func (inst *WithdrawFees) GetMintXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintYAccount sets the "mintY" account.
func (inst *WithdrawFees) SetMintYAccount(mintY ag_solanago.PublicKey) *WithdrawFees {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mintY)
	return inst
}

// GetMintYAccount gets the "mintY" account.
func (inst *WithdrawFees) GetMintYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProtocolFeeXAccount sets the "protocolFeeX" account.
func (inst *WithdrawFees) SetProtocolFeeXAccount(protocolFeeX ag_solanago.PublicKey) *WithdrawFees {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(protocolFeeX).WRITE()
	return inst
}

// GetProtocolFeeXAccount gets the "protocolFeeX" account.
func (inst *WithdrawFees) GetProtocolFeeXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProtocolFeeYAccount sets the "protocolFeeY" account.
func (inst *WithdrawFees) SetProtocolFeeYAccount(protocolFeeY ag_solanago.PublicKey) *WithdrawFees {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(protocolFeeY).WRITE()
	return inst
}

// GetProtocolFeeYAccount gets the "protocolFeeY" account.
func (inst *WithdrawFees) GetProtocolFeeYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserTokenAccountXAccount sets the "userTokenAccountX" account.
func (inst *WithdrawFees) SetUserTokenAccountXAccount(userTokenAccountX ag_solanago.PublicKey) *WithdrawFees {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userTokenAccountX).WRITE()
	return inst
}

// GetUserTokenAccountXAccount gets the "userTokenAccountX" account.
func (inst *WithdrawFees) GetUserTokenAccountXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserTokenAccountYAccount sets the "userTokenAccountY" account.
func (inst *WithdrawFees) SetUserTokenAccountYAccount(userTokenAccountY ag_solanago.PublicKey) *WithdrawFees {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(userTokenAccountY).WRITE()
	return inst
}

// GetUserTokenAccountYAccount gets the "userTokenAccountY" account.
func (inst *WithdrawFees) GetUserTokenAccountYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSignerAccount sets the "signer" account.
func (inst *WithdrawFees) SetSignerAccount(signer ag_solanago.PublicKey) *WithdrawFees {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(signer).SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *WithdrawFees) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *WithdrawFees) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawFees {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *WithdrawFees) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst WithdrawFees) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_WithdrawFees),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawFees) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawFees) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TradingPair is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MintX is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MintY is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ProtocolFeeX is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ProtocolFeeY is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UserTokenAccountX is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.UserTokenAccountY is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *WithdrawFees) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawFees")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      tradingPair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            mintX", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            mintY", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     protocolFeeX", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     protocolFeeY", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("userTokenAccountX", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("userTokenAccountY", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           signer", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj WithdrawFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WithdrawFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWithdrawFeesInstruction declares a new WithdrawFees instruction with the provided parameters and accounts.
func NewWithdrawFeesInstruction(
	// Accounts:
	tradingPair ag_solanago.PublicKey,
	mintX ag_solanago.PublicKey,
	mintY ag_solanago.PublicKey,
	protocolFeeX ag_solanago.PublicKey,
	protocolFeeY ag_solanago.PublicKey,
	userTokenAccountX ag_solanago.PublicKey,
	userTokenAccountY ag_solanago.PublicKey,
	signer ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *WithdrawFees {
	return NewWithdrawFeesInstructionBuilder().
		SetTradingPairAccount(tradingPair).
		SetMintXAccount(mintX).
		SetMintYAccount(mintY).
		SetProtocolFeeXAccount(protocolFeeX).
		SetProtocolFeeYAccount(protocolFeeY).
		SetUserTokenAccountXAccount(userTokenAccountX).
		SetUserTokenAccountYAccount(userTokenAccountY).
		SetSignerAccount(signer).
		SetTokenProgramAccount(tokenProgram)
}
