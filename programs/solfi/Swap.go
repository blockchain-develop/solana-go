// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solfi

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Swap is the `swap` instruction.
type Swap struct {
	AmountIn         *uint64
	MinimalAmountOut *uint64
	A2B              *uint8

	// [0] = [WRITE, SIGNER] user
	//
	// [1] = [WRITE] pair
	//
	// [2] = [WRITE] poolTokenAccountA
	//
	// [3] = [WRITE] poolTokenAccountB
	//
	// [4] = [WRITE] userTokenAccountA
	//
	// [5] = [WRITE] userTokenAccountB
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] SysvarProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapInstructionBuilder creates a new `Swap` instruction builder.
func NewSwapInstructionBuilder() *Swap {
	nd := &Swap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetAmountIn sets the "amountIn" parameter.
func (inst *Swap) SetAmountIn(amountIn uint64) *Swap {
	inst.AmountIn = &amountIn
	return inst
}

// SetMinimalAmountOut sets the "minimalAmountOut" parameter.
func (inst *Swap) SetMinimalAmountOut(minimalAmountOut uint64) *Swap {
	inst.MinimalAmountOut = &minimalAmountOut
	return inst
}

// SetA2B sets the "a2b" parameter.
func (inst *Swap) SetA2B(a2b uint8) *Swap {
	inst.A2B = &a2b
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *Swap) SetUserAccount(user ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *Swap) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPairAccount sets the "pair" account.
func (inst *Swap) SetPairAccount(pair ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pair).WRITE()
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *Swap) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolTokenAccountAAccount sets the "poolTokenAccountA" account.
func (inst *Swap) SetPoolTokenAccountAAccount(poolTokenAccountA ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolTokenAccountA).WRITE()
	return inst
}

// GetPoolTokenAccountAAccount gets the "poolTokenAccountA" account.
func (inst *Swap) GetPoolTokenAccountAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolTokenAccountBAccount sets the "poolTokenAccountB" account.
func (inst *Swap) SetPoolTokenAccountBAccount(poolTokenAccountB ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolTokenAccountB).WRITE()
	return inst
}

// GetPoolTokenAccountBAccount gets the "poolTokenAccountB" account.
func (inst *Swap) GetPoolTokenAccountBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserTokenAccountAAccount sets the "userTokenAccountA" account.
func (inst *Swap) SetUserTokenAccountAAccount(userTokenAccountA ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userTokenAccountA).WRITE()
	return inst
}

// GetUserTokenAccountAAccount gets the "userTokenAccountA" account.
func (inst *Swap) GetUserTokenAccountAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserTokenAccountBAccount sets the "userTokenAccountB" account.
func (inst *Swap) SetUserTokenAccountBAccount(userTokenAccountB ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userTokenAccountB).WRITE()
	return inst
}

// GetUserTokenAccountBAccount gets the "userTokenAccountB" account.
func (inst *Swap) GetUserTokenAccountBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Swap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Swap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSysvarProgramAccount sets the "SysvarProgram" account.
func (inst *Swap) SetSysvarProgramAccount(sysvarProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(sysvarProgram)
	return inst
}

// GetSysvarProgramAccount gets the "SysvarProgram" account.
func (inst *Swap) GetSysvarProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst Swap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_Swap),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Swap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Swap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AmountIn == nil {
			return errors.New("AmountIn parameter is not set")
		}
		if inst.MinimalAmountOut == nil {
			return errors.New("MinimalAmountOut parameter is not set")
		}
		if inst.A2B == nil {
			return errors.New("A2B parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolTokenAccountA is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolTokenAccountB is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserTokenAccountA is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UserTokenAccountB is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SysvarProgram is not set")
		}
	}
	return nil
}

func (inst *Swap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Swap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        AmountIn", *inst.AmountIn))
						paramsBranch.Child(ag_format.Param("MinimalAmountOut", *inst.MinimalAmountOut))
						paramsBranch.Child(ag_format.Param("             A2B", *inst.A2B))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             pair", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("poolTokenAccountA", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("poolTokenAccountB", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("userTokenAccountA", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("userTokenAccountB", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("    SysvarProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj Swap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinimalAmountOut` param:
	err = encoder.Encode(obj.MinimalAmountOut)
	if err != nil {
		return err
	}
	// Serialize `A2B` param:
	err = encoder.Encode(obj.A2B)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Swap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinimalAmountOut`:
	err = decoder.Decode(&obj.MinimalAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `A2B`:
	err = decoder.Decode(&obj.A2B)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSwapInstruction(
	// Parameters:
	amountIn uint64,
	minimalAmountOut uint64,
	a2b uint8,
	// Accounts:
	user ag_solanago.PublicKey,
	pair ag_solanago.PublicKey,
	poolTokenAccountA ag_solanago.PublicKey,
	poolTokenAccountB ag_solanago.PublicKey,
	userTokenAccountA ag_solanago.PublicKey,
	userTokenAccountB ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	sysvarProgram ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetAmountIn(amountIn).
		SetMinimalAmountOut(minimalAmountOut).
		SetA2B(a2b).
		SetUserAccount(user).
		SetPairAccount(pair).
		SetPoolTokenAccountAAccount(poolTokenAccountA).
		SetPoolTokenAccountBAccount(poolTokenAccountB).
		SetUserTokenAccountAAccount(userTokenAccountA).
		SetUserTokenAccountBAccount(userTokenAccountB).
		SetTokenProgramAccount(tokenProgram).
		SetSysvarProgramAccount(sysvarProgram)
}
