// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CloseToken is the `close_token` instruction.
type CloseToken struct {
	Id      *uint8
	BurnAll *bool

	// [0] = [SIGNER] operator
	//
	// [1] = [WRITE] wallet
	//
	// [2] = [] program_authority
	//
	// [3] = [WRITE] program_token_account
	//
	// [4] = [WRITE] mint
	//
	// [5] = [] token_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseTokenInstructionBuilder creates a new `CloseToken` instruction builder.
func NewCloseTokenInstructionBuilder() *CloseToken {
	nd := &CloseToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	nd.AccountMetaSlice[1] = ag_solanago.Meta(Addresses["J434EKW6KDmnJHxVty1axHT6kjszKKFEyesKqxdQ7y64"]).WRITE()
	return nd
}

// SetId sets the "id" parameter.
func (inst *CloseToken) SetId(id uint8) *CloseToken {
	inst.Id = &id
	return inst
}

// SetBurnAll sets the "burn_all" parameter.
func (inst *CloseToken) SetBurnAll(burn_all bool) *CloseToken {
	inst.BurnAll = &burn_all
	return inst
}

// SetOperatorAccount sets the "operator" account.
func (inst *CloseToken) SetOperatorAccount(operator ag_solanago.PublicKey) *CloseToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(operator).SIGNER()
	return inst
}

// GetOperatorAccount gets the "operator" account.
func (inst *CloseToken) GetOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWalletAccount sets the "wallet" account.
func (inst *CloseToken) SetWalletAccount(wallet ag_solanago.PublicKey) *CloseToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(wallet).WRITE()
	return inst
}

// GetWalletAccount gets the "wallet" account.
func (inst *CloseToken) GetWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetProgramAuthorityAccount sets the "program_authority" account.
func (inst *CloseToken) SetProgramAuthorityAccount(programAuthority ag_solanago.PublicKey) *CloseToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(programAuthority)
	return inst
}

// GetProgramAuthorityAccount gets the "program_authority" account.
func (inst *CloseToken) GetProgramAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProgramTokenAccountAccount sets the "program_token_account" account.
func (inst *CloseToken) SetProgramTokenAccountAccount(programTokenAccount ag_solanago.PublicKey) *CloseToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(programTokenAccount).WRITE()
	return inst
}

// GetProgramTokenAccountAccount gets the "program_token_account" account.
func (inst *CloseToken) GetProgramTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMintAccount sets the "mint" account.
func (inst *CloseToken) SetMintAccount(mint ag_solanago.PublicKey) *CloseToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *CloseToken) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *CloseToken) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CloseToken {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *CloseToken) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst CloseToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseToken) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Id == nil {
			return errors.New("Id parameter is not set")
		}
		if inst.BurnAll == nil {
			return errors.New("BurnAll parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Operator is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Wallet is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ProgramAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ProgramTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CloseToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("      Id", *inst.Id))
						paramsBranch.Child(ag_format.Param(" BurnAll", *inst.BurnAll))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         operator", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           wallet", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("program_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   program_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    token_program", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj CloseToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `BurnAll` param:
	err = encoder.Encode(obj.BurnAll)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CloseToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `BurnAll`:
	err = decoder.Decode(&obj.BurnAll)
	if err != nil {
		return err
	}
	return nil
}

// NewCloseTokenInstruction declares a new CloseToken instruction with the provided parameters and accounts.
func NewCloseTokenInstruction(
	// Parameters:
	id uint8,
	burn_all bool,
	// Accounts:
	operator ag_solanago.PublicKey,
	wallet ag_solanago.PublicKey,
	programAuthority ag_solanago.PublicKey,
	programTokenAccount ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CloseToken {
	return NewCloseTokenInstructionBuilder().
		SetId(id).
		SetBurnAll(burn_all).
		SetOperatorAccount(operator).
		SetWalletAccount(wallet).
		SetProgramAuthorityAccount(programAuthority).
		SetProgramTokenAccountAccount(programTokenAccount).
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram)
}
