// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AccountsType ag_binary.BorshEnum

const (
	AccountsTypeTransferHookA AccountsType = iota
	AccountsTypeTransferHookB
	AccountsTypeTransferHookReward
	AccountsTypeTransferHookInput
	AccountsTypeTransferHookIntermediate
	AccountsTypeTransferHookOutput
	AccountsTypeSupplementalTickArrays
	AccountsTypeSupplementalTickArraysOne
	AccountsTypeSupplementalTickArraysTwo
)

func (value AccountsType) String() string {
	switch value {
	case AccountsTypeTransferHookA:
		return "TransferHookA"
	case AccountsTypeTransferHookB:
		return "TransferHookB"
	case AccountsTypeTransferHookReward:
		return "TransferHookReward"
	case AccountsTypeTransferHookInput:
		return "TransferHookInput"
	case AccountsTypeTransferHookIntermediate:
		return "TransferHookIntermediate"
	case AccountsTypeTransferHookOutput:
		return "TransferHookOutput"
	case AccountsTypeSupplementalTickArrays:
		return "SupplementalTickArrays"
	case AccountsTypeSupplementalTickArraysOne:
		return "SupplementalTickArraysOne"
	case AccountsTypeSupplementalTickArraysTwo:
		return "SupplementalTickArraysTwo"
	default:
		return ""
	}
}

type FeeEvent struct {
	Account ag_solanago.PublicKey
	Mint    ag_solanago.PublicKey
	Amount  uint64
}

func (obj FeeEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Account` param:
	err = encoder.Encode(obj.Account)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Account`:
	err = decoder.Decode(&obj.Account)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type RemainingAccountsInfo struct {
	Slices []RemainingAccountsSlice
}

func (obj RemainingAccountsInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Slices` param:
	err = encoder.Encode(obj.Slices)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemainingAccountsInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Slices`:
	err = decoder.Decode(&obj.Slices)
	if err != nil {
		return err
	}
	return nil
}

type RemainingAccountsSlice struct {
	AccountsType AccountsType
	Length       uint8
}

func (obj RemainingAccountsSlice) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AccountsType` param:
	err = encoder.Encode(obj.AccountsType)
	if err != nil {
		return err
	}
	// Serialize `Length` param:
	err = encoder.Encode(obj.Length)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemainingAccountsSlice) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AccountsType`:
	err = decoder.Decode(&obj.AccountsType)
	if err != nil {
		return err
	}
	// Deserialize `Length`:
	err = decoder.Decode(&obj.Length)
	if err != nil {
		return err
	}
	return nil
}

type RoutePlanStep struct {
	Swap        *Swap
	Percent     uint8
	InputIndex  uint8
	OutputIndex uint8
}

func (obj RoutePlanStep) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Swap` param:
	err = encoder.Encode(obj.Swap)
	if err != nil {
		return err
	}
	// Serialize `Percent` param:
	err = encoder.Encode(obj.Percent)
	if err != nil {
		return err
	}
	// Serialize `InputIndex` param:
	err = encoder.Encode(obj.InputIndex)
	if err != nil {
		return err
	}
	// Serialize `OutputIndex` param:
	err = encoder.Encode(obj.OutputIndex)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RoutePlanStep) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Swap`:
	err = decoder.Decode(&obj.Swap)
	if err != nil {
		return err
	}
	// Deserialize `Percent`:
	err = decoder.Decode(&obj.Percent)
	if err != nil {
		return err
	}
	// Deserialize `InputIndex`:
	err = decoder.Decode(&obj.InputIndex)
	if err != nil {
		return err
	}
	// Deserialize `OutputIndex`:
	err = decoder.Decode(&obj.OutputIndex)
	if err != nil {
		return err
	}
	return nil
}

type Side ag_binary.BorshEnum

const (
	SideBid Side = iota
	SideAsk
)

func (value Side) String() string {
	switch value {
	case SideBid:
		return "Bid"
	case SideAsk:
		return "Ask"
	default:
		return ""
	}
}

type Swap struct {
	Value swap
}

func (obj Swap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := swapContainer{}
	switch realvalue := obj.Value.(type) {
	case SwapSaberTuple:
		tmp.Enum = 0
		tmp.Saber = realvalue
	case SwapSaberAddDecimalsDepositTuple:
		tmp.Enum = 1
		tmp.SaberAddDecimalsDeposit = realvalue
	case SwapSaberAddDecimalsWithdrawTuple:
		tmp.Enum = 2
		tmp.SaberAddDecimalsWithdraw = realvalue
	case SwapTokenSwapTuple:
		tmp.Enum = 3
		tmp.TokenSwap = realvalue
	case SwapSenchaTuple:
		tmp.Enum = 4
		tmp.Sencha = realvalue
	case SwapStepTuple:
		tmp.Enum = 5
		tmp.Step = realvalue
	case SwapCropperTuple:
		tmp.Enum = 6
		tmp.Cropper = realvalue
	case SwapRaydiumTuple:
		tmp.Enum = 7
		tmp.Raydium = realvalue
	case SwapCremaTuple:
		tmp.Enum = 8
		tmp.Crema = realvalue
	case SwapLifinityTuple:
		tmp.Enum = 9
		tmp.Lifinity = realvalue
	case SwapMercurialTuple:
		tmp.Enum = 10
		tmp.Mercurial = realvalue
	case SwapCykuraTuple:
		tmp.Enum = 11
		tmp.Cykura = realvalue
	case SwapSerumTuple:
		tmp.Enum = 12
		tmp.Serum = realvalue
	case SwapMarinadeDepositTuple:
		tmp.Enum = 13
		tmp.MarinadeDeposit = realvalue
	case SwapMarinadeUnstakeTuple:
		tmp.Enum = 14
		tmp.MarinadeUnstake = realvalue
	case SwapAldrinTuple:
		tmp.Enum = 15
		tmp.Aldrin = realvalue
	case SwapAldrinV2Tuple:
		tmp.Enum = 16
		tmp.AldrinV2 = realvalue
	case SwapWhirlpoolTuple:
		tmp.Enum = 17
		tmp.Whirlpool = realvalue
	case SwapInvariantTuple:
		tmp.Enum = 18
		tmp.Invariant = realvalue
	case SwapMeteoraTuple:
		tmp.Enum = 19
		tmp.Meteora = realvalue
	case SwapGooseFXTuple:
		tmp.Enum = 20
		tmp.GooseFX = realvalue
	case SwapDeltaFiTuple:
		tmp.Enum = 21
		tmp.DeltaFi = realvalue
	case SwapBalansolTuple:
		tmp.Enum = 22
		tmp.Balansol = realvalue
	case SwapMarcoPoloTuple:
		tmp.Enum = 23
		tmp.MarcoPolo = realvalue
	case SwapDradexTuple:
		tmp.Enum = 24
		tmp.Dradex = realvalue
	case SwapLifinityV2Tuple:
		tmp.Enum = 25
		tmp.LifinityV2 = realvalue
	case SwapRaydiumClmmTuple:
		tmp.Enum = 26
		tmp.RaydiumClmm = realvalue
	case SwapOpenbookTuple:
		tmp.Enum = 27
		tmp.Openbook = realvalue
	case SwapPhoenixTuple:
		tmp.Enum = 28
		tmp.Phoenix = realvalue
	case SwapSymmetryTuple:
		tmp.Enum = 29
		tmp.Symmetry = realvalue
	case SwapTokenSwapV2Tuple:
		tmp.Enum = 30
		tmp.TokenSwapV2 = realvalue
	case SwapHeliumTreasuryManagementRedeemV0Tuple:
		tmp.Enum = 31
		tmp.HeliumTreasuryManagementRedeemV0 = realvalue
	case SwapStakeDexStakeWrappedSolTuple:
		tmp.Enum = 32
		tmp.StakeDexStakeWrappedSol = realvalue
	case SwapStakeDexSwapViaStakeTuple:
		tmp.Enum = 33
		tmp.StakeDexSwapViaStake = realvalue
	case SwapGooseFXV2Tuple:
		tmp.Enum = 34
		tmp.GooseFXV2 = realvalue
	case SwapPerpsTuple:
		tmp.Enum = 35
		tmp.Perps = realvalue
	case SwapPerpsAddLiquidityTuple:
		tmp.Enum = 36
		tmp.PerpsAddLiquidity = realvalue
	case SwapPerpsRemoveLiquidityTuple:
		tmp.Enum = 37
		tmp.PerpsRemoveLiquidity = realvalue
	case SwapMeteoraDlmmTuple:
		tmp.Enum = 38
		tmp.MeteoraDlmm = realvalue
	case SwapOpenBookV2Tuple:
		tmp.Enum = 39
		tmp.OpenBookV2 = realvalue
	case SwapRaydiumClmmV2Tuple:
		tmp.Enum = 40
		tmp.RaydiumClmmV2 = realvalue
	case SwapStakeDexPrefundWithdrawStakeAndDepositStakeTuple:
		tmp.Enum = 41
		tmp.StakeDexPrefundWithdrawStakeAndDepositStake = realvalue
	case SwapCloneTuple:
		tmp.Enum = 42
		tmp.Clone = realvalue
	case SwapSanctumSTuple:
		tmp.Enum = 43
		tmp.SanctumS = realvalue
	case SwapSanctumSAddLiquidityTuple:
		tmp.Enum = 44
		tmp.SanctumSAddLiquidity = realvalue
	case SwapSanctumSRemoveLiquidityTuple:
		tmp.Enum = 45
		tmp.SanctumSRemoveLiquidity = realvalue
	case SwapRaydiumCPTuple:
		tmp.Enum = 46
		tmp.RaydiumCP = realvalue
	case SwapWhirlpoolSwapV2Tuple:
		tmp.Enum = 47
		tmp.WhirlpoolSwapV2 = realvalue
	case SwapOneIntroTuple:
		tmp.Enum = 48
		tmp.OneIntro = realvalue
	case SwapPumpdotfunWrappedBuyTuple:
		tmp.Enum = 49
		tmp.PumpdotfunWrappedBuy = realvalue
	case SwapPumpdotfunWrappedSellTuple:
		tmp.Enum = 50
		tmp.PumpdotfunWrappedSell = realvalue
	case SwapPerpsV2Tuple:
		tmp.Enum = 51
		tmp.PerpsV2 = realvalue
	case SwapPerpsV2AddLiquidityTuple:
		tmp.Enum = 52
		tmp.PerpsV2AddLiquidity = realvalue
	case SwapPerpsV2RemoveLiquidityTuple:
		tmp.Enum = 53
		tmp.PerpsV2RemoveLiquidity = realvalue
	case SwapMoonshotWrappedBuyTuple:
		tmp.Enum = 54
		tmp.MoonshotWrappedBuy = realvalue
	case SwapMoonshotWrappedSellTuple:
		tmp.Enum = 55
		tmp.MoonshotWrappedSell = realvalue
	case SwapStabbleStableSwapTuple:
		tmp.Enum = 56
		tmp.StabbleStableSwap = realvalue
	case SwapStabbleWeightedSwapTuple:
		tmp.Enum = 57
		tmp.StabbleWeightedSwap = realvalue
	case SwapObricTuple:
		tmp.Enum = 58
		tmp.Obric = realvalue
	case SwapFoxBuyFromEstimatedCostTuple:
		tmp.Enum = 59
		tmp.FoxBuyFromEstimatedCost = realvalue
	case SwapFoxClaimPartialTuple:
		tmp.Enum = 60
		tmp.FoxClaimPartial = realvalue
	case SwapSolFiTuple:
		tmp.Enum = 61
		tmp.SolFi = realvalue
	case SwapSolayerDelegateNoInitTuple:
		tmp.Enum = 62
		tmp.SolayerDelegateNoInit = realvalue
	case SwapSolayerUndelegateNoInitTuple:
		tmp.Enum = 63
		tmp.SolayerUndelegateNoInit = realvalue
	case SwapTokenMillTuple:
		tmp.Enum = 64
		tmp.TokenMill = realvalue
	case SwapDaosFunBuyTuple:
		tmp.Enum = 65
		tmp.DaosFunBuy = realvalue
	case SwapDaosFunSellTuple:
		tmp.Enum = 66
		tmp.DaosFunSell = realvalue
	case SwapZeroFiTuple:
		tmp.Enum = 67
		tmp.ZeroFi = realvalue
	case SwapStakeDexWithdrawWrappedSolTuple:
		tmp.Enum = 68
		tmp.StakeDexWithdrawWrappedSol = realvalue
	case SwapVirtualsBuyTuple:
		tmp.Enum = 69
		tmp.VirtualsBuy = realvalue
	case SwapVirtualsSellTuple:
		tmp.Enum = 70
		tmp.VirtualsSell = realvalue
	case SwapPerenaTuple:
		tmp.Enum = 71
		tmp.Perena = realvalue
	case SwapPumpdotfunAmmBuyTuple:
		tmp.Enum = 72
		tmp.PumpdotfunAmmBuy = realvalue
	case SwapPumpdotfunAmmSellTuple:
		tmp.Enum = 73
		tmp.PumpdotfunAmmSell = realvalue
	case SwapGammaTuple:
		tmp.Enum = 74
		tmp.Gamma = realvalue
	case SwapMeteoraDlmmSwapV2Tuple:
		tmp.Enum = 75
		tmp.MeteoraDlmmSwapV2 = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *Swap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(swapContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.Saber
	case 1:
		obj.Value = tmp.SaberAddDecimalsDeposit
	case 2:
		obj.Value = tmp.SaberAddDecimalsWithdraw
	case 3:
		obj.Value = tmp.TokenSwap
	case 4:
		obj.Value = tmp.Sencha
	case 5:
		obj.Value = tmp.Step
	case 6:
		obj.Value = tmp.Cropper
	case 7:
		obj.Value = tmp.Raydium
	case 8:
		obj.Value = tmp.Crema
	case 9:
		obj.Value = tmp.Lifinity
	case 10:
		obj.Value = tmp.Mercurial
	case 11:
		obj.Value = tmp.Cykura
	case 12:
		obj.Value = tmp.Serum
	case 13:
		obj.Value = tmp.MarinadeDeposit
	case 14:
		obj.Value = tmp.MarinadeUnstake
	case 15:
		obj.Value = tmp.Aldrin
	case 16:
		obj.Value = tmp.AldrinV2
	case 17:
		obj.Value = tmp.Whirlpool
	case 18:
		obj.Value = tmp.Invariant
	case 19:
		obj.Value = tmp.Meteora
	case 20:
		obj.Value = tmp.GooseFX
	case 21:
		obj.Value = tmp.DeltaFi
	case 22:
		obj.Value = tmp.Balansol
	case 23:
		obj.Value = tmp.MarcoPolo
	case 24:
		obj.Value = tmp.Dradex
	case 25:
		obj.Value = tmp.LifinityV2
	case 26:
		obj.Value = tmp.RaydiumClmm
	case 27:
		obj.Value = tmp.Openbook
	case 28:
		obj.Value = tmp.Phoenix
	case 29:
		obj.Value = tmp.Symmetry
	case 30:
		obj.Value = tmp.TokenSwapV2
	case 31:
		obj.Value = tmp.HeliumTreasuryManagementRedeemV0
	case 32:
		obj.Value = tmp.StakeDexStakeWrappedSol
	case 33:
		obj.Value = tmp.StakeDexSwapViaStake
	case 34:
		obj.Value = tmp.GooseFXV2
	case 35:
		obj.Value = tmp.Perps
	case 36:
		obj.Value = tmp.PerpsAddLiquidity
	case 37:
		obj.Value = tmp.PerpsRemoveLiquidity
	case 38:
		obj.Value = tmp.MeteoraDlmm
	case 39:
		obj.Value = tmp.OpenBookV2
	case 40:
		obj.Value = tmp.RaydiumClmmV2
	case 41:
		obj.Value = tmp.StakeDexPrefundWithdrawStakeAndDepositStake
	case 42:
		obj.Value = tmp.Clone
	case 43:
		obj.Value = tmp.SanctumS
	case 44:
		obj.Value = tmp.SanctumSAddLiquidity
	case 45:
		obj.Value = tmp.SanctumSRemoveLiquidity
	case 46:
		obj.Value = tmp.RaydiumCP
	case 47:
		obj.Value = tmp.WhirlpoolSwapV2
	case 48:
		obj.Value = tmp.OneIntro
	case 49:
		obj.Value = tmp.PumpdotfunWrappedBuy
	case 50:
		obj.Value = tmp.PumpdotfunWrappedSell
	case 51:
		obj.Value = tmp.PerpsV2
	case 52:
		obj.Value = tmp.PerpsV2AddLiquidity
	case 53:
		obj.Value = tmp.PerpsV2RemoveLiquidity
	case 54:
		obj.Value = tmp.MoonshotWrappedBuy
	case 55:
		obj.Value = tmp.MoonshotWrappedSell
	case 56:
		obj.Value = tmp.StabbleStableSwap
	case 57:
		obj.Value = tmp.StabbleWeightedSwap
	case 58:
		obj.Value = tmp.Obric
	case 59:
		obj.Value = tmp.FoxBuyFromEstimatedCost
	case 60:
		obj.Value = tmp.FoxClaimPartial
	case 61:
		obj.Value = tmp.SolFi
	case 62:
		obj.Value = tmp.SolayerDelegateNoInit
	case 63:
		obj.Value = tmp.SolayerUndelegateNoInit
	case 64:
		obj.Value = tmp.TokenMill
	case 65:
		obj.Value = tmp.DaosFunBuy
	case 66:
		obj.Value = tmp.DaosFunSell
	case 67:
		obj.Value = tmp.ZeroFi
	case 68:
		obj.Value = tmp.StakeDexWithdrawWrappedSol
	case 69:
		obj.Value = tmp.VirtualsBuy
	case 70:
		obj.Value = tmp.VirtualsSell
	case 71:
		obj.Value = tmp.Perena
	case 72:
		obj.Value = tmp.PumpdotfunAmmBuy
	case 73:
		obj.Value = tmp.PumpdotfunAmmSell
	case 74:
		obj.Value = tmp.Gamma
	case 75:
		obj.Value = tmp.MeteoraDlmmSwapV2
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type swap interface {
	isSwap()
}

type swapContainer struct {
	Enum                                        ag_binary.BorshEnum `borsh_enum:"true"`
	Saber                                       SwapSaberTuple
	SaberAddDecimalsDeposit                     SwapSaberAddDecimalsDepositTuple
	SaberAddDecimalsWithdraw                    SwapSaberAddDecimalsWithdrawTuple
	TokenSwap                                   SwapTokenSwapTuple
	Sencha                                      SwapSenchaTuple
	Step                                        SwapStepTuple
	Cropper                                     SwapCropperTuple
	Raydium                                     SwapRaydiumTuple
	Crema                                       SwapCremaTuple
	Lifinity                                    SwapLifinityTuple
	Mercurial                                   SwapMercurialTuple
	Cykura                                      SwapCykuraTuple
	Serum                                       SwapSerumTuple
	MarinadeDeposit                             SwapMarinadeDepositTuple
	MarinadeUnstake                             SwapMarinadeUnstakeTuple
	Aldrin                                      SwapAldrinTuple
	AldrinV2                                    SwapAldrinV2Tuple
	Whirlpool                                   SwapWhirlpoolTuple
	Invariant                                   SwapInvariantTuple
	Meteora                                     SwapMeteoraTuple
	GooseFX                                     SwapGooseFXTuple
	DeltaFi                                     SwapDeltaFiTuple
	Balansol                                    SwapBalansolTuple
	MarcoPolo                                   SwapMarcoPoloTuple
	Dradex                                      SwapDradexTuple
	LifinityV2                                  SwapLifinityV2Tuple
	RaydiumClmm                                 SwapRaydiumClmmTuple
	Openbook                                    SwapOpenbookTuple
	Phoenix                                     SwapPhoenixTuple
	Symmetry                                    SwapSymmetryTuple
	TokenSwapV2                                 SwapTokenSwapV2Tuple
	HeliumTreasuryManagementRedeemV0            SwapHeliumTreasuryManagementRedeemV0Tuple
	StakeDexStakeWrappedSol                     SwapStakeDexStakeWrappedSolTuple
	StakeDexSwapViaStake                        SwapStakeDexSwapViaStakeTuple
	GooseFXV2                                   SwapGooseFXV2Tuple
	Perps                                       SwapPerpsTuple
	PerpsAddLiquidity                           SwapPerpsAddLiquidityTuple
	PerpsRemoveLiquidity                        SwapPerpsRemoveLiquidityTuple
	MeteoraDlmm                                 SwapMeteoraDlmmTuple
	OpenBookV2                                  SwapOpenBookV2Tuple
	RaydiumClmmV2                               SwapRaydiumClmmV2Tuple
	StakeDexPrefundWithdrawStakeAndDepositStake SwapStakeDexPrefundWithdrawStakeAndDepositStakeTuple
	Clone                                       SwapCloneTuple
	SanctumS                                    SwapSanctumSTuple
	SanctumSAddLiquidity                        SwapSanctumSAddLiquidityTuple
	SanctumSRemoveLiquidity                     SwapSanctumSRemoveLiquidityTuple
	RaydiumCP                                   SwapRaydiumCPTuple
	WhirlpoolSwapV2                             SwapWhirlpoolSwapV2Tuple
	OneIntro                                    SwapOneIntroTuple
	PumpdotfunWrappedBuy                        SwapPumpdotfunWrappedBuyTuple
	PumpdotfunWrappedSell                       SwapPumpdotfunWrappedSellTuple
	PerpsV2                                     SwapPerpsV2Tuple
	PerpsV2AddLiquidity                         SwapPerpsV2AddLiquidityTuple
	PerpsV2RemoveLiquidity                      SwapPerpsV2RemoveLiquidityTuple
	MoonshotWrappedBuy                          SwapMoonshotWrappedBuyTuple
	MoonshotWrappedSell                         SwapMoonshotWrappedSellTuple
	StabbleStableSwap                           SwapStabbleStableSwapTuple
	StabbleWeightedSwap                         SwapStabbleWeightedSwapTuple
	Obric                                       SwapObricTuple
	FoxBuyFromEstimatedCost                     SwapFoxBuyFromEstimatedCostTuple
	FoxClaimPartial                             SwapFoxClaimPartialTuple
	SolFi                                       SwapSolFiTuple
	SolayerDelegateNoInit                       SwapSolayerDelegateNoInitTuple
	SolayerUndelegateNoInit                     SwapSolayerUndelegateNoInitTuple
	TokenMill                                   SwapTokenMillTuple
	DaosFunBuy                                  SwapDaosFunBuyTuple
	DaosFunSell                                 SwapDaosFunSellTuple
	ZeroFi                                      SwapZeroFiTuple
	StakeDexWithdrawWrappedSol                  SwapStakeDexWithdrawWrappedSolTuple
	VirtualsBuy                                 SwapVirtualsBuyTuple
	VirtualsSell                                SwapVirtualsSellTuple
	Perena                                      SwapPerenaTuple
	PumpdotfunAmmBuy                            SwapPumpdotfunAmmBuyTuple
	PumpdotfunAmmSell                           SwapPumpdotfunAmmSellTuple
	Gamma                                       SwapGammaTuple
	MeteoraDlmmSwapV2                           SwapMeteoraDlmmSwapV2Tuple
}

type SwapSaberTuple struct{}

func (obj SwapSaberTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapSaberTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapSaberTuple) isSwap() {}

type SwapSaberAddDecimalsDepositTuple struct{}

func (obj SwapSaberAddDecimalsDepositTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapSaberAddDecimalsDepositTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapSaberAddDecimalsDepositTuple) isSwap() {}

type SwapSaberAddDecimalsWithdrawTuple struct{}

func (obj SwapSaberAddDecimalsWithdrawTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapSaberAddDecimalsWithdrawTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapSaberAddDecimalsWithdrawTuple) isSwap() {}

type SwapTokenSwapTuple struct{}

func (obj SwapTokenSwapTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapTokenSwapTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapTokenSwapTuple) isSwap() {}

type SwapSenchaTuple struct{}

func (obj SwapSenchaTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapSenchaTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapSenchaTuple) isSwap() {}

type SwapStepTuple struct{}

func (obj SwapStepTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapStepTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapStepTuple) isSwap() {}

type SwapCropperTuple struct{}

func (obj SwapCropperTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapCropperTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapCropperTuple) isSwap() {}

type SwapRaydiumTuple struct{}

func (obj SwapRaydiumTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapRaydiumTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapRaydiumTuple) isSwap() {}

type SwapCremaTuple struct {
	AToB bool
}

func (obj SwapCremaTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AToB` param:
	err = encoder.Encode(obj.AToB)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapCremaTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AToB`:
	err = decoder.Decode(&obj.AToB)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapCremaTuple) isSwap() {}

type SwapLifinityTuple struct{}

func (obj SwapLifinityTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapLifinityTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapLifinityTuple) isSwap() {}

type SwapMercurialTuple struct{}

func (obj SwapMercurialTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapMercurialTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapMercurialTuple) isSwap() {}

type SwapCykuraTuple struct{}

func (obj SwapCykuraTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapCykuraTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapCykuraTuple) isSwap() {}

type SwapSerumTuple struct {
	Side Side
}

func (obj SwapSerumTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapSerumTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapSerumTuple) isSwap() {}

type SwapMarinadeDepositTuple struct{}

func (obj SwapMarinadeDepositTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapMarinadeDepositTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapMarinadeDepositTuple) isSwap() {}

type SwapMarinadeUnstakeTuple struct{}

func (obj SwapMarinadeUnstakeTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapMarinadeUnstakeTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapMarinadeUnstakeTuple) isSwap() {}

type SwapAldrinTuple struct {
	Side Side
}

func (obj SwapAldrinTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapAldrinTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapAldrinTuple) isSwap() {}

type SwapAldrinV2Tuple struct {
	Side Side
}

func (obj SwapAldrinV2Tuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapAldrinV2Tuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapAldrinV2Tuple) isSwap() {}

type SwapWhirlpoolTuple struct {
	AToB bool
}

func (obj SwapWhirlpoolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AToB` param:
	err = encoder.Encode(obj.AToB)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapWhirlpoolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AToB`:
	err = decoder.Decode(&obj.AToB)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapWhirlpoolTuple) isSwap() {}

type SwapInvariantTuple struct {
	XToY bool
}

func (obj SwapInvariantTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `XToY` param:
	err = encoder.Encode(obj.XToY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapInvariantTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `XToY`:
	err = decoder.Decode(&obj.XToY)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapInvariantTuple) isSwap() {}

type SwapMeteoraTuple struct{}

func (obj SwapMeteoraTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapMeteoraTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapMeteoraTuple) isSwap() {}

type SwapGooseFXTuple struct{}

func (obj SwapGooseFXTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapGooseFXTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapGooseFXTuple) isSwap() {}

type SwapDeltaFiTuple struct {
	Stable bool
}

func (obj SwapDeltaFiTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Stable` param:
	err = encoder.Encode(obj.Stable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapDeltaFiTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Stable`:
	err = decoder.Decode(&obj.Stable)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapDeltaFiTuple) isSwap() {}

type SwapBalansolTuple struct{}

func (obj SwapBalansolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapBalansolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapBalansolTuple) isSwap() {}

type SwapMarcoPoloTuple struct {
	XToY bool
}

func (obj SwapMarcoPoloTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `XToY` param:
	err = encoder.Encode(obj.XToY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapMarcoPoloTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `XToY`:
	err = decoder.Decode(&obj.XToY)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapMarcoPoloTuple) isSwap() {}

type SwapDradexTuple struct {
	Side Side
}

func (obj SwapDradexTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapDradexTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapDradexTuple) isSwap() {}

type SwapLifinityV2Tuple struct{}

func (obj SwapLifinityV2Tuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapLifinityV2Tuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapLifinityV2Tuple) isSwap() {}

type SwapRaydiumClmmTuple struct{}

func (obj SwapRaydiumClmmTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapRaydiumClmmTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapRaydiumClmmTuple) isSwap() {}

type SwapOpenbookTuple struct {
	Side Side
}

func (obj SwapOpenbookTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapOpenbookTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapOpenbookTuple) isSwap() {}

type SwapPhoenixTuple struct {
	Side Side
}

func (obj SwapPhoenixTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapPhoenixTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapPhoenixTuple) isSwap() {}

type SwapSymmetryTuple struct {
	FromTokenId uint64
	ToTokenId   uint64
}

func (obj SwapSymmetryTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FromTokenId` param:
	err = encoder.Encode(obj.FromTokenId)
	if err != nil {
		return err
	}
	// Serialize `ToTokenId` param:
	err = encoder.Encode(obj.ToTokenId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapSymmetryTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FromTokenId`:
	err = decoder.Decode(&obj.FromTokenId)
	if err != nil {
		return err
	}
	// Deserialize `ToTokenId`:
	err = decoder.Decode(&obj.ToTokenId)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapSymmetryTuple) isSwap() {}

type SwapTokenSwapV2Tuple struct{}

func (obj SwapTokenSwapV2Tuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapTokenSwapV2Tuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapTokenSwapV2Tuple) isSwap() {}

type SwapHeliumTreasuryManagementRedeemV0Tuple struct{}

func (obj SwapHeliumTreasuryManagementRedeemV0Tuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapHeliumTreasuryManagementRedeemV0Tuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapHeliumTreasuryManagementRedeemV0Tuple) isSwap() {}

type SwapStakeDexStakeWrappedSolTuple struct{}

func (obj SwapStakeDexStakeWrappedSolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapStakeDexStakeWrappedSolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapStakeDexStakeWrappedSolTuple) isSwap() {}

type SwapStakeDexSwapViaStakeTuple struct {
	BridgeStakeSeed uint32
}

func (obj SwapStakeDexSwapViaStakeTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BridgeStakeSeed` param:
	err = encoder.Encode(obj.BridgeStakeSeed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapStakeDexSwapViaStakeTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BridgeStakeSeed`:
	err = decoder.Decode(&obj.BridgeStakeSeed)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapStakeDexSwapViaStakeTuple) isSwap() {}

type SwapGooseFXV2Tuple struct{}

func (obj SwapGooseFXV2Tuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapGooseFXV2Tuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapGooseFXV2Tuple) isSwap() {}

type SwapPerpsTuple struct{}

func (obj SwapPerpsTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPerpsTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapPerpsTuple) isSwap() {}

type SwapPerpsAddLiquidityTuple struct{}

func (obj SwapPerpsAddLiquidityTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPerpsAddLiquidityTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapPerpsAddLiquidityTuple) isSwap() {}

type SwapPerpsRemoveLiquidityTuple struct{}

func (obj SwapPerpsRemoveLiquidityTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPerpsRemoveLiquidityTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapPerpsRemoveLiquidityTuple) isSwap() {}

type SwapMeteoraDlmmTuple struct{}

func (obj SwapMeteoraDlmmTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapMeteoraDlmmTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapMeteoraDlmmTuple) isSwap() {}

type SwapOpenBookV2Tuple struct {
	Side Side
}

func (obj SwapOpenBookV2Tuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapOpenBookV2Tuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapOpenBookV2Tuple) isSwap() {}

type SwapRaydiumClmmV2Tuple struct{}

func (obj SwapRaydiumClmmV2Tuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapRaydiumClmmV2Tuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapRaydiumClmmV2Tuple) isSwap() {}

type SwapStakeDexPrefundWithdrawStakeAndDepositStakeTuple struct {
	BridgeStakeSeed uint32
}

func (obj SwapStakeDexPrefundWithdrawStakeAndDepositStakeTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BridgeStakeSeed` param:
	err = encoder.Encode(obj.BridgeStakeSeed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapStakeDexPrefundWithdrawStakeAndDepositStakeTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BridgeStakeSeed`:
	err = decoder.Decode(&obj.BridgeStakeSeed)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapStakeDexPrefundWithdrawStakeAndDepositStakeTuple) isSwap() {}

type SwapCloneTuple struct {
	PoolIndex            uint8
	QuantityIsInput      bool
	QuantityIsCollateral bool
}

func (obj SwapCloneTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolIndex` param:
	err = encoder.Encode(obj.PoolIndex)
	if err != nil {
		return err
	}
	// Serialize `QuantityIsInput` param:
	err = encoder.Encode(obj.QuantityIsInput)
	if err != nil {
		return err
	}
	// Serialize `QuantityIsCollateral` param:
	err = encoder.Encode(obj.QuantityIsCollateral)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapCloneTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolIndex`:
	err = decoder.Decode(&obj.PoolIndex)
	if err != nil {
		return err
	}
	// Deserialize `QuantityIsInput`:
	err = decoder.Decode(&obj.QuantityIsInput)
	if err != nil {
		return err
	}
	// Deserialize `QuantityIsCollateral`:
	err = decoder.Decode(&obj.QuantityIsCollateral)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapCloneTuple) isSwap() {}

type SwapSanctumSTuple struct {
	SrcLstValueCalcAccs uint8
	DstLstValueCalcAccs uint8
	SrcLstIndex         uint32
	DstLstIndex         uint32
}

func (obj SwapSanctumSTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SrcLstValueCalcAccs` param:
	err = encoder.Encode(obj.SrcLstValueCalcAccs)
	if err != nil {
		return err
	}
	// Serialize `DstLstValueCalcAccs` param:
	err = encoder.Encode(obj.DstLstValueCalcAccs)
	if err != nil {
		return err
	}
	// Serialize `SrcLstIndex` param:
	err = encoder.Encode(obj.SrcLstIndex)
	if err != nil {
		return err
	}
	// Serialize `DstLstIndex` param:
	err = encoder.Encode(obj.DstLstIndex)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapSanctumSTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SrcLstValueCalcAccs`:
	err = decoder.Decode(&obj.SrcLstValueCalcAccs)
	if err != nil {
		return err
	}
	// Deserialize `DstLstValueCalcAccs`:
	err = decoder.Decode(&obj.DstLstValueCalcAccs)
	if err != nil {
		return err
	}
	// Deserialize `SrcLstIndex`:
	err = decoder.Decode(&obj.SrcLstIndex)
	if err != nil {
		return err
	}
	// Deserialize `DstLstIndex`:
	err = decoder.Decode(&obj.DstLstIndex)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapSanctumSTuple) isSwap() {}

type SwapSanctumSAddLiquidityTuple struct {
	LstValueCalcAccs uint8
	LstIndex         uint32
}

func (obj SwapSanctumSAddLiquidityTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LstValueCalcAccs` param:
	err = encoder.Encode(obj.LstValueCalcAccs)
	if err != nil {
		return err
	}
	// Serialize `LstIndex` param:
	err = encoder.Encode(obj.LstIndex)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapSanctumSAddLiquidityTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LstValueCalcAccs`:
	err = decoder.Decode(&obj.LstValueCalcAccs)
	if err != nil {
		return err
	}
	// Deserialize `LstIndex`:
	err = decoder.Decode(&obj.LstIndex)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapSanctumSAddLiquidityTuple) isSwap() {}

type SwapSanctumSRemoveLiquidityTuple struct {
	LstValueCalcAccs uint8
	LstIndex         uint32
}

func (obj SwapSanctumSRemoveLiquidityTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LstValueCalcAccs` param:
	err = encoder.Encode(obj.LstValueCalcAccs)
	if err != nil {
		return err
	}
	// Serialize `LstIndex` param:
	err = encoder.Encode(obj.LstIndex)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapSanctumSRemoveLiquidityTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LstValueCalcAccs`:
	err = decoder.Decode(&obj.LstValueCalcAccs)
	if err != nil {
		return err
	}
	// Deserialize `LstIndex`:
	err = decoder.Decode(&obj.LstIndex)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapSanctumSRemoveLiquidityTuple) isSwap() {}

type SwapRaydiumCPTuple struct{}

func (obj SwapRaydiumCPTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapRaydiumCPTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapRaydiumCPTuple) isSwap() {}

type SwapWhirlpoolSwapV2Tuple struct {
	AToB                  bool
	RemainingAccountsInfo *RemainingAccountsInfo `bin:"optional"`
}

func (obj SwapWhirlpoolSwapV2Tuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AToB` param:
	err = encoder.Encode(obj.AToB)
	if err != nil {
		return err
	}
	// Serialize `RemainingAccountsInfo` param (optional):
	{
		if obj.RemainingAccountsInfo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RemainingAccountsInfo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *SwapWhirlpoolSwapV2Tuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AToB`:
	err = decoder.Decode(&obj.AToB)
	if err != nil {
		return err
	}
	// Deserialize `RemainingAccountsInfo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RemainingAccountsInfo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (_ SwapWhirlpoolSwapV2Tuple) isSwap() {}

type SwapOneIntroTuple struct{}

func (obj SwapOneIntroTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapOneIntroTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapOneIntroTuple) isSwap() {}

type SwapPumpdotfunWrappedBuyTuple struct{}

func (obj SwapPumpdotfunWrappedBuyTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPumpdotfunWrappedBuyTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapPumpdotfunWrappedBuyTuple) isSwap() {}

type SwapPumpdotfunWrappedSellTuple struct{}

func (obj SwapPumpdotfunWrappedSellTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPumpdotfunWrappedSellTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapPumpdotfunWrappedSellTuple) isSwap() {}

type SwapPerpsV2Tuple struct{}

func (obj SwapPerpsV2Tuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPerpsV2Tuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapPerpsV2Tuple) isSwap() {}

type SwapPerpsV2AddLiquidityTuple struct{}

func (obj SwapPerpsV2AddLiquidityTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPerpsV2AddLiquidityTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapPerpsV2AddLiquidityTuple) isSwap() {}

type SwapPerpsV2RemoveLiquidityTuple struct{}

func (obj SwapPerpsV2RemoveLiquidityTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPerpsV2RemoveLiquidityTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapPerpsV2RemoveLiquidityTuple) isSwap() {}

type SwapMoonshotWrappedBuyTuple struct{}

func (obj SwapMoonshotWrappedBuyTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapMoonshotWrappedBuyTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapMoonshotWrappedBuyTuple) isSwap() {}

type SwapMoonshotWrappedSellTuple struct{}

func (obj SwapMoonshotWrappedSellTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapMoonshotWrappedSellTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapMoonshotWrappedSellTuple) isSwap() {}

type SwapStabbleStableSwapTuple struct{}

func (obj SwapStabbleStableSwapTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapStabbleStableSwapTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapStabbleStableSwapTuple) isSwap() {}

type SwapStabbleWeightedSwapTuple struct{}

func (obj SwapStabbleWeightedSwapTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapStabbleWeightedSwapTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapStabbleWeightedSwapTuple) isSwap() {}

type SwapObricTuple struct {
	XToY bool
}

func (obj SwapObricTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `XToY` param:
	err = encoder.Encode(obj.XToY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapObricTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `XToY`:
	err = decoder.Decode(&obj.XToY)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapObricTuple) isSwap() {}

type SwapFoxBuyFromEstimatedCostTuple struct{}

func (obj SwapFoxBuyFromEstimatedCostTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapFoxBuyFromEstimatedCostTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapFoxBuyFromEstimatedCostTuple) isSwap() {}

type SwapFoxClaimPartialTuple struct {
	IsY bool
}

func (obj SwapFoxClaimPartialTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IsY` param:
	err = encoder.Encode(obj.IsY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapFoxClaimPartialTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IsY`:
	err = decoder.Decode(&obj.IsY)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapFoxClaimPartialTuple) isSwap() {}

type SwapSolFiTuple struct {
	IsQuoteToBase bool
}

func (obj SwapSolFiTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IsQuoteToBase` param:
	err = encoder.Encode(obj.IsQuoteToBase)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapSolFiTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IsQuoteToBase`:
	err = decoder.Decode(&obj.IsQuoteToBase)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapSolFiTuple) isSwap() {}

type SwapSolayerDelegateNoInitTuple struct{}

func (obj SwapSolayerDelegateNoInitTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapSolayerDelegateNoInitTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapSolayerDelegateNoInitTuple) isSwap() {}

type SwapSolayerUndelegateNoInitTuple struct{}

func (obj SwapSolayerUndelegateNoInitTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapSolayerUndelegateNoInitTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapSolayerUndelegateNoInitTuple) isSwap() {}

type SwapTokenMillTuple struct {
	Side Side
}

func (obj SwapTokenMillTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapTokenMillTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapTokenMillTuple) isSwap() {}

type SwapDaosFunBuyTuple struct{}

func (obj SwapDaosFunBuyTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapDaosFunBuyTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapDaosFunBuyTuple) isSwap() {}

type SwapDaosFunSellTuple struct{}

func (obj SwapDaosFunSellTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapDaosFunSellTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapDaosFunSellTuple) isSwap() {}

type SwapZeroFiTuple struct{}

func (obj SwapZeroFiTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapZeroFiTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapZeroFiTuple) isSwap() {}

type SwapStakeDexWithdrawWrappedSolTuple struct{}

func (obj SwapStakeDexWithdrawWrappedSolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapStakeDexWithdrawWrappedSolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapStakeDexWithdrawWrappedSolTuple) isSwap() {}

type SwapVirtualsBuyTuple struct{}

func (obj SwapVirtualsBuyTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapVirtualsBuyTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapVirtualsBuyTuple) isSwap() {}

type SwapVirtualsSellTuple struct{}

func (obj SwapVirtualsSellTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapVirtualsSellTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapVirtualsSellTuple) isSwap() {}

type SwapPerenaTuple struct {
	InIndex  uint8
	OutIndex uint8
}

func (obj SwapPerenaTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `InIndex` param:
	err = encoder.Encode(obj.InIndex)
	if err != nil {
		return err
	}
	// Serialize `OutIndex` param:
	err = encoder.Encode(obj.OutIndex)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapPerenaTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `InIndex`:
	err = decoder.Decode(&obj.InIndex)
	if err != nil {
		return err
	}
	// Deserialize `OutIndex`:
	err = decoder.Decode(&obj.OutIndex)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapPerenaTuple) isSwap() {}

type SwapPumpdotfunAmmBuyTuple struct{}

func (obj SwapPumpdotfunAmmBuyTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPumpdotfunAmmBuyTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapPumpdotfunAmmBuyTuple) isSwap() {}

type SwapPumpdotfunAmmSellTuple struct{}

func (obj SwapPumpdotfunAmmSellTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPumpdotfunAmmSellTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapPumpdotfunAmmSellTuple) isSwap() {}

type SwapGammaTuple struct{}

func (obj SwapGammaTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapGammaTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ SwapGammaTuple) isSwap() {}

type SwapMeteoraDlmmSwapV2Tuple struct {
	RemainingAccountsInfo RemainingAccountsInfo
}

func (obj SwapMeteoraDlmmSwapV2Tuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RemainingAccountsInfo` param:
	err = encoder.Encode(obj.RemainingAccountsInfo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapMeteoraDlmmSwapV2Tuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RemainingAccountsInfo`:
	err = decoder.Decode(&obj.RemainingAccountsInfo)
	if err != nil {
		return err
	}
	return nil
}

func (_ SwapMeteoraDlmmSwapV2Tuple) isSwap() {}

type SwapEvent struct {
	Amm          ag_solanago.PublicKey
	InputMint    ag_solanago.PublicKey
	InputAmount  uint64
	OutputMint   ag_solanago.PublicKey
	OutputAmount uint64
}

func (obj SwapEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amm` param:
	err = encoder.Encode(obj.Amm)
	if err != nil {
		return err
	}
	// Serialize `InputMint` param:
	err = encoder.Encode(obj.InputMint)
	if err != nil {
		return err
	}
	// Serialize `InputAmount` param:
	err = encoder.Encode(obj.InputAmount)
	if err != nil {
		return err
	}
	// Serialize `OutputMint` param:
	err = encoder.Encode(obj.OutputMint)
	if err != nil {
		return err
	}
	// Serialize `OutputAmount` param:
	err = encoder.Encode(obj.OutputAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amm`:
	err = decoder.Decode(&obj.Amm)
	if err != nil {
		return err
	}
	// Deserialize `InputMint`:
	err = decoder.Decode(&obj.InputMint)
	if err != nil {
		return err
	}
	// Deserialize `InputAmount`:
	err = decoder.Decode(&obj.InputAmount)
	if err != nil {
		return err
	}
	// Deserialize `OutputMint`:
	err = decoder.Decode(&obj.OutputMint)
	if err != nil {
		return err
	}
	// Deserialize `OutputAmount`:
	err = decoder.Decode(&obj.OutputAmount)
	if err != nil {
		return err
	}
	return nil
}

type TokenLedger struct {
	TokenAccount ag_solanago.PublicKey
	Amount       uint64
}

func (obj TokenLedger) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenAccount` param:
	err = encoder.Encode(obj.TokenAccount)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenLedger) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenAccount`:
	err = decoder.Decode(&obj.TokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
