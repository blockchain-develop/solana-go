// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateOpenOrders is the `create_open_orders` instruction.
type CreateOpenOrders struct {

	// [0] = [WRITE] open_orders
	//
	// [1] = [WRITE, SIGNER] payer
	//
	// [2] = [] dex_program
	//
	// [3] = [] system_program
	//
	// [4] = [] rent
	//
	// [5] = [] market
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateOpenOrdersInstructionBuilder creates a new `CreateOpenOrders` instruction builder.
func NewCreateOpenOrdersInstructionBuilder() *CreateOpenOrders {
	nd := &CreateOpenOrders{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	nd.AccountMetaSlice[4] = ag_solanago.Meta(Addresses["SysvarRent111111111111111111111111111111111"])
	return nd
}

// SetOpenOrdersAccount sets the "open_orders" account.
func (inst *CreateOpenOrders) SetOpenOrdersAccount(openOrders ag_solanago.PublicKey) *CreateOpenOrders {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(openOrders).WRITE()
	return inst
}

func (inst *CreateOpenOrders) findFindOpenOrdersAddress(market ag_solanago.PublicKey, payer ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: open_orders
	seeds = append(seeds, []byte{byte(0x6f), byte(0x70), byte(0x65), byte(0x6e), byte(0x5f), byte(0x6f), byte(0x72), byte(0x64), byte(0x65), byte(0x72), byte(0x73)})
	// path: market
	seeds = append(seeds, market.Bytes())
	// path: payer
	seeds = append(seeds, payer.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindOpenOrdersAddressWithBumpSeed calculates OpenOrders account address with given seeds and a known bump seed.
func (inst *CreateOpenOrders) FindOpenOrdersAddressWithBumpSeed(market ag_solanago.PublicKey, payer ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindOpenOrdersAddress(market, payer, bumpSeed)
	return
}

func (inst *CreateOpenOrders) MustFindOpenOrdersAddressWithBumpSeed(market ag_solanago.PublicKey, payer ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindOpenOrdersAddress(market, payer, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindOpenOrdersAddress finds OpenOrders account address with given seeds.
func (inst *CreateOpenOrders) FindOpenOrdersAddress(market ag_solanago.PublicKey, payer ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindOpenOrdersAddress(market, payer, 0)
	return
}

func (inst *CreateOpenOrders) MustFindOpenOrdersAddress(market ag_solanago.PublicKey, payer ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindOpenOrdersAddress(market, payer, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetOpenOrdersAccount gets the "open_orders" account.
func (inst *CreateOpenOrders) GetOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateOpenOrders) SetPayerAccount(payer ag_solanago.PublicKey) *CreateOpenOrders {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateOpenOrders) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDexProgramAccount sets the "dex_program" account.
func (inst *CreateOpenOrders) SetDexProgramAccount(dexProgram ag_solanago.PublicKey) *CreateOpenOrders {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(dexProgram)
	return inst
}

// GetDexProgramAccount gets the "dex_program" account.
func (inst *CreateOpenOrders) GetDexProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateOpenOrders) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateOpenOrders {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateOpenOrders) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetRentAccount sets the "rent" account.
func (inst *CreateOpenOrders) SetRentAccount(rent ag_solanago.PublicKey) *CreateOpenOrders {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CreateOpenOrders) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMarketAccount sets the "market" account.
func (inst *CreateOpenOrders) SetMarketAccount(market ag_solanago.PublicKey) *CreateOpenOrders {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(market)
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *CreateOpenOrders) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst CreateOpenOrders) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateOpenOrders,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateOpenOrders) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateOpenOrders) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.OpenOrders is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DexProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Market is not set")
		}
	}
	return nil
}

func (inst *CreateOpenOrders) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateOpenOrders")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   open_orders", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         payer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   dex_program", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          rent", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        market", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj CreateOpenOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateOpenOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateOpenOrdersInstruction declares a new CreateOpenOrders instruction with the provided parameters and accounts.
func NewCreateOpenOrdersInstruction(
	// Accounts:
	openOrders ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	dexProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	market ag_solanago.PublicKey) *CreateOpenOrders {
	return NewCreateOpenOrdersInstructionBuilder().
		SetOpenOrdersAccount(openOrders).
		SetPayerAccount(payer).
		SetDexProgramAccount(dexProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetMarketAccount(market)
}
