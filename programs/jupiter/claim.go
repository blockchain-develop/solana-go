// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Claim is the `claim` instruction.
type Claim struct {
	Id *uint8

	// [0] = [WRITE] wallet
	//
	// [1] = [WRITE] program_authority
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimInstructionBuilder creates a new `Claim` instruction builder.
func NewClaimInstructionBuilder() *Claim {
	nd := &Claim{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetId sets the "id" parameter.
func (inst *Claim) SetId(id uint8) *Claim {
	inst.Id = &id
	return inst
}

// SetWalletAccount sets the "wallet" account.
func (inst *Claim) SetWalletAccount(wallet ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(wallet).WRITE()
	return inst
}

// GetWalletAccount gets the "wallet" account.
func (inst *Claim) GetWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProgramAuthorityAccount sets the "program_authority" account.
func (inst *Claim) SetProgramAuthorityAccount(programAuthority ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(programAuthority).WRITE()
	return inst
}

// GetProgramAuthorityAccount gets the "program_authority" account.
func (inst *Claim) GetProgramAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *Claim) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *Claim) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst Claim) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Claim,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Claim) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Claim) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Id == nil {
			return errors.New("Id parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Wallet is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ProgramAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *Claim) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Claim")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Id", *inst.Id))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           wallet", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("program_authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj Claim) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Claim) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	return nil
}

// NewClaimInstruction declares a new Claim instruction with the provided parameters and accounts.
func NewClaimInstruction(
	// Parameters:
	id uint8,
	// Accounts:
	wallet ag_solanago.PublicKey,
	programAuthority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *Claim {
	return NewClaimInstructionBuilder().
		SetId(id).
		SetWalletAccount(wallet).
		SetProgramAuthorityAccount(programAuthority).
		SetSystemProgramAccount(systemProgram)
}
