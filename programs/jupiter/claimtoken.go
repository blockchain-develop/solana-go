// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClaimToken is the `claim_token` instruction.
type ClaimToken struct {
	Id *uint8

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [] wallet
	//
	// [2] = [] program_authority
	//
	// [3] = [WRITE] program_token_account
	//
	// [4] = [WRITE] destination_token_account
	//
	// [5] = [] mint
	//
	// [6] = [] associated_token_token_program
	//
	// [7] = [] associated_token_program
	//
	// [8] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimTokenInstructionBuilder creates a new `ClaimToken` instruction builder.
func NewClaimTokenInstructionBuilder() *ClaimToken {
	nd := &ClaimToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetId sets the "id" parameter.
func (inst *ClaimToken) SetId(id uint8) *ClaimToken {
	inst.Id = &id
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *ClaimToken) SetPayerAccount(payer ag_solanago.PublicKey) *ClaimToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *ClaimToken) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWalletAccount sets the "wallet" account.
func (inst *ClaimToken) SetWalletAccount(wallet ag_solanago.PublicKey) *ClaimToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(wallet)
	return inst
}

// GetWalletAccount gets the "wallet" account.
func (inst *ClaimToken) GetWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetProgramAuthorityAccount sets the "program_authority" account.
func (inst *ClaimToken) SetProgramAuthorityAccount(programAuthority ag_solanago.PublicKey) *ClaimToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(programAuthority)
	return inst
}

// GetProgramAuthorityAccount gets the "program_authority" account.
func (inst *ClaimToken) GetProgramAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProgramTokenAccountAccount sets the "program_token_account" account.
func (inst *ClaimToken) SetProgramTokenAccountAccount(programTokenAccount ag_solanago.PublicKey) *ClaimToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(programTokenAccount).WRITE()
	return inst
}

// GetProgramTokenAccountAccount gets the "program_token_account" account.
func (inst *ClaimToken) GetProgramTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDestinationTokenAccountAccount sets the "destination_token_account" account.
func (inst *ClaimToken) SetDestinationTokenAccountAccount(destinationTokenAccount ag_solanago.PublicKey) *ClaimToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(destinationTokenAccount).WRITE()
	return inst
}

// GetDestinationTokenAccountAccount gets the "destination_token_account" account.
func (inst *ClaimToken) GetDestinationTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintAccount sets the "mint" account.
func (inst *ClaimToken) SetMintAccount(mint ag_solanago.PublicKey) *ClaimToken {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *ClaimToken) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAssociatedTokenTokenProgramAccount sets the "associated_token_token_program" account.
func (inst *ClaimToken) SetAssociatedTokenTokenProgramAccount(associatedTokenTokenProgram ag_solanago.PublicKey) *ClaimToken {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(associatedTokenTokenProgram)
	return inst
}

// GetAssociatedTokenTokenProgramAccount gets the "associated_token_token_program" account.
func (inst *ClaimToken) GetAssociatedTokenTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *ClaimToken) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *ClaimToken {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *ClaimToken) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *ClaimToken) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ClaimToken {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *ClaimToken) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst ClaimToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClaimToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClaimToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClaimToken) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Id == nil {
			return errors.New("Id parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Wallet is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ProgramAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ProgramTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DestinationTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.AssociatedTokenTokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ClaimToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClaimToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Id", *inst.Id))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                         payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                        wallet", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             program_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                program_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            destination_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                          mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("associated_token_token_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      associated_token_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                system_program", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj ClaimToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ClaimToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	return nil
}

// NewClaimTokenInstruction declares a new ClaimToken instruction with the provided parameters and accounts.
func NewClaimTokenInstruction(
	// Parameters:
	id uint8,
	// Accounts:
	payer ag_solanago.PublicKey,
	wallet ag_solanago.PublicKey,
	programAuthority ag_solanago.PublicKey,
	programTokenAccount ag_solanago.PublicKey,
	destinationTokenAccount ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	associatedTokenTokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ClaimToken {
	return NewClaimTokenInstructionBuilder().
		SetId(id).
		SetPayerAccount(payer).
		SetWalletAccount(wallet).
		SetProgramAuthorityAccount(programAuthority).
		SetProgramTokenAccountAccount(programTokenAccount).
		SetDestinationTokenAccountAccount(destinationTokenAccount).
		SetMintAccount(mint).
		SetAssociatedTokenTokenProgramAccount(associatedTokenTokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram)
}
