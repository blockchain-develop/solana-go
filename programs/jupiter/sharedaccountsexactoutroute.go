// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupiter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Route by using program owned token accounts and open orders accounts.
type SharedAccountsExactOutRoute struct {
	Id             *uint8
	RoutePlan      *[]RoutePlanStep
	OutAmount      *uint64
	QuotedInAmount *uint64
	SlippageBps    *uint16
	PlatformFeeBps *uint8

	// [0] = [] token_program
	//
	// [1] = [] program_authority
	//
	// [2] = [SIGNER] user_transfer_authority
	//
	// [3] = [WRITE] source_token_account
	//
	// [4] = [WRITE] program_source_token_account
	//
	// [5] = [WRITE] program_destination_token_account
	//
	// [6] = [WRITE] destination_token_account
	//
	// [7] = [] source_mint
	//
	// [8] = [] destination_mint
	//
	// [9] = [WRITE] platform_fee_account
	//
	// [10] = [] token_2022_program
	//
	// [11] = [] event_authority
	//
	// [12] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSharedAccountsExactOutRouteInstructionBuilder creates a new `SharedAccountsExactOutRoute` instruction builder.
func NewSharedAccountsExactOutRouteInstructionBuilder() *SharedAccountsExactOutRoute {
	nd := &SharedAccountsExactOutRoute{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	nd.AccountMetaSlice[11] = ag_solanago.Meta(Addresses["D8cy77BBepLMngZx6ZukaTff5hCt1HrWyKk3Hnd9oitf"])
	return nd
}

// SetId sets the "id" parameter.
func (inst *SharedAccountsExactOutRoute) SetId(id uint8) *SharedAccountsExactOutRoute {
	inst.Id = &id
	return inst
}

// SetRoutePlan sets the "route_plan" parameter.
func (inst *SharedAccountsExactOutRoute) SetRoutePlan(route_plan []RoutePlanStep) *SharedAccountsExactOutRoute {
	inst.RoutePlan = &route_plan
	return inst
}

// SetOutAmount sets the "out_amount" parameter.
func (inst *SharedAccountsExactOutRoute) SetOutAmount(out_amount uint64) *SharedAccountsExactOutRoute {
	inst.OutAmount = &out_amount
	return inst
}

// SetQuotedInAmount sets the "quoted_in_amount" parameter.
func (inst *SharedAccountsExactOutRoute) SetQuotedInAmount(quoted_in_amount uint64) *SharedAccountsExactOutRoute {
	inst.QuotedInAmount = &quoted_in_amount
	return inst
}

// SetSlippageBps sets the "slippage_bps" parameter.
func (inst *SharedAccountsExactOutRoute) SetSlippageBps(slippage_bps uint16) *SharedAccountsExactOutRoute {
	inst.SlippageBps = &slippage_bps
	return inst
}

// SetPlatformFeeBps sets the "platform_fee_bps" parameter.
func (inst *SharedAccountsExactOutRoute) SetPlatformFeeBps(platform_fee_bps uint8) *SharedAccountsExactOutRoute {
	inst.PlatformFeeBps = &platform_fee_bps
	return inst
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *SharedAccountsExactOutRoute) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *SharedAccountsExactOutRoute) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProgramAuthorityAccount sets the "program_authority" account.
func (inst *SharedAccountsExactOutRoute) SetProgramAuthorityAccount(programAuthority ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(programAuthority)
	return inst
}

// GetProgramAuthorityAccount gets the "program_authority" account.
func (inst *SharedAccountsExactOutRoute) GetProgramAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserTransferAuthorityAccount sets the "user_transfer_authority" account.
func (inst *SharedAccountsExactOutRoute) SetUserTransferAuthorityAccount(userTransferAuthority ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userTransferAuthority).SIGNER()
	return inst
}

// GetUserTransferAuthorityAccount gets the "user_transfer_authority" account.
func (inst *SharedAccountsExactOutRoute) GetUserTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSourceTokenAccountAccount sets the "source_token_account" account.
func (inst *SharedAccountsExactOutRoute) SetSourceTokenAccountAccount(sourceTokenAccount ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(sourceTokenAccount).WRITE()
	return inst
}

// GetSourceTokenAccountAccount gets the "source_token_account" account.
func (inst *SharedAccountsExactOutRoute) GetSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramSourceTokenAccountAccount sets the "program_source_token_account" account.
func (inst *SharedAccountsExactOutRoute) SetProgramSourceTokenAccountAccount(programSourceTokenAccount ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(programSourceTokenAccount).WRITE()
	return inst
}

// GetProgramSourceTokenAccountAccount gets the "program_source_token_account" account.
func (inst *SharedAccountsExactOutRoute) GetProgramSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProgramDestinationTokenAccountAccount sets the "program_destination_token_account" account.
func (inst *SharedAccountsExactOutRoute) SetProgramDestinationTokenAccountAccount(programDestinationTokenAccount ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(programDestinationTokenAccount).WRITE()
	return inst
}

// GetProgramDestinationTokenAccountAccount gets the "program_destination_token_account" account.
func (inst *SharedAccountsExactOutRoute) GetProgramDestinationTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetDestinationTokenAccountAccount sets the "destination_token_account" account.
func (inst *SharedAccountsExactOutRoute) SetDestinationTokenAccountAccount(destinationTokenAccount ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(destinationTokenAccount).WRITE()
	return inst
}

// GetDestinationTokenAccountAccount gets the "destination_token_account" account.
func (inst *SharedAccountsExactOutRoute) GetDestinationTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSourceMintAccount sets the "source_mint" account.
func (inst *SharedAccountsExactOutRoute) SetSourceMintAccount(sourceMint ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(sourceMint)
	return inst
}

// GetSourceMintAccount gets the "source_mint" account.
func (inst *SharedAccountsExactOutRoute) GetSourceMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetDestinationMintAccount sets the "destination_mint" account.
func (inst *SharedAccountsExactOutRoute) SetDestinationMintAccount(destinationMint ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(destinationMint)
	return inst
}

// GetDestinationMintAccount gets the "destination_mint" account.
func (inst *SharedAccountsExactOutRoute) GetDestinationMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPlatformFeeAccountAccount sets the "platform_fee_account" account.
func (inst *SharedAccountsExactOutRoute) SetPlatformFeeAccountAccount(platformFeeAccount ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(platformFeeAccount).WRITE()
	return inst
}

// GetPlatformFeeAccountAccount gets the "platform_fee_account" account (optional).
func (inst *SharedAccountsExactOutRoute) GetPlatformFeeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetToken2022ProgramAccount sets the "token_2022_program" account.
func (inst *SharedAccountsExactOutRoute) SetToken2022ProgramAccount(token2022Program ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(token2022Program)
	return inst
}

// GetToken2022ProgramAccount gets the "token_2022_program" account (optional).
func (inst *SharedAccountsExactOutRoute) GetToken2022ProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *SharedAccountsExactOutRoute) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *SharedAccountsExactOutRoute) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetProgramAccount sets the "program" account.
func (inst *SharedAccountsExactOutRoute) SetProgramAccount(program ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *SharedAccountsExactOutRoute) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst SharedAccountsExactOutRoute) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SharedAccountsExactOutRoute,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SharedAccountsExactOutRoute) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SharedAccountsExactOutRoute) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Id == nil {
			return errors.New("Id parameter is not set")
		}
		if inst.RoutePlan == nil {
			return errors.New("RoutePlan parameter is not set")
		}
		if inst.OutAmount == nil {
			return errors.New("OutAmount parameter is not set")
		}
		if inst.QuotedInAmount == nil {
			return errors.New("QuotedInAmount parameter is not set")
		}
		if inst.SlippageBps == nil {
			return errors.New("SlippageBps parameter is not set")
		}
		if inst.PlatformFeeBps == nil {
			return errors.New("PlatformFeeBps parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ProgramAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserTransferAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ProgramSourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ProgramDestinationTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.DestinationTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SourceMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.DestinationMint is not set")
		}

		// [9] = PlatformFeeAccount is optional

		// [10] = Token2022Program is optional

		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *SharedAccountsExactOutRoute) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SharedAccountsExactOutRoute")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=6]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("              Id", *inst.Id))
						paramsBranch.Child(ag_format.Param("       RoutePlan", *inst.RoutePlan))
						paramsBranch.Child(ag_format.Param("       OutAmount", *inst.OutAmount))
						paramsBranch.Child(ag_format.Param("  QuotedInAmount", *inst.QuotedInAmount))
						paramsBranch.Child(ag_format.Param("     SlippageBps", *inst.SlippageBps))
						paramsBranch.Child(ag_format.Param("  PlatformFeeBps", *inst.PlatformFeeBps))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             token_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         program_authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   user_transfer_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             source_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     program_source_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("program_destination_token_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        destination_token_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("               source_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          destination_mint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("             platform_fee_", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("        token_2022_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("           event_authority", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                   program", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj SharedAccountsExactOutRoute) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `RoutePlan` param:
	err = encoder.Encode(obj.RoutePlan)
	if err != nil {
		return err
	}
	// Serialize `OutAmount` param:
	err = encoder.Encode(obj.OutAmount)
	if err != nil {
		return err
	}
	// Serialize `QuotedInAmount` param:
	err = encoder.Encode(obj.QuotedInAmount)
	if err != nil {
		return err
	}
	// Serialize `SlippageBps` param:
	err = encoder.Encode(obj.SlippageBps)
	if err != nil {
		return err
	}
	// Serialize `PlatformFeeBps` param:
	err = encoder.Encode(obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SharedAccountsExactOutRoute) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `RoutePlan`:
	err = decoder.Decode(&obj.RoutePlan)
	if err != nil {
		return err
	}
	// Deserialize `OutAmount`:
	err = decoder.Decode(&obj.OutAmount)
	if err != nil {
		return err
	}
	// Deserialize `QuotedInAmount`:
	err = decoder.Decode(&obj.QuotedInAmount)
	if err != nil {
		return err
	}
	// Deserialize `SlippageBps`:
	err = decoder.Decode(&obj.SlippageBps)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFeeBps`:
	err = decoder.Decode(&obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}

// NewSharedAccountsExactOutRouteInstruction declares a new SharedAccountsExactOutRoute instruction with the provided parameters and accounts.
func NewSharedAccountsExactOutRouteInstruction(
	// Parameters:
	id uint8,
	route_plan []RoutePlanStep,
	out_amount uint64,
	quoted_in_amount uint64,
	slippage_bps uint16,
	platform_fee_bps uint8,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	programAuthority ag_solanago.PublicKey,
	userTransferAuthority ag_solanago.PublicKey,
	sourceTokenAccount ag_solanago.PublicKey,
	programSourceTokenAccount ag_solanago.PublicKey,
	programDestinationTokenAccount ag_solanago.PublicKey,
	destinationTokenAccount ag_solanago.PublicKey,
	sourceMint ag_solanago.PublicKey,
	destinationMint ag_solanago.PublicKey,
	platformFeeAccount ag_solanago.PublicKey,
	token2022Program ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *SharedAccountsExactOutRoute {
	return NewSharedAccountsExactOutRouteInstructionBuilder().
		SetId(id).
		SetRoutePlan(route_plan).
		SetOutAmount(out_amount).
		SetQuotedInAmount(quoted_in_amount).
		SetSlippageBps(slippage_bps).
		SetPlatformFeeBps(platform_fee_bps).
		SetTokenProgramAccount(tokenProgram).
		SetProgramAuthorityAccount(programAuthority).
		SetUserTransferAuthorityAccount(userTransferAuthority).
		SetSourceTokenAccountAccount(sourceTokenAccount).
		SetProgramSourceTokenAccountAccount(programSourceTokenAccount).
		SetProgramDestinationTokenAccountAccount(programDestinationTokenAccount).
		SetDestinationTokenAccountAccount(destinationTokenAccount).
		SetSourceMintAccount(sourceMint).
		SetDestinationMintAccount(destinationMint).
		SetPlatformFeeAccountAccount(platformFeeAccount).
		SetToken2022ProgramAccount(token2022Program).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
