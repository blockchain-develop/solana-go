// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package meteora_vault

import ag_binary "github.com/gagliardetto/binary"

type VaultBumps struct {
	// vault_bump
	VaultBump uint8

	// token_vault_bump
	TokenVaultBump uint8
}

func (obj VaultBumps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VaultBump` param:
	err = encoder.Encode(obj.VaultBump)
	if err != nil {
		return err
	}
	// Serialize `TokenVaultBump` param:
	err = encoder.Encode(obj.TokenVaultBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VaultBumps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VaultBump`:
	err = decoder.Decode(&obj.VaultBump)
	if err != nil {
		return err
	}
	// Deserialize `TokenVaultBump`:
	err = decoder.Decode(&obj.TokenVaultBump)
	if err != nil {
		return err
	}
	return nil
}

type StrategyBumps struct {
	// strategy_index
	StrategyIndex uint8

	// Bumps of PDAs for the integrated protocol.
	OtherBumps [10]uint8
}

func (obj StrategyBumps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StrategyIndex` param:
	err = encoder.Encode(obj.StrategyIndex)
	if err != nil {
		return err
	}
	// Serialize `OtherBumps` param:
	err = encoder.Encode(obj.OtherBumps)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StrategyBumps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StrategyIndex`:
	err = decoder.Decode(&obj.StrategyIndex)
	if err != nil {
		return err
	}
	// Deserialize `OtherBumps`:
	err = decoder.Decode(&obj.OtherBumps)
	if err != nil {
		return err
	}
	return nil
}

type LockedProfitTracker struct {
	// The total locked profit from the last report
	LastUpdatedLockedProfit uint64

	// The last timestamp (in seconds) rebalancing
	LastReport uint64

	// Rate per second of degradation
	LockedProfitDegradation uint64
}

func (obj LockedProfitTracker) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LastUpdatedLockedProfit` param:
	err = encoder.Encode(obj.LastUpdatedLockedProfit)
	if err != nil {
		return err
	}
	// Serialize `LastReport` param:
	err = encoder.Encode(obj.LastReport)
	if err != nil {
		return err
	}
	// Serialize `LockedProfitDegradation` param:
	err = encoder.Encode(obj.LockedProfitDegradation)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockedProfitTracker) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LastUpdatedLockedProfit`:
	err = decoder.Decode(&obj.LastUpdatedLockedProfit)
	if err != nil {
		return err
	}
	// Deserialize `LastReport`:
	err = decoder.Decode(&obj.LastReport)
	if err != nil {
		return err
	}
	// Deserialize `LockedProfitDegradation`:
	err = decoder.Decode(&obj.LockedProfitDegradation)
	if err != nil {
		return err
	}
	return nil
}

type StrategyType ag_binary.BorshEnum

const (
	StrategyTypePortFinanceWithoutLM StrategyType = iota
	StrategyTypePortFinanceWithLM
	StrategyTypeSolendWithoutLM
	StrategyTypeMango
	StrategyTypeSolendWithLM
	StrategyTypeApricotWithoutLM
	StrategyTypeFrancium
	StrategyTypeTulip
	StrategyTypeVault
	StrategyTypeDrift
	StrategyTypeFrakt
	StrategyTypeMarginfi
)

func (value StrategyType) String() string {
	switch value {
	case StrategyTypePortFinanceWithoutLM:
		return "PortFinanceWithoutLM"
	case StrategyTypePortFinanceWithLM:
		return "PortFinanceWithLM"
	case StrategyTypeSolendWithoutLM:
		return "SolendWithoutLM"
	case StrategyTypeMango:
		return "Mango"
	case StrategyTypeSolendWithLM:
		return "SolendWithLM"
	case StrategyTypeApricotWithoutLM:
		return "ApricotWithoutLM"
	case StrategyTypeFrancium:
		return "Francium"
	case StrategyTypeTulip:
		return "Tulip"
	case StrategyTypeVault:
		return "Vault"
	case StrategyTypeDrift:
		return "Drift"
	case StrategyTypeFrakt:
		return "Frakt"
	case StrategyTypeMarginfi:
		return "Marginfi"
	default:
		return ""
	}
}
