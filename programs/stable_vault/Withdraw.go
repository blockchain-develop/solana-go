// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Withdraw is the `withdraw` instruction.
type Withdraw struct {
	Amount            *uint64
	BeneficiaryAmount *uint64

	// [0] = [] withdraw_authority
	//
	// [1] = [] vault
	//
	// [2] = [] vault_authority
	//
	// [3] = [] vault_token
	//
	// [4] = [] dest_token
	//
	// [5] = [] token_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawInstructionBuilder creates a new `Withdraw` instruction builder.
func NewWithdrawInstructionBuilder() *Withdraw {
	nd := &Withdraw{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *Withdraw) SetAmount(amount uint64) *Withdraw {
	inst.Amount = &amount
	return inst
}

// SetBeneficiaryAmount sets the "beneficiary_amount" parameter.
func (inst *Withdraw) SetBeneficiaryAmount(beneficiary_amount uint64) *Withdraw {
	inst.BeneficiaryAmount = &beneficiary_amount
	return inst
}

// SetWithdrawAuthorityAccount sets the "withdraw_authority" account.
func (inst *Withdraw) SetWithdrawAuthorityAccount(withdrawAuthority ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(withdrawAuthority)
	return inst
}

// GetWithdrawAuthorityAccount gets the "withdraw_authority" account.
func (inst *Withdraw) GetWithdrawAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVaultAccount sets the "vault" account.
func (inst *Withdraw) SetVaultAccount(vault ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vault)
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *Withdraw) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVaultAuthorityAccount sets the "vault_authority" account.
func (inst *Withdraw) SetVaultAuthorityAccount(vaultAuthority ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vaultAuthority)
	return inst
}

// GetVaultAuthorityAccount gets the "vault_authority" account.
func (inst *Withdraw) GetVaultAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetVaultTokenAccount sets the "vault_token" account.
func (inst *Withdraw) SetVaultTokenAccount(vaultToken ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(vaultToken)
	return inst
}

// GetVaultTokenAccount gets the "vault_token" account.
func (inst *Withdraw) GetVaultTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDestTokenAccount sets the "dest_token" account.
func (inst *Withdraw) SetDestTokenAccount(destToken ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(destToken)
	return inst
}

// GetDestTokenAccount gets the "dest_token" account.
func (inst *Withdraw) GetDestTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *Withdraw) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *Withdraw) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst Withdraw) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Withdraw,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Withdraw) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Withdraw) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.BeneficiaryAmount == nil {
			return errors.New("BeneficiaryAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WithdrawAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VaultAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.VaultToken is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DestToken is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Withdraw) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Withdraw")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("            Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param(" BeneficiaryAmount", *inst.BeneficiaryAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("withdraw_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             vault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   vault_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       vault_token", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        dest_token", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     token_program", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj Withdraw) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `BeneficiaryAmount` param:
	err = encoder.Encode(obj.BeneficiaryAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Withdraw) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `BeneficiaryAmount`:
	err = decoder.Decode(&obj.BeneficiaryAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawInstruction declares a new Withdraw instruction with the provided parameters and accounts.
func NewWithdrawInstruction(
	// Parameters:
	amount uint64,
	beneficiary_amount uint64,
	// Accounts:
	withdrawAuthority ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	vaultAuthority ag_solanago.PublicKey,
	vaultToken ag_solanago.PublicKey,
	destToken ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Withdraw {
	return NewWithdrawInstructionBuilder().
		SetAmount(amount).
		SetBeneficiaryAmount(beneficiary_amount).
		SetWithdrawAuthorityAccount(withdrawAuthority).
		SetVaultAccount(vault).
		SetVaultAuthorityAccount(vaultAuthority).
		SetVaultTokenAccount(vaultToken).
		SetDestTokenAccount(destToken).
		SetTokenProgramAccount(tokenProgram)
}
