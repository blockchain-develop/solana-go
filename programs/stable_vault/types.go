// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_vault

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Vault struct {
	Admin ag_solanago.PublicKey

	// PDAofpoolprogramsseededbyvaultaddress
	WithdrawAuthority ag_solanago.PublicKey

	// bumpseedofwithdraw_authorityPDA
	WithdrawAuthorityBump uint8

	// bumpseedofvault_authorityPDA
	AuthorityBump  uint8
	IsActive       bool
	Beneficiary    ag_solanago.PublicKey
	BeneficiaryFee uint64
	PendingAdmin   *ag_solanago.PublicKey `bin:"optional"`
}

func (obj Vault) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `WithdrawAuthority` param:
	err = encoder.Encode(obj.WithdrawAuthority)
	if err != nil {
		return err
	}
	// Serialize `WithdrawAuthorityBump` param:
	err = encoder.Encode(obj.WithdrawAuthorityBump)
	if err != nil {
		return err
	}
	// Serialize `AuthorityBump` param:
	err = encoder.Encode(obj.AuthorityBump)
	if err != nil {
		return err
	}
	// Serialize `IsActive` param:
	err = encoder.Encode(obj.IsActive)
	if err != nil {
		return err
	}
	// Serialize `Beneficiary` param:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return err
	}
	// Serialize `BeneficiaryFee` param:
	err = encoder.Encode(obj.BeneficiaryFee)
	if err != nil {
		return err
	}
	// Serialize `PendingAdmin` param (optional):
	{
		if obj.PendingAdmin == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PendingAdmin)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *Vault) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawAuthority`:
	err = decoder.Decode(&obj.WithdrawAuthority)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawAuthorityBump`:
	err = decoder.Decode(&obj.WithdrawAuthorityBump)
	if err != nil {
		return err
	}
	// Deserialize `AuthorityBump`:
	err = decoder.Decode(&obj.AuthorityBump)
	if err != nil {
		return err
	}
	// Deserialize `IsActive`:
	err = decoder.Decode(&obj.IsActive)
	if err != nil {
		return err
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return err
	}
	// Deserialize `BeneficiaryFee`:
	err = decoder.Decode(&obj.BeneficiaryFee)
	if err != nil {
		return err
	}
	// Deserialize `PendingAdmin` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PendingAdmin)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type VaultUpdatedData struct {
	IsActive       bool
	BeneficiaryFee uint64
}

func (obj VaultUpdatedData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IsActive` param:
	err = encoder.Encode(obj.IsActive)
	if err != nil {
		return err
	}
	// Serialize `BeneficiaryFee` param:
	err = encoder.Encode(obj.BeneficiaryFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VaultUpdatedData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IsActive`:
	err = decoder.Decode(&obj.IsActive)
	if err != nil {
		return err
	}
	// Deserialize `BeneficiaryFee`:
	err = decoder.Decode(&obj.BeneficiaryFee)
	if err != nil {
		return err
	}
	return nil
}

type VaultUpdatedEvent struct {
	PublicKey ag_solanago.PublicKey
	Data      VaultUpdatedData
}

func (obj VaultUpdatedEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PublicKey` param:
	err = encoder.Encode(obj.PublicKey)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VaultUpdatedEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PublicKey`:
	err = decoder.Decode(&obj.PublicKey)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}
