// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawV2 is the `withdraw_v2` instruction.
type WithdrawV2 struct {
	Amount            *uint64
	BeneficiaryAmount *uint64

	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawV2InstructionBuilder creates a new `WithdrawV2` instruction builder.
func NewWithdrawV2InstructionBuilder() *WithdrawV2 {
	nd := &WithdrawV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 0),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *WithdrawV2) SetAmount(amount uint64) *WithdrawV2 {
	inst.Amount = &amount
	return inst
}

// SetBeneficiaryAmount sets the "beneficiary_amount" parameter.
func (inst *WithdrawV2) SetBeneficiaryAmount(beneficiary_amount uint64) *WithdrawV2 {
	inst.BeneficiaryAmount = &beneficiary_amount
	return inst
}

func (inst WithdrawV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.BeneficiaryAmount == nil {
			return errors.New("BeneficiaryAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
	}
	return nil
}

func (inst *WithdrawV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("            Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param(" BeneficiaryAmount", *inst.BeneficiaryAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=0]").ParentFunc(func(accountsBranch ag_treeout.Branches) {})
				})
		})
}

func (obj WithdrawV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `BeneficiaryAmount` param:
	err = encoder.Encode(obj.BeneficiaryAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `BeneficiaryAmount`:
	err = decoder.Decode(&obj.BeneficiaryAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawV2Instruction declares a new WithdrawV2 instruction with the provided parameters and accounts.
func NewWithdrawV2Instruction(
	// Parameters:
	amount uint64,
	beneficiary_amount uint64) *WithdrawV2 {
	return NewWithdrawV2InstructionBuilder().
		SetAmount(amount).
		SetBeneficiaryAmount(beneficiary_amount)
}
