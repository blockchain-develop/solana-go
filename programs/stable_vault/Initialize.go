// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize is the `initialize` instruction.
type Initialize struct {
	WithdrawAuthority     *ag_solanago.PublicKey
	WithdrawAuthorityBump *uint8
	Beneficiary           *ag_solanago.PublicKey
	BeneficiaryFee        *uint64

	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInstructionBuilder creates a new `Initialize` instruction builder.
func NewInitializeInstructionBuilder() *Initialize {
	nd := &Initialize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 0),
	}
	return nd
}

// SetWithdrawAuthority sets the "withdraw_authority" parameter.
func (inst *Initialize) SetWithdrawAuthority(withdraw_authority ag_solanago.PublicKey) *Initialize {
	inst.WithdrawAuthority = &withdraw_authority
	return inst
}

// SetWithdrawAuthorityBump sets the "withdraw_authority_bump" parameter.
func (inst *Initialize) SetWithdrawAuthorityBump(withdraw_authority_bump uint8) *Initialize {
	inst.WithdrawAuthorityBump = &withdraw_authority_bump
	return inst
}

// SetBeneficiary sets the "beneficiary" parameter.
func (inst *Initialize) SetBeneficiary(beneficiary ag_solanago.PublicKey) *Initialize {
	inst.Beneficiary = &beneficiary
	return inst
}

// SetBeneficiaryFee sets the "beneficiary_fee" parameter.
func (inst *Initialize) SetBeneficiaryFee(beneficiary_fee uint64) *Initialize {
	inst.BeneficiaryFee = &beneficiary_fee
	return inst
}

func (inst Initialize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Initialize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Initialize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.WithdrawAuthority == nil {
			return errors.New("WithdrawAuthority parameter is not set")
		}
		if inst.WithdrawAuthorityBump == nil {
			return errors.New("WithdrawAuthorityBump parameter is not set")
		}
		if inst.Beneficiary == nil {
			return errors.New("Beneficiary parameter is not set")
		}
		if inst.BeneficiaryFee == nil {
			return errors.New("BeneficiaryFee parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
	}
	return nil
}

func (inst *Initialize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("      WithdrawAuthority", *inst.WithdrawAuthority))
						paramsBranch.Child(ag_format.Param("  WithdrawAuthorityBump", *inst.WithdrawAuthorityBump))
						paramsBranch.Child(ag_format.Param("            Beneficiary", *inst.Beneficiary))
						paramsBranch.Child(ag_format.Param("         BeneficiaryFee", *inst.BeneficiaryFee))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=0]").ParentFunc(func(accountsBranch ag_treeout.Branches) {})
				})
		})
}

func (obj Initialize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WithdrawAuthority` param:
	err = encoder.Encode(obj.WithdrawAuthority)
	if err != nil {
		return err
	}
	// Serialize `WithdrawAuthorityBump` param:
	err = encoder.Encode(obj.WithdrawAuthorityBump)
	if err != nil {
		return err
	}
	// Serialize `Beneficiary` param:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return err
	}
	// Serialize `BeneficiaryFee` param:
	err = encoder.Encode(obj.BeneficiaryFee)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Initialize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WithdrawAuthority`:
	err = decoder.Decode(&obj.WithdrawAuthority)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawAuthorityBump`:
	err = decoder.Decode(&obj.WithdrawAuthorityBump)
	if err != nil {
		return err
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return err
	}
	// Deserialize `BeneficiaryFee`:
	err = decoder.Decode(&obj.BeneficiaryFee)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	withdraw_authority ag_solanago.PublicKey,
	withdraw_authority_bump uint8,
	beneficiary ag_solanago.PublicKey,
	beneficiary_fee uint64) *Initialize {
	return NewInitializeInstructionBuilder().
		SetWithdrawAuthority(withdraw_authority).
		SetWithdrawAuthorityBump(withdraw_authority_bump).
		SetBeneficiary(beneficiary).
		SetBeneficiaryFee(beneficiary_fee)
}
