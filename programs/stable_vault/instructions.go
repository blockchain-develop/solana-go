// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_vault

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("vo1tWgqZMjG61Z2T9qUaMYKqZ75CYzMuaZ2LZP1n7HV")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "StableVault"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_AcceptAdmin = ag_binary.TypeID([8]byte{112, 42, 45, 90, 116, 181, 13, 170})

	Instruction_ChangeBeneficiary = ag_binary.TypeID([8]byte{110, 79, 77, 10, 30, 181, 18, 1})

	Instruction_ChangeBeneficiaryFee = ag_binary.TypeID([8]byte{47, 164, 28, 91, 72, 42, 199, 21})

	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	Instruction_Pause = ag_binary.TypeID([8]byte{211, 22, 221, 251, 74, 121, 193, 47})

	Instruction_RejectAdmin = ag_binary.TypeID([8]byte{253, 12, 169, 115, 88, 117, 177, 252})

	Instruction_TransferAdmin = ag_binary.TypeID([8]byte{42, 242, 66, 106, 228, 10, 111, 156})

	Instruction_Unpause = ag_binary.TypeID([8]byte{169, 144, 4, 38, 10, 141, 188, 255})

	Instruction_Withdraw = ag_binary.TypeID([8]byte{183, 18, 70, 156, 148, 109, 161, 34})

	Instruction_WithdrawV2 = ag_binary.TypeID([8]byte{242, 80, 163, 0, 196, 221, 194, 194})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_AcceptAdmin:
		return "AcceptAdmin"
	case Instruction_ChangeBeneficiary:
		return "ChangeBeneficiary"
	case Instruction_ChangeBeneficiaryFee:
		return "ChangeBeneficiaryFee"
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_Pause:
		return "Pause"
	case Instruction_RejectAdmin:
		return "RejectAdmin"
	case Instruction_TransferAdmin:
		return "TransferAdmin"
	case Instruction_Unpause:
		return "Unpause"
	case Instruction_Withdraw:
		return "Withdraw"
	case Instruction_WithdrawV2:
		return "WithdrawV2"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"accept_admin", (*AcceptAdmin)(nil),
		},
		{
			"change_beneficiary", (*ChangeBeneficiary)(nil),
		},
		{
			"change_beneficiary_fee", (*ChangeBeneficiaryFee)(nil),
		},
		{
			"initialize", (*Initialize)(nil),
		},
		{
			"pause", (*Pause)(nil),
		},
		{
			"reject_admin", (*RejectAdmin)(nil),
		},
		{
			"transfer_admin", (*TransferAdmin)(nil),
		},
		{
			"unpause", (*Unpause)(nil),
		},
		{
			"withdraw", (*Withdraw)(nil),
		},
		{
			"withdraw_v2", (*WithdrawV2)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
