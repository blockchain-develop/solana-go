// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lifinity_v2

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Amm struct {
	InitializerKey                 ag_solanago.PublicKey
	InitializerDepositTokenAccount ag_solanago.PublicKey
	InitializerReceiveTokenAccount ag_solanago.PublicKey
	InitializerAmount              uint64
	TakerAmount                    uint64

	// Is the swap initialized, with data written to it
	IsInitialized bool

	// Bump seed used to generate the program address / authority
	BumpSeed uint8

	// Freeze swap
	FreezeTrade uint8

	// Freeze deposit
	FreezeDeposit uint8

	// Freeze withdraw
	FreezeWithdraw uint8

	// Base decimals account
	BaseDecimals uint8

	// Token program ID associated with the swap
	TokenProgramId ag_solanago.PublicKey

	// Address of token A liquidity account
	TokenAAccount ag_solanago.PublicKey

	// Address of token B liquidity account
	TokenBAccount ag_solanago.PublicKey

	// Address of pool token mint
	PoolMint ag_solanago.PublicKey

	// Address of token A mint
	TokenAMint ag_solanago.PublicKey

	// Address of token B mint
	TokenBMint ag_solanago.PublicKey

	// Address of pool fee account
	FeeAccount ag_solanago.PublicKey

	// Oracle Main account
	OracleMainAccount ag_solanago.PublicKey

	// Oracle Sub account
	OracleSubAccount ag_solanago.PublicKey

	// oracle Pc account
	OraclePcAccount ag_solanago.PublicKey

	// Fees associated with swap
	Fees AmmFees

	// Curve associated with swap
	Curve AmmCurve

	// Curve associated with swap
	Config AmmConfig

	// Temp area
	AmmPTemp1 ag_solanago.PublicKey

	// Temp area
	AmmPTemp2 ag_solanago.PublicKey

	// Temp area
	AmmPTemp3 ag_solanago.PublicKey

	// Temp area
	AmmPTemp4 ag_solanago.PublicKey

	// Temp area
	AmmPTemp5 ag_solanago.PublicKey
}

var AmmDiscriminator = [8]byte{143, 245, 200, 17, 74, 214, 196, 135}

func (obj Amm) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AmmDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `InitializerKey` param:
	err = encoder.Encode(obj.InitializerKey)
	if err != nil {
		return err
	}
	// Serialize `InitializerDepositTokenAccount` param:
	err = encoder.Encode(obj.InitializerDepositTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `InitializerReceiveTokenAccount` param:
	err = encoder.Encode(obj.InitializerReceiveTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `InitializerAmount` param:
	err = encoder.Encode(obj.InitializerAmount)
	if err != nil {
		return err
	}
	// Serialize `TakerAmount` param:
	err = encoder.Encode(obj.TakerAmount)
	if err != nil {
		return err
	}
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `BumpSeed` param:
	err = encoder.Encode(obj.BumpSeed)
	if err != nil {
		return err
	}
	// Serialize `FreezeTrade` param:
	err = encoder.Encode(obj.FreezeTrade)
	if err != nil {
		return err
	}
	// Serialize `FreezeDeposit` param:
	err = encoder.Encode(obj.FreezeDeposit)
	if err != nil {
		return err
	}
	// Serialize `FreezeWithdraw` param:
	err = encoder.Encode(obj.FreezeWithdraw)
	if err != nil {
		return err
	}
	// Serialize `BaseDecimals` param:
	err = encoder.Encode(obj.BaseDecimals)
	if err != nil {
		return err
	}
	// Serialize `TokenProgramId` param:
	err = encoder.Encode(obj.TokenProgramId)
	if err != nil {
		return err
	}
	// Serialize `TokenAAccount` param:
	err = encoder.Encode(obj.TokenAAccount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAccount` param:
	err = encoder.Encode(obj.TokenBAccount)
	if err != nil {
		return err
	}
	// Serialize `PoolMint` param:
	err = encoder.Encode(obj.PoolMint)
	if err != nil {
		return err
	}
	// Serialize `TokenAMint` param:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return err
	}
	// Serialize `TokenBMint` param:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return err
	}
	// Serialize `FeeAccount` param:
	err = encoder.Encode(obj.FeeAccount)
	if err != nil {
		return err
	}
	// Serialize `OracleMainAccount` param:
	err = encoder.Encode(obj.OracleMainAccount)
	if err != nil {
		return err
	}
	// Serialize `OracleSubAccount` param:
	err = encoder.Encode(obj.OracleSubAccount)
	if err != nil {
		return err
	}
	// Serialize `OraclePcAccount` param:
	err = encoder.Encode(obj.OraclePcAccount)
	if err != nil {
		return err
	}
	// Serialize `Fees` param:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return err
	}
	// Serialize `Curve` param:
	err = encoder.Encode(obj.Curve)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `AmmPTemp1` param:
	err = encoder.Encode(obj.AmmPTemp1)
	if err != nil {
		return err
	}
	// Serialize `AmmPTemp2` param:
	err = encoder.Encode(obj.AmmPTemp2)
	if err != nil {
		return err
	}
	// Serialize `AmmPTemp3` param:
	err = encoder.Encode(obj.AmmPTemp3)
	if err != nil {
		return err
	}
	// Serialize `AmmPTemp4` param:
	err = encoder.Encode(obj.AmmPTemp4)
	if err != nil {
		return err
	}
	// Serialize `AmmPTemp5` param:
	err = encoder.Encode(obj.AmmPTemp5)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Amm) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(AmmDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[143 245 200 17 74 214 196 135]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `InitializerKey`:
	err = decoder.Decode(&obj.InitializerKey)
	if err != nil {
		return err
	}
	// Deserialize `InitializerDepositTokenAccount`:
	err = decoder.Decode(&obj.InitializerDepositTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `InitializerReceiveTokenAccount`:
	err = decoder.Decode(&obj.InitializerReceiveTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `InitializerAmount`:
	err = decoder.Decode(&obj.InitializerAmount)
	if err != nil {
		return err
	}
	// Deserialize `TakerAmount`:
	err = decoder.Decode(&obj.TakerAmount)
	if err != nil {
		return err
	}
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `BumpSeed`:
	err = decoder.Decode(&obj.BumpSeed)
	if err != nil {
		return err
	}
	// Deserialize `FreezeTrade`:
	err = decoder.Decode(&obj.FreezeTrade)
	if err != nil {
		return err
	}
	// Deserialize `FreezeDeposit`:
	err = decoder.Decode(&obj.FreezeDeposit)
	if err != nil {
		return err
	}
	// Deserialize `FreezeWithdraw`:
	err = decoder.Decode(&obj.FreezeWithdraw)
	if err != nil {
		return err
	}
	// Deserialize `BaseDecimals`:
	err = decoder.Decode(&obj.BaseDecimals)
	if err != nil {
		return err
	}
	// Deserialize `TokenProgramId`:
	err = decoder.Decode(&obj.TokenProgramId)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAccount`:
	err = decoder.Decode(&obj.TokenAAccount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAccount`:
	err = decoder.Decode(&obj.TokenBAccount)
	if err != nil {
		return err
	}
	// Deserialize `PoolMint`:
	err = decoder.Decode(&obj.PoolMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return err
	}
	// Deserialize `FeeAccount`:
	err = decoder.Decode(&obj.FeeAccount)
	if err != nil {
		return err
	}
	// Deserialize `OracleMainAccount`:
	err = decoder.Decode(&obj.OracleMainAccount)
	if err != nil {
		return err
	}
	// Deserialize `OracleSubAccount`:
	err = decoder.Decode(&obj.OracleSubAccount)
	if err != nil {
		return err
	}
	// Deserialize `OraclePcAccount`:
	err = decoder.Decode(&obj.OraclePcAccount)
	if err != nil {
		return err
	}
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return err
	}
	// Deserialize `Curve`:
	err = decoder.Decode(&obj.Curve)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `AmmPTemp1`:
	err = decoder.Decode(&obj.AmmPTemp1)
	if err != nil {
		return err
	}
	// Deserialize `AmmPTemp2`:
	err = decoder.Decode(&obj.AmmPTemp2)
	if err != nil {
		return err
	}
	// Deserialize `AmmPTemp3`:
	err = decoder.Decode(&obj.AmmPTemp3)
	if err != nil {
		return err
	}
	// Deserialize `AmmPTemp4`:
	err = decoder.Decode(&obj.AmmPTemp4)
	if err != nil {
		return err
	}
	// Deserialize `AmmPTemp5`:
	err = decoder.Decode(&obj.AmmPTemp5)
	if err != nil {
		return err
	}
	return nil
}
