// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lifinity_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DepositAllTokenTypes is the `depositAllTokenTypes` instruction.
type DepositAllTokenTypes struct {
	PoolTokenAmount     *uint64
	MaximumTokenAAmount *uint64
	MaximumTokenBAmount *uint64

	// [0] = [WRITE] amm
	//
	// [1] = [] authority
	//
	// [2] = [SIGNER] userTransferAuthorityInfo
	//
	// [3] = [WRITE] sourceAInfo
	//
	// [4] = [WRITE] sourceBInfo
	//
	// [5] = [WRITE] tokenA
	//
	// [6] = [WRITE] tokenB
	//
	// [7] = [WRITE] poolMint
	//
	// [8] = [WRITE] destination
	//
	// [9] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositAllTokenTypesInstructionBuilder creates a new `DepositAllTokenTypes` instruction builder.
func NewDepositAllTokenTypesInstructionBuilder() *DepositAllTokenTypes {
	nd := &DepositAllTokenTypes{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetPoolTokenAmount sets the "poolTokenAmount" parameter.
func (inst *DepositAllTokenTypes) SetPoolTokenAmount(poolTokenAmount uint64) *DepositAllTokenTypes {
	inst.PoolTokenAmount = &poolTokenAmount
	return inst
}

// SetMaximumTokenAAmount sets the "maximumTokenAAmount" parameter.
func (inst *DepositAllTokenTypes) SetMaximumTokenAAmount(maximumTokenAAmount uint64) *DepositAllTokenTypes {
	inst.MaximumTokenAAmount = &maximumTokenAAmount
	return inst
}

// SetMaximumTokenBAmount sets the "maximumTokenBAmount" parameter.
func (inst *DepositAllTokenTypes) SetMaximumTokenBAmount(maximumTokenBAmount uint64) *DepositAllTokenTypes {
	inst.MaximumTokenBAmount = &maximumTokenBAmount
	return inst
}

// SetAmmAccount sets the "amm" account.
func (inst *DepositAllTokenTypes) SetAmmAccount(amm ag_solanago.PublicKey) *DepositAllTokenTypes {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(amm).WRITE()
	return inst
}

// GetAmmAccount gets the "amm" account.
func (inst *DepositAllTokenTypes) GetAmmAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *DepositAllTokenTypes) SetAuthorityAccount(authority ag_solanago.PublicKey) *DepositAllTokenTypes {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *DepositAllTokenTypes) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserTransferAuthorityInfoAccount sets the "userTransferAuthorityInfo" account.
func (inst *DepositAllTokenTypes) SetUserTransferAuthorityInfoAccount(userTransferAuthorityInfo ag_solanago.PublicKey) *DepositAllTokenTypes {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userTransferAuthorityInfo).SIGNER()
	return inst
}

// GetUserTransferAuthorityInfoAccount gets the "userTransferAuthorityInfo" account.
func (inst *DepositAllTokenTypes) GetUserTransferAuthorityInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSourceAInfoAccount sets the "sourceAInfo" account.
func (inst *DepositAllTokenTypes) SetSourceAInfoAccount(sourceAInfo ag_solanago.PublicKey) *DepositAllTokenTypes {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(sourceAInfo).WRITE()
	return inst
}

// GetSourceAInfoAccount gets the "sourceAInfo" account.
func (inst *DepositAllTokenTypes) GetSourceAInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSourceBInfoAccount sets the "sourceBInfo" account.
func (inst *DepositAllTokenTypes) SetSourceBInfoAccount(sourceBInfo ag_solanago.PublicKey) *DepositAllTokenTypes {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(sourceBInfo).WRITE()
	return inst
}

// GetSourceBInfoAccount gets the "sourceBInfo" account.
func (inst *DepositAllTokenTypes) GetSourceBInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenAAccount sets the "tokenA" account.
func (inst *DepositAllTokenTypes) SetTokenAAccount(tokenA ag_solanago.PublicKey) *DepositAllTokenTypes {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenA).WRITE()
	return inst
}

// GetTokenAAccount gets the "tokenA" account.
func (inst *DepositAllTokenTypes) GetTokenAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenBAccount sets the "tokenB" account.
func (inst *DepositAllTokenTypes) SetTokenBAccount(tokenB ag_solanago.PublicKey) *DepositAllTokenTypes {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenB).WRITE()
	return inst
}

// GetTokenBAccount gets the "tokenB" account.
func (inst *DepositAllTokenTypes) GetTokenBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPoolMintAccount sets the "poolMint" account.
func (inst *DepositAllTokenTypes) SetPoolMintAccount(poolMint ag_solanago.PublicKey) *DepositAllTokenTypes {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(poolMint).WRITE()
	return inst
}

// GetPoolMintAccount gets the "poolMint" account.
func (inst *DepositAllTokenTypes) GetPoolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetDestinationAccount sets the "destination" account.
func (inst *DepositAllTokenTypes) SetDestinationAccount(destination ag_solanago.PublicKey) *DepositAllTokenTypes {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(destination).WRITE()
	return inst
}

// GetDestinationAccount gets the "destination" account.
func (inst *DepositAllTokenTypes) GetDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *DepositAllTokenTypes) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DepositAllTokenTypes {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *DepositAllTokenTypes) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst DepositAllTokenTypes) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DepositAllTokenTypes,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DepositAllTokenTypes) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DepositAllTokenTypes) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PoolTokenAmount == nil {
			return errors.New("PoolTokenAmount parameter is not set")
		}
		if inst.MaximumTokenAAmount == nil {
			return errors.New("MaximumTokenAAmount parameter is not set")
		}
		if inst.MaximumTokenBAmount == nil {
			return errors.New("MaximumTokenBAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Amm is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserTransferAuthorityInfo is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SourceAInfo is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SourceBInfo is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenA is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenB is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PoolMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Destination is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *DepositAllTokenTypes) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DepositAllTokenTypes")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    PoolTokenAmount", *inst.PoolTokenAmount))
						paramsBranch.Child(ag_format.Param("MaximumTokenAAmount", *inst.MaximumTokenAAmount))
						paramsBranch.Child(ag_format.Param("MaximumTokenBAmount", *inst.MaximumTokenBAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                      amm", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("userTransferAuthorityInfo", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("              sourceAInfo", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              sourceBInfo", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                   tokenA", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                   tokenB", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                 poolMint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("              destination", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("             tokenProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj DepositAllTokenTypes) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolTokenAmount` param:
	err = encoder.Encode(obj.PoolTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `MaximumTokenAAmount` param:
	err = encoder.Encode(obj.MaximumTokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `MaximumTokenBAmount` param:
	err = encoder.Encode(obj.MaximumTokenBAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DepositAllTokenTypes) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolTokenAmount`:
	err = decoder.Decode(&obj.PoolTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `MaximumTokenAAmount`:
	err = decoder.Decode(&obj.MaximumTokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `MaximumTokenBAmount`:
	err = decoder.Decode(&obj.MaximumTokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositAllTokenTypesInstruction declares a new DepositAllTokenTypes instruction with the provided parameters and accounts.
func NewDepositAllTokenTypesInstruction(
	// Parameters:
	poolTokenAmount uint64,
	maximumTokenAAmount uint64,
	maximumTokenBAmount uint64,
	// Accounts:
	amm ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	userTransferAuthorityInfo ag_solanago.PublicKey,
	sourceAInfo ag_solanago.PublicKey,
	sourceBInfo ag_solanago.PublicKey,
	tokenA ag_solanago.PublicKey,
	tokenB ag_solanago.PublicKey,
	poolMint ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *DepositAllTokenTypes {
	return NewDepositAllTokenTypesInstructionBuilder().
		SetPoolTokenAmount(poolTokenAmount).
		SetMaximumTokenAAmount(maximumTokenAAmount).
		SetMaximumTokenBAmount(maximumTokenBAmount).
		SetAmmAccount(amm).
		SetAuthorityAccount(authority).
		SetUserTransferAuthorityInfoAccount(userTransferAuthorityInfo).
		SetSourceAInfoAccount(sourceAInfo).
		SetSourceBInfoAccount(sourceBInfo).
		SetTokenAAccount(tokenA).
		SetTokenBAccount(tokenB).
		SetPoolMintAccount(poolMint).
		SetDestinationAccount(destination).
		SetTokenProgramAccount(tokenProgram)
}
