// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_swap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TransferOwner is the `transfer_owner` instruction.
type TransferOwner struct {
	NewOwner *ag_solanago.PublicKey

	// [0] = [WRITE] pool
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTransferOwnerInstructionBuilder creates a new `TransferOwner` instruction builder.
func NewTransferOwnerInstructionBuilder() *TransferOwner {
	nd := &TransferOwner{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetNewOwner sets the "new_owner" parameter.
func (inst *TransferOwner) SetNewOwner(new_owner ag_solanago.PublicKey) *TransferOwner {
	inst.NewOwner = &new_owner
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *TransferOwner) SetPoolAccount(pool ag_solanago.PublicKey) *TransferOwner {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *TransferOwner) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst TransferOwner) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TransferOwner,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TransferOwner) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TransferOwner) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewOwner == nil {
			return errors.New("NewOwner parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
	}
	return nil
}

func (inst *TransferOwner) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TransferOwner")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" NewOwner", *inst.NewOwner))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("pool", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj TransferOwner) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewOwner` param:
	err = encoder.Encode(obj.NewOwner)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TransferOwner) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewOwner`:
	err = decoder.Decode(&obj.NewOwner)
	if err != nil {
		return err
	}
	return nil
}

// NewTransferOwnerInstruction declares a new TransferOwner instruction with the provided parameters and accounts.
func NewTransferOwnerInstruction(
	// Parameters:
	new_owner ag_solanago.PublicKey,
	// Accounts:
	pool ag_solanago.PublicKey) *TransferOwner {
	return NewTransferOwnerInstructionBuilder().
		SetNewOwner(new_owner).
		SetPoolAccount(pool)
}
