// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_swap

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Pool struct {
	Owner            ag_solanago.PublicKey
	Vault            ag_solanago.PublicKey
	Mint             ag_solanago.PublicKey
	AuthorityBump    uint8
	IsActive         bool
	AmpInitialFactor uint16
	AmpTargetFactor  uint16
	RampStartTs      int64
	RampStopTs       int64
	SwapFee          uint64
	Tokens           []PoolToken
	PendingOwner     *ag_solanago.PublicKey `bin:"optional"`
}

func (obj Pool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `AuthorityBump` param:
	err = encoder.Encode(obj.AuthorityBump)
	if err != nil {
		return err
	}
	// Serialize `IsActive` param:
	err = encoder.Encode(obj.IsActive)
	if err != nil {
		return err
	}
	// Serialize `AmpInitialFactor` param:
	err = encoder.Encode(obj.AmpInitialFactor)
	if err != nil {
		return err
	}
	// Serialize `AmpTargetFactor` param:
	err = encoder.Encode(obj.AmpTargetFactor)
	if err != nil {
		return err
	}
	// Serialize `RampStartTs` param:
	err = encoder.Encode(obj.RampStartTs)
	if err != nil {
		return err
	}
	// Serialize `RampStopTs` param:
	err = encoder.Encode(obj.RampStopTs)
	if err != nil {
		return err
	}
	// Serialize `SwapFee` param:
	err = encoder.Encode(obj.SwapFee)
	if err != nil {
		return err
	}
	// Serialize `Tokens` param:
	err = encoder.Encode(obj.Tokens)
	if err != nil {
		return err
	}
	// Serialize `PendingOwner` param (optional):
	{
		if obj.PendingOwner == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PendingOwner)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *Pool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `AuthorityBump`:
	err = decoder.Decode(&obj.AuthorityBump)
	if err != nil {
		return err
	}
	// Deserialize `IsActive`:
	err = decoder.Decode(&obj.IsActive)
	if err != nil {
		return err
	}
	// Deserialize `AmpInitialFactor`:
	err = decoder.Decode(&obj.AmpInitialFactor)
	if err != nil {
		return err
	}
	// Deserialize `AmpTargetFactor`:
	err = decoder.Decode(&obj.AmpTargetFactor)
	if err != nil {
		return err
	}
	// Deserialize `RampStartTs`:
	err = decoder.Decode(&obj.RampStartTs)
	if err != nil {
		return err
	}
	// Deserialize `RampStopTs`:
	err = decoder.Decode(&obj.RampStopTs)
	if err != nil {
		return err
	}
	// Deserialize `SwapFee`:
	err = decoder.Decode(&obj.SwapFee)
	if err != nil {
		return err
	}
	// Deserialize `Tokens`:
	err = decoder.Decode(&obj.Tokens)
	if err != nil {
		return err
	}
	// Deserialize `PendingOwner` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PendingOwner)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type PoolBalanceUpdatedData struct {
	Balances []uint64
}

func (obj PoolBalanceUpdatedData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Balances` param:
	err = encoder.Encode(obj.Balances)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolBalanceUpdatedData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Balances`:
	err = decoder.Decode(&obj.Balances)
	if err != nil {
		return err
	}
	return nil
}

type PoolBalanceUpdatedEvent struct {
	PublicKey ag_solanago.PublicKey
	Data      PoolBalanceUpdatedData
}

func (obj PoolBalanceUpdatedEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PublicKey` param:
	err = encoder.Encode(obj.PublicKey)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolBalanceUpdatedEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PublicKey`:
	err = decoder.Decode(&obj.PublicKey)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type PoolToken struct {
	Mint          ag_solanago.PublicKey
	Decimals      uint8
	ScalingUp     bool
	ScalingFactor uint64
	Balance       uint64
}

func (obj PoolToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `ScalingUp` param:
	err = encoder.Encode(obj.ScalingUp)
	if err != nil {
		return err
	}
	// Serialize `ScalingFactor` param:
	err = encoder.Encode(obj.ScalingFactor)
	if err != nil {
		return err
	}
	// Serialize `Balance` param:
	err = encoder.Encode(obj.Balance)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `ScalingUp`:
	err = decoder.Decode(&obj.ScalingUp)
	if err != nil {
		return err
	}
	// Deserialize `ScalingFactor`:
	err = decoder.Decode(&obj.ScalingFactor)
	if err != nil {
		return err
	}
	// Deserialize `Balance`:
	err = decoder.Decode(&obj.Balance)
	if err != nil {
		return err
	}
	return nil
}

type PoolUpdatedData struct {
	IsActive         bool
	AmpInitialFactor uint16
	AmpTargetFactor  uint16
	RampStartTs      int64
	RampStopTs       int64
	SwapFee          uint64
}

func (obj PoolUpdatedData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IsActive` param:
	err = encoder.Encode(obj.IsActive)
	if err != nil {
		return err
	}
	// Serialize `AmpInitialFactor` param:
	err = encoder.Encode(obj.AmpInitialFactor)
	if err != nil {
		return err
	}
	// Serialize `AmpTargetFactor` param:
	err = encoder.Encode(obj.AmpTargetFactor)
	if err != nil {
		return err
	}
	// Serialize `RampStartTs` param:
	err = encoder.Encode(obj.RampStartTs)
	if err != nil {
		return err
	}
	// Serialize `RampStopTs` param:
	err = encoder.Encode(obj.RampStopTs)
	if err != nil {
		return err
	}
	// Serialize `SwapFee` param:
	err = encoder.Encode(obj.SwapFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolUpdatedData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IsActive`:
	err = decoder.Decode(&obj.IsActive)
	if err != nil {
		return err
	}
	// Deserialize `AmpInitialFactor`:
	err = decoder.Decode(&obj.AmpInitialFactor)
	if err != nil {
		return err
	}
	// Deserialize `AmpTargetFactor`:
	err = decoder.Decode(&obj.AmpTargetFactor)
	if err != nil {
		return err
	}
	// Deserialize `RampStartTs`:
	err = decoder.Decode(&obj.RampStartTs)
	if err != nil {
		return err
	}
	// Deserialize `RampStopTs`:
	err = decoder.Decode(&obj.RampStopTs)
	if err != nil {
		return err
	}
	// Deserialize `SwapFee`:
	err = decoder.Decode(&obj.SwapFee)
	if err != nil {
		return err
	}
	return nil
}

type PoolUpdatedEvent struct {
	PublicKey ag_solanago.PublicKey
	Data      PoolUpdatedData
}

func (obj PoolUpdatedEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PublicKey` param:
	err = encoder.Encode(obj.PublicKey)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolUpdatedEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PublicKey`:
	err = decoder.Decode(&obj.PublicKey)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type Strategy struct {
	Pool            ag_solanago.PublicKey
	IsActive        bool
	AmpMinFactor    uint16
	AmpMaxFactor    uint16
	RampMinStep     uint16
	RampMaxStep     uint16
	RampMinDuration uint32
	RampMaxDuration uint32
}

func (obj Strategy) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `IsActive` param:
	err = encoder.Encode(obj.IsActive)
	if err != nil {
		return err
	}
	// Serialize `AmpMinFactor` param:
	err = encoder.Encode(obj.AmpMinFactor)
	if err != nil {
		return err
	}
	// Serialize `AmpMaxFactor` param:
	err = encoder.Encode(obj.AmpMaxFactor)
	if err != nil {
		return err
	}
	// Serialize `RampMinStep` param:
	err = encoder.Encode(obj.RampMinStep)
	if err != nil {
		return err
	}
	// Serialize `RampMaxStep` param:
	err = encoder.Encode(obj.RampMaxStep)
	if err != nil {
		return err
	}
	// Serialize `RampMinDuration` param:
	err = encoder.Encode(obj.RampMinDuration)
	if err != nil {
		return err
	}
	// Serialize `RampMaxDuration` param:
	err = encoder.Encode(obj.RampMaxDuration)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Strategy) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `IsActive`:
	err = decoder.Decode(&obj.IsActive)
	if err != nil {
		return err
	}
	// Deserialize `AmpMinFactor`:
	err = decoder.Decode(&obj.AmpMinFactor)
	if err != nil {
		return err
	}
	// Deserialize `AmpMaxFactor`:
	err = decoder.Decode(&obj.AmpMaxFactor)
	if err != nil {
		return err
	}
	// Deserialize `RampMinStep`:
	err = decoder.Decode(&obj.RampMinStep)
	if err != nil {
		return err
	}
	// Deserialize `RampMaxStep`:
	err = decoder.Decode(&obj.RampMaxStep)
	if err != nil {
		return err
	}
	// Deserialize `RampMinDuration`:
	err = decoder.Decode(&obj.RampMinDuration)
	if err != nil {
		return err
	}
	// Deserialize `RampMaxDuration`:
	err = decoder.Decode(&obj.RampMaxDuration)
	if err != nil {
		return err
	}
	return nil
}

type Vault struct {
	Admin ag_solanago.PublicKey

	// PDAofpoolprogramsseededbyvaultaddress
	WithdrawAuthority ag_solanago.PublicKey

	// bumpseedofwithdraw_authorityPDA
	WithdrawAuthorityBump uint8

	// bumpseedofvault_authorityPDA
	AuthorityBump  uint8
	IsActive       bool
	Beneficiary    ag_solanago.PublicKey
	BeneficiaryFee uint64
	PendingAdmin   *ag_solanago.PublicKey `bin:"optional"`
}

func (obj Vault) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `WithdrawAuthority` param:
	err = encoder.Encode(obj.WithdrawAuthority)
	if err != nil {
		return err
	}
	// Serialize `WithdrawAuthorityBump` param:
	err = encoder.Encode(obj.WithdrawAuthorityBump)
	if err != nil {
		return err
	}
	// Serialize `AuthorityBump` param:
	err = encoder.Encode(obj.AuthorityBump)
	if err != nil {
		return err
	}
	// Serialize `IsActive` param:
	err = encoder.Encode(obj.IsActive)
	if err != nil {
		return err
	}
	// Serialize `Beneficiary` param:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return err
	}
	// Serialize `BeneficiaryFee` param:
	err = encoder.Encode(obj.BeneficiaryFee)
	if err != nil {
		return err
	}
	// Serialize `PendingAdmin` param (optional):
	{
		if obj.PendingAdmin == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PendingAdmin)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *Vault) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawAuthority`:
	err = decoder.Decode(&obj.WithdrawAuthority)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawAuthorityBump`:
	err = decoder.Decode(&obj.WithdrawAuthorityBump)
	if err != nil {
		return err
	}
	// Deserialize `AuthorityBump`:
	err = decoder.Decode(&obj.AuthorityBump)
	if err != nil {
		return err
	}
	// Deserialize `IsActive`:
	err = decoder.Decode(&obj.IsActive)
	if err != nil {
		return err
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return err
	}
	// Deserialize `BeneficiaryFee`:
	err = decoder.Decode(&obj.BeneficiaryFee)
	if err != nil {
		return err
	}
	// Deserialize `PendingAdmin` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PendingAdmin)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
