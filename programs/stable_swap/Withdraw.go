// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_swap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// removeliquidity
type Withdraw struct {
	Amount            *uint64
	MinimumAmountsOut *[]uint64

	// [0] = [SIGNER] user
	//
	// [1] = [WRITE] user_pool_token
	//
	// [2] = [WRITE] mint
	//
	// [3] = [WRITE] pool
	//
	// [4] = [] withdraw_authority
	//
	// [5] = [] vault
	//
	// [6] = [] vault_authority
	//
	// [7] = [] vault_program
	//
	// [8] = [] token_program
	//
	// [9] = [] token_program_2022
	//
	// [10] = [] user_token_a
	//
	// [11] = [] vault_token_a
	//
	// [12] = [] token_a
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawInstructionBuilder creates a new `Withdraw` instruction builder.
func NewWithdrawInstructionBuilder() *Withdraw {
	nd := &Withdraw{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *Withdraw) SetAmount(amount uint64) *Withdraw {
	inst.Amount = &amount
	return inst
}

// SetMinimumAmountsOut sets the "minimum_amounts_out" parameter.
func (inst *Withdraw) SetMinimumAmountsOut(minimum_amounts_out []uint64) *Withdraw {
	inst.MinimumAmountsOut = &minimum_amounts_out
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *Withdraw) SetUserAccount(user ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *Withdraw) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserPoolTokenAccount sets the "user_pool_token" account.
func (inst *Withdraw) SetUserPoolTokenAccount(userPoolToken ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(userPoolToken).WRITE()
	return inst
}

// GetUserPoolTokenAccount gets the "user_pool_token" account.
func (inst *Withdraw) GetUserPoolTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintAccount sets the "mint" account.
func (inst *Withdraw) SetMintAccount(mint ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *Withdraw) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolAccount sets the "pool" account.
func (inst *Withdraw) SetPoolAccount(pool ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *Withdraw) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetWithdrawAuthorityAccount sets the "withdraw_authority" account.
func (inst *Withdraw) SetWithdrawAuthorityAccount(withdrawAuthority ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(withdrawAuthority)
	return inst
}

// GetWithdrawAuthorityAccount gets the "withdraw_authority" account.
func (inst *Withdraw) GetWithdrawAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetVaultAccount sets the "vault" account.
func (inst *Withdraw) SetVaultAccount(vault ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(vault)
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *Withdraw) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetVaultAuthorityAccount sets the "vault_authority" account.
func (inst *Withdraw) SetVaultAuthorityAccount(vaultAuthority ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(vaultAuthority)
	return inst
}

// GetVaultAuthorityAccount gets the "vault_authority" account.
func (inst *Withdraw) GetVaultAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetVaultProgramAccount sets the "vault_program" account.
func (inst *Withdraw) SetVaultProgramAccount(vaultProgram ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(vaultProgram)
	return inst
}

// GetVaultProgramAccount gets the "vault_program" account.
func (inst *Withdraw) GetVaultProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *Withdraw) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *Withdraw) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgram2022Account sets the "token_program_2022" account.
func (inst *Withdraw) SetTokenProgram2022Account(tokenProgram2022 ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram2022)
	return inst
}

// GetTokenProgram2022Account gets the "token_program_2022" account.
func (inst *Withdraw) GetTokenProgram2022Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetUserTokenAAccount sets the "user_token_a" account.
func (inst *Withdraw) SetUserTokenAAccount(userTokenA ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(userTokenA)
	return inst
}

// GetUserTokenAAccount gets the "user_token_a" account.
func (inst *Withdraw) GetUserTokenAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetVaultTokenAAccount sets the "vault_token_a" account.
func (inst *Withdraw) SetVaultTokenAAccount(vaultTokenA ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(vaultTokenA)
	return inst
}

// GetVaultTokenAAccount gets the "vault_token_a" account.
func (inst *Withdraw) GetVaultTokenAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenAAccount sets the "token_a" account.
func (inst *Withdraw) SetTokenAAccount(tokenA ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenA)
	return inst
}

// GetTokenAAccount gets the "token_a" account.
func (inst *Withdraw) GetTokenAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst Withdraw) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Withdraw,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Withdraw) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Withdraw) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.MinimumAmountsOut == nil {
			return errors.New("MinimumAmountsOut parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UserPoolToken is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.WithdrawAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.VaultAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.VaultProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram2022 is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.UserTokenA is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.VaultTokenA is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenA is not set")
		}
	}
	return nil
}

func (inst *Withdraw) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Withdraw")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("             Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("  MinimumAmountsOut", *inst.MinimumAmountsOut))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   user_pool_token", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("              pool", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("withdraw_authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   vault_authority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     vault_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("     token_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("token_program_2022", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("      user_token_a", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("     vault_token_a", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("           token_a", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj Withdraw) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountsOut` param:
	err = encoder.Encode(obj.MinimumAmountsOut)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Withdraw) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountsOut`:
	err = decoder.Decode(&obj.MinimumAmountsOut)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawInstruction declares a new Withdraw instruction with the provided parameters and accounts.
func NewWithdrawInstruction(
	// Parameters:
	amount uint64,
	minimum_amounts_out []uint64,
	// Accounts:
	user ag_solanago.PublicKey,
	userPoolToken ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	withdrawAuthority ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	vaultAuthority ag_solanago.PublicKey,
	vaultProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenProgram2022 ag_solanago.PublicKey,
	userTokenA ag_solanago.PublicKey,
	vaultTokenA ag_solanago.PublicKey,
	tokenA ag_solanago.PublicKey) *Withdraw {
	return NewWithdrawInstructionBuilder().
		SetAmount(amount).
		SetMinimumAmountsOut(minimum_amounts_out).
		SetUserAccount(user).
		SetUserPoolTokenAccount(userPoolToken).
		SetMintAccount(mint).
		SetPoolAccount(pool).
		SetWithdrawAuthorityAccount(withdrawAuthority).
		SetVaultAccount(vault).
		SetVaultAuthorityAccount(vaultAuthority).
		SetVaultProgramAccount(vaultProgram).
		SetTokenProgramAccount(tokenProgram).
		SetTokenProgram2022Account(tokenProgram2022).
		SetUserTokenAAccount(userTokenA).
		SetVaultTokenAAccount(vaultTokenA).
		SetTokenAAccount(tokenA)
}
