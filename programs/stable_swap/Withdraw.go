// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_swap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// removeliquidity
type Withdraw struct {
	Amount            *uint64
	MinimumAmountsOut *[]uint64

	// [0] = [WRITE] user_pool_token
	//
	// [1] = [WRITE] mint
	//
	// [2] = [WRITE] pool
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawInstructionBuilder creates a new `Withdraw` instruction builder.
func NewWithdrawInstructionBuilder() *Withdraw {
	nd := &Withdraw{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *Withdraw) SetAmount(amount uint64) *Withdraw {
	inst.Amount = &amount
	return inst
}

// SetMinimumAmountsOut sets the "minimum_amounts_out" parameter.
func (inst *Withdraw) SetMinimumAmountsOut(minimum_amounts_out []uint64) *Withdraw {
	inst.MinimumAmountsOut = &minimum_amounts_out
	return inst
}

// SetUserPoolTokenAccount sets the "user_pool_token" account.
func (inst *Withdraw) SetUserPoolTokenAccount(userPoolToken ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(userPoolToken).WRITE()
	return inst
}

// GetUserPoolTokenAccount gets the "user_pool_token" account.
func (inst *Withdraw) GetUserPoolTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *Withdraw) SetMintAccount(mint ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *Withdraw) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolAccount sets the "pool" account.
func (inst *Withdraw) SetPoolAccount(pool ag_solanago.PublicKey) *Withdraw {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *Withdraw) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst Withdraw) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Withdraw,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Withdraw) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Withdraw) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.MinimumAmountsOut == nil {
			return errors.New("MinimumAmountsOut parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.UserPoolToken is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Pool is not set")
		}
	}
	return nil
}

func (inst *Withdraw) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Withdraw")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("             Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("  MinimumAmountsOut", *inst.MinimumAmountsOut))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("user_pool_token", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj Withdraw) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountsOut` param:
	err = encoder.Encode(obj.MinimumAmountsOut)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Withdraw) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountsOut`:
	err = decoder.Decode(&obj.MinimumAmountsOut)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawInstruction declares a new Withdraw instruction with the provided parameters and accounts.
func NewWithdrawInstruction(
	// Parameters:
	amount uint64,
	minimum_amounts_out []uint64,
	// Accounts:
	userPoolToken ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	pool ag_solanago.PublicKey) *Withdraw {
	return NewWithdrawInstructionBuilder().
		SetAmount(amount).
		SetMinimumAmountsOut(minimum_amounts_out).
		SetUserPoolTokenAccount(userPoolToken).
		SetMintAccount(mint).
		SetPoolAccount(pool)
}
