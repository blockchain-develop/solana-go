// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_swap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SwapV2 is the `swap_v2` instruction.
type SwapV2 struct {
	AmountIn         *uint64 `bin:"optional"`
	MinimumAmountOut *uint64

	// [0] = [SIGNER] user
	//
	// [1] = [] mint_in
	//
	// [2] = [] mint_out
	//
	// [3] = [WRITE] user_token_in
	//
	// [4] = [WRITE] user_token_out
	//
	// [5] = [WRITE] vault_token_in
	//
	// [6] = [WRITE] vault_token_out
	//
	// [7] = [WRITE] beneficiary_token_out
	//
	// [8] = [WRITE] pool
	//
	// [9] = [] withdraw_authority
	//
	// [10] = [] vault
	//
	// [11] = [] vault_authority
	//
	// [12] = [] vault_program
	//
	// [13] = [] token_program
	//
	// [14] = [] token_2022_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapV2InstructionBuilder creates a new `SwapV2` instruction builder.
func NewSwapV2InstructionBuilder() *SwapV2 {
	nd := &SwapV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetAmountIn sets the "amount_in" parameter.
func (inst *SwapV2) SetAmountIn(amount_in uint64) *SwapV2 {
	inst.AmountIn = &amount_in
	return inst
}

// SetMinimumAmountOut sets the "minimum_amount_out" parameter.
func (inst *SwapV2) SetMinimumAmountOut(minimum_amount_out uint64) *SwapV2 {
	inst.MinimumAmountOut = &minimum_amount_out
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *SwapV2) SetUserAccount(user ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *SwapV2) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintInAccount sets the "mint_in" account.
func (inst *SwapV2) SetMintInAccount(mintIn ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mintIn)
	return inst
}

// GetMintInAccount gets the "mint_in" account.
func (inst *SwapV2) GetMintInAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintOutAccount sets the "mint_out" account.
func (inst *SwapV2) SetMintOutAccount(mintOut ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mintOut)
	return inst
}

// GetMintOutAccount gets the "mint_out" account.
func (inst *SwapV2) GetMintOutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserTokenInAccount sets the "user_token_in" account.
func (inst *SwapV2) SetUserTokenInAccount(userTokenIn ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userTokenIn).WRITE()
	return inst
}

// GetUserTokenInAccount gets the "user_token_in" account.
func (inst *SwapV2) GetUserTokenInAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserTokenOutAccount sets the "user_token_out" account.
func (inst *SwapV2) SetUserTokenOutAccount(userTokenOut ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userTokenOut).WRITE()
	return inst
}

// GetUserTokenOutAccount gets the "user_token_out" account.
func (inst *SwapV2) GetUserTokenOutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetVaultTokenInAccount sets the "vault_token_in" account.
func (inst *SwapV2) SetVaultTokenInAccount(vaultTokenIn ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(vaultTokenIn).WRITE()
	return inst
}

// GetVaultTokenInAccount gets the "vault_token_in" account.
func (inst *SwapV2) GetVaultTokenInAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetVaultTokenOutAccount sets the "vault_token_out" account.
func (inst *SwapV2) SetVaultTokenOutAccount(vaultTokenOut ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(vaultTokenOut).WRITE()
	return inst
}

// GetVaultTokenOutAccount gets the "vault_token_out" account.
func (inst *SwapV2) GetVaultTokenOutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBeneficiaryTokenOutAccount sets the "beneficiary_token_out" account.
func (inst *SwapV2) SetBeneficiaryTokenOutAccount(beneficiaryTokenOut ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(beneficiaryTokenOut).WRITE()
	return inst
}

// GetBeneficiaryTokenOutAccount gets the "beneficiary_token_out" account.
func (inst *SwapV2) GetBeneficiaryTokenOutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPoolAccount sets the "pool" account.
func (inst *SwapV2) SetPoolAccount(pool ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *SwapV2) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetWithdrawAuthorityAccount sets the "withdraw_authority" account.
func (inst *SwapV2) SetWithdrawAuthorityAccount(withdrawAuthority ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(withdrawAuthority)
	return inst
}

// GetWithdrawAuthorityAccount gets the "withdraw_authority" account.
func (inst *SwapV2) GetWithdrawAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetVaultAccount sets the "vault" account.
func (inst *SwapV2) SetVaultAccount(vault ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(vault)
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *SwapV2) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetVaultAuthorityAccount sets the "vault_authority" account.
func (inst *SwapV2) SetVaultAuthorityAccount(vaultAuthority ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(vaultAuthority)
	return inst
}

// GetVaultAuthorityAccount gets the "vault_authority" account.
func (inst *SwapV2) GetVaultAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetVaultProgramAccount sets the "vault_program" account.
func (inst *SwapV2) SetVaultProgramAccount(vaultProgram ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(vaultProgram)
	return inst
}

// GetVaultProgramAccount gets the "vault_program" account.
func (inst *SwapV2) GetVaultProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *SwapV2) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *SwapV2) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetToken2022ProgramAccount sets the "token_2022_program" account.
func (inst *SwapV2) SetToken2022ProgramAccount(token2022Program ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(token2022Program)
	return inst
}

// GetToken2022ProgramAccount gets the "token_2022_program" account.
func (inst *SwapV2) GetToken2022ProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst SwapV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SwapV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SwapV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SwapV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MinimumAmountOut == nil {
			return errors.New("MinimumAmountOut parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MintIn is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MintOut is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserTokenIn is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserTokenOut is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.VaultTokenIn is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.VaultTokenOut is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.BeneficiaryTokenOut is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.WithdrawAuthority is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.VaultAuthority is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.VaultProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Token2022Program is not set")
		}
	}
	return nil
}

func (inst *SwapV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SwapV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          AmountIn (OPT)", inst.AmountIn))
						paramsBranch.Child(ag_format.Param("  MinimumAmountOut", *inst.MinimumAmountOut))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              mint_in", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             mint_out", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        user_token_in", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       user_token_out", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       vault_token_in", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("      vault_token_out", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("beneficiary_token_out", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                 pool", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("   withdraw_authority", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                vault", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("      vault_authority", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("        vault_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("        token_program", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("   token_2022_program", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj SwapV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param (optional):
	{
		if obj.AmountIn == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AmountIn)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SwapV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AmountIn)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapV2Instruction declares a new SwapV2 instruction with the provided parameters and accounts.
func NewSwapV2Instruction(
	// Parameters:
	amount_in uint64,
	minimum_amount_out uint64,
	// Accounts:
	user ag_solanago.PublicKey,
	mintIn ag_solanago.PublicKey,
	mintOut ag_solanago.PublicKey,
	userTokenIn ag_solanago.PublicKey,
	userTokenOut ag_solanago.PublicKey,
	vaultTokenIn ag_solanago.PublicKey,
	vaultTokenOut ag_solanago.PublicKey,
	beneficiaryTokenOut ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	withdrawAuthority ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	vaultAuthority ag_solanago.PublicKey,
	vaultProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	token2022Program ag_solanago.PublicKey) *SwapV2 {
	return NewSwapV2InstructionBuilder().
		SetAmountIn(amount_in).
		SetMinimumAmountOut(minimum_amount_out).
		SetUserAccount(user).
		SetMintInAccount(mintIn).
		SetMintOutAccount(mintOut).
		SetUserTokenInAccount(userTokenIn).
		SetUserTokenOutAccount(userTokenOut).
		SetVaultTokenInAccount(vaultTokenIn).
		SetVaultTokenOutAccount(vaultTokenOut).
		SetBeneficiaryTokenOutAccount(beneficiaryTokenOut).
		SetPoolAccount(pool).
		SetWithdrawAuthorityAccount(withdrawAuthority).
		SetVaultAccount(vault).
		SetVaultAuthorityAccount(vaultAuthority).
		SetVaultProgramAccount(vaultProgram).
		SetTokenProgramAccount(tokenProgram).
		SetToken2022ProgramAccount(token2022Program)
}
