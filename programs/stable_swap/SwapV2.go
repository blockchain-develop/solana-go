// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_swap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SwapV2 is the `swap_v2` instruction.
type SwapV2 struct {
	AmountIn         *uint64 `bin:"optional"`
	MinimumAmountOut *uint64

	// [0] = [WRITE] user_token_in
	//
	// [1] = [WRITE] user_token_out
	//
	// [2] = [WRITE] vault_token_in
	//
	// [3] = [WRITE] vault_token_out
	//
	// [4] = [WRITE] beneficiary_token_out
	//
	// [5] = [WRITE] pool
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapV2InstructionBuilder creates a new `SwapV2` instruction builder.
func NewSwapV2InstructionBuilder() *SwapV2 {
	nd := &SwapV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetAmountIn sets the "amount_in" parameter.
func (inst *SwapV2) SetAmountIn(amount_in uint64) *SwapV2 {
	inst.AmountIn = &amount_in
	return inst
}

// SetMinimumAmountOut sets the "minimum_amount_out" parameter.
func (inst *SwapV2) SetMinimumAmountOut(minimum_amount_out uint64) *SwapV2 {
	inst.MinimumAmountOut = &minimum_amount_out
	return inst
}

// SetUserTokenInAccount sets the "user_token_in" account.
func (inst *SwapV2) SetUserTokenInAccount(userTokenIn ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(userTokenIn).WRITE()
	return inst
}

// GetUserTokenInAccount gets the "user_token_in" account.
func (inst *SwapV2) GetUserTokenInAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserTokenOutAccount sets the "user_token_out" account.
func (inst *SwapV2) SetUserTokenOutAccount(userTokenOut ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(userTokenOut).WRITE()
	return inst
}

// GetUserTokenOutAccount gets the "user_token_out" account.
func (inst *SwapV2) GetUserTokenOutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVaultTokenInAccount sets the "vault_token_in" account.
func (inst *SwapV2) SetVaultTokenInAccount(vaultTokenIn ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vaultTokenIn).WRITE()
	return inst
}

// GetVaultTokenInAccount gets the "vault_token_in" account.
func (inst *SwapV2) GetVaultTokenInAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetVaultTokenOutAccount sets the "vault_token_out" account.
func (inst *SwapV2) SetVaultTokenOutAccount(vaultTokenOut ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(vaultTokenOut).WRITE()
	return inst
}

// GetVaultTokenOutAccount gets the "vault_token_out" account.
func (inst *SwapV2) GetVaultTokenOutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBeneficiaryTokenOutAccount sets the "beneficiary_token_out" account.
func (inst *SwapV2) SetBeneficiaryTokenOutAccount(beneficiaryTokenOut ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(beneficiaryTokenOut).WRITE()
	return inst
}

// GetBeneficiaryTokenOutAccount gets the "beneficiary_token_out" account.
func (inst *SwapV2) GetBeneficiaryTokenOutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolAccount sets the "pool" account.
func (inst *SwapV2) SetPoolAccount(pool ag_solanago.PublicKey) *SwapV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *SwapV2) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst SwapV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SwapV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SwapV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SwapV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MinimumAmountOut == nil {
			return errors.New("MinimumAmountOut parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.UserTokenIn is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UserTokenOut is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VaultTokenIn is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.VaultTokenOut is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BeneficiaryTokenOut is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Pool is not set")
		}
	}
	return nil
}

func (inst *SwapV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SwapV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          AmountIn (OPT)", inst.AmountIn))
						paramsBranch.Child(ag_format.Param("  MinimumAmountOut", *inst.MinimumAmountOut))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        user_token_in", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       user_token_out", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       vault_token_in", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      vault_token_out", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("beneficiary_token_out", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                 pool", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj SwapV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param (optional):
	{
		if obj.AmountIn == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AmountIn)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SwapV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AmountIn)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapV2Instruction declares a new SwapV2 instruction with the provided parameters and accounts.
func NewSwapV2Instruction(
	// Parameters:
	amount_in uint64,
	minimum_amount_out uint64,
	// Accounts:
	userTokenIn ag_solanago.PublicKey,
	userTokenOut ag_solanago.PublicKey,
	vaultTokenIn ag_solanago.PublicKey,
	vaultTokenOut ag_solanago.PublicKey,
	beneficiaryTokenOut ag_solanago.PublicKey,
	pool ag_solanago.PublicKey) *SwapV2 {
	return NewSwapV2InstructionBuilder().
		SetAmountIn(amount_in).
		SetMinimumAmountOut(minimum_amount_out).
		SetUserTokenInAccount(userTokenIn).
		SetUserTokenOutAccount(userTokenOut).
		SetVaultTokenInAccount(vaultTokenIn).
		SetVaultTokenOutAccount(vaultTokenOut).
		SetBeneficiaryTokenOutAccount(beneficiaryTokenOut).
		SetPoolAccount(pool)
}
