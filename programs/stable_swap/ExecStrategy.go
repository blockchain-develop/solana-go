// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_swap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ExecStrategy is the `exec_strategy` instruction.
type ExecStrategy struct {
	RampStep     *uint16
	RampDuration *uint32

	// [0] = [WRITE] pool
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewExecStrategyInstructionBuilder creates a new `ExecStrategy` instruction builder.
func NewExecStrategyInstructionBuilder() *ExecStrategy {
	nd := &ExecStrategy{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetRampStep sets the "ramp_step" parameter.
func (inst *ExecStrategy) SetRampStep(ramp_step uint16) *ExecStrategy {
	inst.RampStep = &ramp_step
	return inst
}

// SetRampDuration sets the "ramp_duration" parameter.
func (inst *ExecStrategy) SetRampDuration(ramp_duration uint32) *ExecStrategy {
	inst.RampDuration = &ramp_duration
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *ExecStrategy) SetPoolAccount(pool ag_solanago.PublicKey) *ExecStrategy {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *ExecStrategy) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst ExecStrategy) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ExecStrategy,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ExecStrategy) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ExecStrategy) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RampStep == nil {
			return errors.New("RampStep parameter is not set")
		}
		if inst.RampDuration == nil {
			return errors.New("RampDuration parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
	}
	return nil
}

func (inst *ExecStrategy) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ExecStrategy")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     RampStep", *inst.RampStep))
						paramsBranch.Child(ag_format.Param(" RampDuration", *inst.RampDuration))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("pool", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj ExecStrategy) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RampStep` param:
	err = encoder.Encode(obj.RampStep)
	if err != nil {
		return err
	}
	// Serialize `RampDuration` param:
	err = encoder.Encode(obj.RampDuration)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ExecStrategy) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RampStep`:
	err = decoder.Decode(&obj.RampStep)
	if err != nil {
		return err
	}
	// Deserialize `RampDuration`:
	err = decoder.Decode(&obj.RampDuration)
	if err != nil {
		return err
	}
	return nil
}

// NewExecStrategyInstruction declares a new ExecStrategy instruction with the provided parameters and accounts.
func NewExecStrategyInstruction(
	// Parameters:
	ramp_step uint16,
	ramp_duration uint32,
	// Accounts:
	pool ag_solanago.PublicKey) *ExecStrategy {
	return NewExecStrategyInstructionBuilder().
		SetRampStep(ramp_step).
		SetRampDuration(ramp_duration).
		SetPoolAccount(pool)
}
