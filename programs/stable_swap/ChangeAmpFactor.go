// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_swap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ChangeAmpFactor is the `change_amp_factor` instruction.
type ChangeAmpFactor struct {
	NewAmpFactor *uint16
	RampDuration *uint32

	// [0] = [WRITE] pool
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewChangeAmpFactorInstructionBuilder creates a new `ChangeAmpFactor` instruction builder.
func NewChangeAmpFactorInstructionBuilder() *ChangeAmpFactor {
	nd := &ChangeAmpFactor{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetNewAmpFactor sets the "new_amp_factor" parameter.
func (inst *ChangeAmpFactor) SetNewAmpFactor(new_amp_factor uint16) *ChangeAmpFactor {
	inst.NewAmpFactor = &new_amp_factor
	return inst
}

// SetRampDuration sets the "ramp_duration" parameter.
func (inst *ChangeAmpFactor) SetRampDuration(ramp_duration uint32) *ChangeAmpFactor {
	inst.RampDuration = &ramp_duration
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *ChangeAmpFactor) SetPoolAccount(pool ag_solanago.PublicKey) *ChangeAmpFactor {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *ChangeAmpFactor) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst ChangeAmpFactor) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ChangeAmpFactor,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ChangeAmpFactor) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ChangeAmpFactor) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewAmpFactor == nil {
			return errors.New("NewAmpFactor parameter is not set")
		}
		if inst.RampDuration == nil {
			return errors.New("RampDuration parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
	}
	return nil
}

func (inst *ChangeAmpFactor) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ChangeAmpFactor")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  NewAmpFactor", *inst.NewAmpFactor))
						paramsBranch.Child(ag_format.Param("  RampDuration", *inst.RampDuration))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("pool", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj ChangeAmpFactor) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewAmpFactor` param:
	err = encoder.Encode(obj.NewAmpFactor)
	if err != nil {
		return err
	}
	// Serialize `RampDuration` param:
	err = encoder.Encode(obj.RampDuration)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ChangeAmpFactor) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewAmpFactor`:
	err = decoder.Decode(&obj.NewAmpFactor)
	if err != nil {
		return err
	}
	// Deserialize `RampDuration`:
	err = decoder.Decode(&obj.RampDuration)
	if err != nil {
		return err
	}
	return nil
}

// NewChangeAmpFactorInstruction declares a new ChangeAmpFactor instruction with the provided parameters and accounts.
func NewChangeAmpFactorInstruction(
	// Parameters:
	new_amp_factor uint16,
	ramp_duration uint32,
	// Accounts:
	pool ag_solanago.PublicKey) *ChangeAmpFactor {
	return NewChangeAmpFactorInstructionBuilder().
		SetNewAmpFactor(new_amp_factor).
		SetRampDuration(ramp_duration).
		SetPoolAccount(pool)
}
