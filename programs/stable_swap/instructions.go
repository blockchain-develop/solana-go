// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package stable_swap

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("swapNyd8XiQwJ6ianp9snpu4brUqFxadzvHebnAXjJZ")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "StableSwap"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_AcceptOwner = ag_binary.TypeID([8]byte{176, 23, 41, 28, 23, 111, 8, 4})

	Instruction_ApproveStrategy = ag_binary.TypeID([8]byte{7, 141, 162, 60, 71, 115, 26, 146})

	Instruction_ChangeAmpFactor = ag_binary.TypeID([8]byte{56, 238, 189, 35, 200, 157, 42, 66})

	Instruction_ChangeSwapFee = ag_binary.TypeID([8]byte{231, 15, 132, 51, 132, 165, 64, 170})

	Instruction_CreateStrategy = ag_binary.TypeID([8]byte{152, 160, 107, 148, 245, 190, 127, 224})

	// addliquidity
	Instruction_Deposit = ag_binary.TypeID([8]byte{242, 35, 198, 137, 82, 225, 242, 182})

	Instruction_ExecStrategy = ag_binary.TypeID([8]byte{249, 46, 55, 57, 31, 38, 61, 27})

	// initializeapool
	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	Instruction_Pause = ag_binary.TypeID([8]byte{211, 22, 221, 251, 74, 121, 193, 47})

	Instruction_RejectOwner = ag_binary.TypeID([8]byte{238, 206, 198, 215, 51, 178, 133, 228})

	// shutdownthezero-liquiditypool
	Instruction_Shutdown = ag_binary.TypeID([8]byte{146, 204, 241, 213, 86, 21, 253, 211})

	// swap
	Instruction_Swap = ag_binary.TypeID([8]byte{248, 198, 158, 145, 225, 117, 135, 200})

	Instruction_SwapV2 = ag_binary.TypeID([8]byte{43, 4, 237, 11, 26, 201, 30, 98})

	Instruction_TransferOwner = ag_binary.TypeID([8]byte{245, 25, 221, 175, 106, 229, 225, 45})

	Instruction_Unpause = ag_binary.TypeID([8]byte{169, 144, 4, 38, 10, 141, 188, 255})

	// removeliquidity
	Instruction_Withdraw = ag_binary.TypeID([8]byte{183, 18, 70, 156, 148, 109, 161, 34})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_AcceptOwner:
		return "AcceptOwner"
	case Instruction_ApproveStrategy:
		return "ApproveStrategy"
	case Instruction_ChangeAmpFactor:
		return "ChangeAmpFactor"
	case Instruction_ChangeSwapFee:
		return "ChangeSwapFee"
	case Instruction_CreateStrategy:
		return "CreateStrategy"
	case Instruction_Deposit:
		return "Deposit"
	case Instruction_ExecStrategy:
		return "ExecStrategy"
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_Pause:
		return "Pause"
	case Instruction_RejectOwner:
		return "RejectOwner"
	case Instruction_Shutdown:
		return "Shutdown"
	case Instruction_Swap:
		return "Swap"
	case Instruction_SwapV2:
		return "SwapV2"
	case Instruction_TransferOwner:
		return "TransferOwner"
	case Instruction_Unpause:
		return "Unpause"
	case Instruction_Withdraw:
		return "Withdraw"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"accept_owner", (*AcceptOwner)(nil),
		},
		{
			"approve_strategy", (*ApproveStrategy)(nil),
		},
		{
			"change_amp_factor", (*ChangeAmpFactor)(nil),
		},
		{
			"change_swap_fee", (*ChangeSwapFee)(nil),
		},
		{
			"create_strategy", (*CreateStrategy)(nil),
		},
		{
			"deposit", (*Deposit)(nil),
		},
		{
			"exec_strategy", (*ExecStrategy)(nil),
		},
		{
			"initialize", (*Initialize)(nil),
		},
		{
			"pause", (*Pause)(nil),
		},
		{
			"reject_owner", (*RejectOwner)(nil),
		},
		{
			"shutdown", (*Shutdown)(nil),
		},
		{
			"swap", (*Swap)(nil),
		},
		{
			"swap_v2", (*SwapV2)(nil),
		},
		{
			"transfer_owner", (*TransferOwner)(nil),
		},
		{
			"unpause", (*Unpause)(nil),
		},
		{
			"withdraw", (*Withdraw)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
